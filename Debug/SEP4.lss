
SEP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000574  00800200  00005270  00005304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000287  00800774  00800774  00005878  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00005944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d0b5  00000000  00000000  00006324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032da  00000000  00000000  000133d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000607d  00000000  00000000  000166b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002004  00000000  00000000  0001c730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d40  00000000  00000000  0001e734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b219  00000000  00000000  00022474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  0002d68d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	45 c4       	rjmp	.+2186   	; 0x8bc <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__vector_25>
      68:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__vector_36>
      94:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ad 21 	jmp	0x435a	; 0x435a <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__vector_51>
      d0:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ef 1f 	jmp	0x3fde	; 0x3fde <__vector_54>
      dc:	0c 94 41 20 	jmp	0x4082	; 0x4082 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	cf 21       	and	r28, r15
      fa:	3f 22       	and	r3, r31
      fc:	3f 22       	and	r3, r31
      fe:	3f 22       	and	r3, r31
     100:	3f 22       	and	r3, r31
     102:	3f 22       	and	r3, r31
     104:	3f 22       	and	r3, r31
     106:	3f 22       	and	r3, r31
     108:	cf 21       	and	r28, r15
     10a:	3f 22       	and	r3, r31
     10c:	3f 22       	and	r3, r31
     10e:	3f 22       	and	r3, r31
     110:	3f 22       	and	r3, r31
     112:	3f 22       	and	r3, r31
     114:	3f 22       	and	r3, r31
     116:	3f 22       	and	r3, r31
     118:	d1 21       	and	r29, r1
     11a:	3f 22       	and	r3, r31
     11c:	3f 22       	and	r3, r31
     11e:	3f 22       	and	r3, r31
     120:	3f 22       	and	r3, r31
     122:	3f 22       	and	r3, r31
     124:	3f 22       	and	r3, r31
     126:	3f 22       	and	r3, r31
     128:	3f 22       	and	r3, r31
     12a:	3f 22       	and	r3, r31
     12c:	3f 22       	and	r3, r31
     12e:	3f 22       	and	r3, r31
     130:	3f 22       	and	r3, r31
     132:	3f 22       	and	r3, r31
     134:	3f 22       	and	r3, r31
     136:	3f 22       	and	r3, r31
     138:	d1 21       	and	r29, r1
     13a:	3f 22       	and	r3, r31
     13c:	3f 22       	and	r3, r31
     13e:	3f 22       	and	r3, r31
     140:	3f 22       	and	r3, r31
     142:	3f 22       	and	r3, r31
     144:	3f 22       	and	r3, r31
     146:	3f 22       	and	r3, r31
     148:	3f 22       	and	r3, r31
     14a:	3f 22       	and	r3, r31
     14c:	3f 22       	and	r3, r31
     14e:	3f 22       	and	r3, r31
     150:	3f 22       	and	r3, r31
     152:	3f 22       	and	r3, r31
     154:	3f 22       	and	r3, r31
     156:	3f 22       	and	r3, r31
     158:	3b 22       	and	r3, r27
     15a:	3f 22       	and	r3, r31
     15c:	3f 22       	and	r3, r31
     15e:	3f 22       	and	r3, r31
     160:	3f 22       	and	r3, r31
     162:	3f 22       	and	r3, r31
     164:	3f 22       	and	r3, r31
     166:	3f 22       	and	r3, r31
     168:	06 22       	and	r0, r22
     16a:	3f 22       	and	r3, r31
     16c:	3f 22       	and	r3, r31
     16e:	3f 22       	and	r3, r31
     170:	3f 22       	and	r3, r31
     172:	3f 22       	and	r3, r31
     174:	3f 22       	and	r3, r31
     176:	3f 22       	and	r3, r31
     178:	3f 22       	and	r3, r31
     17a:	3f 22       	and	r3, r31
     17c:	3f 22       	and	r3, r31
     17e:	3f 22       	and	r3, r31
     180:	3f 22       	and	r3, r31
     182:	3f 22       	and	r3, r31
     184:	3f 22       	and	r3, r31
     186:	3f 22       	and	r3, r31
     188:	fa 21       	and	r31, r10
     18a:	3f 22       	and	r3, r31
     18c:	3f 22       	and	r3, r31
     18e:	3f 22       	and	r3, r31
     190:	3f 22       	and	r3, r31
     192:	3f 22       	and	r3, r31
     194:	3f 22       	and	r3, r31
     196:	3f 22       	and	r3, r31
     198:	1e 22       	and	r1, r30

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0c e8       	ldi	r16, 0x8C	; 140
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 eb       	ldi	r31, 0xB4	; 180
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e0       	ldi	r31, 0x07	; 7
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	de d1       	rcall	.+956    	; 0x588 <uxListRemove>
     1cc:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxCurrentNumberOfTasks>
     1d6:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	5c d1       	rcall	.+696    	; 0x4a2 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	5a d1       	rcall	.+692    	; 0x4a2 <vPortFree>
     1ee:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	99 d2       	rcall	.+1330   	; 0x732 <vPortYield>
     200:	0e 94 7f 12 	call	0x24fe	; 0x24fe <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
     22a:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 11 12 	call	0x2422	; 0x2422 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     25c:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
     260:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	8a d1       	rcall	.+788    	; 0x588 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 52 11 	call	0x22a4	; 0x22a4 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 ca 11 	call	0x2394	; 0x2394 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
     2d0:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
     2d4:	61 d6       	rcall	.+3266   	; 0xf98 <vQueueWaitForMessageRestricted>
     2d6:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	29 d2       	rcall	.+1106   	; 0x732 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
     2e2:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	42 d1       	rcall	.+644    	; 0x588 <uxListRemove>
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 11 12 	call	0x2422	; 0x2422 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 97 24 	jmp	0x492e	; 0x492e <__tablejump2__>
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 ca 11 	call	0x2394	; 0x2394 <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	6f d0       	rcall	.+222    	; 0x4a2 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
     3d8:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
     3dc:	98 d4       	rcall	.+2352   	; 0xd0e <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <vTaskSuspendAll>
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 11 12 	call	0x2422	; 0x2422 <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
     3f6:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
     3fa:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	17 e0       	ldi	r17, 0x07	; 7
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e0 e7       	ldi	r30, 0x70	; 112
     424:	f2 e5       	ldi	r31, 0x52	; 82
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a4 37       	cpi	r26, 0x74	; 116
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	29 e0       	ldi	r18, 0x09	; 9
     438:	a4 e7       	ldi	r26, 0x74	; 116
     43a:	b7 e0       	ldi	r27, 0x07	; 7
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ab 3f       	cpi	r26, 0xFB	; 251
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 7e 15 	call	0x2afc	; 0x2afc <main>
     44a:	0c 94 36 29 	jmp	0x526c	; 0x526c <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     450:	e7 e0       	ldi	r30, 0x07	; 7
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	80 81       	ld	r24, Z
     456:	8f 60       	ori	r24, 0x0F	; 15
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret

0000045c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     45c:	e8 e0       	ldi	r30, 0x08	; 8
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	90 81       	ld	r25, Z
     462:	90 7f       	andi	r25, 0xF0	; 240
     464:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     466:	90 81       	ld	r25, Z
     468:	8f 70       	andi	r24, 0x0F	; 15
     46a:	98 2b       	or	r25, r24
     46c:	90 83       	st	Z, r25
     46e:	08 95       	ret

00000470 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     470:	e8 e0       	ldi	r30, 0x08	; 8
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	80 81       	ld	r24, Z
     476:	80 7f       	andi	r24, 0xF0	; 240
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     482:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     486:	ce 01       	movw	r24, r28
     488:	0e 94 b9 24 	call	0x4972	; 0x4972 <malloc>
     48c:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     48e:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     492:	20 97       	sbiw	r28, 0x00	; 0
     494:	11 f4       	brne	.+4      	; 0x49a <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     496:	0e 94 80 12 	call	0x2500	; 0x2500 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     49a:	ce 01       	movw	r24, r28
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
    if( pv )
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	41 f0       	breq	.+16     	; 0x4ba <vPortFree+0x18>
     4aa:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     4ac:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <vTaskSuspendAll>
        {
            free( pv );
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4b6:	0e 94 a6 0c 	call	0x194c	; 0x194c <xTaskResumeAll>
    }
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4c0:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4c2:	03 96       	adiw	r24, 0x03	; 3
     4c4:	92 83       	std	Z+2, r25	; 0x02
     4c6:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
     4ca:	3f ef       	ldi	r19, 0xFF	; 255
     4cc:	34 83       	std	Z+4, r19	; 0x04
     4ce:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4d0:	96 83       	std	Z+6, r25	; 0x06
     4d2:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4d4:	90 87       	std	Z+8, r25	; 0x08
     4d6:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     4d8:	10 82       	st	Z, r1
     4da:	08 95       	ret

000004dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     4dc:	fc 01       	movw	r30, r24
     4de:	11 86       	std	Z+9, r1	; 0x09
     4e0:	10 86       	std	Z+8, r1	; 0x08
     4e2:	08 95       	ret

000004e4 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	9c 01       	movw	r18, r24
     4ea:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     4ec:	dc 01       	movw	r26, r24
     4ee:	11 96       	adiw	r26, 0x01	; 1
     4f0:	cd 91       	ld	r28, X+
     4f2:	dc 91       	ld	r29, X
     4f4:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     4f6:	d3 83       	std	Z+3, r29	; 0x03
     4f8:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	95 83       	std	Z+5, r25	; 0x05
     500:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     502:	8c 81       	ldd	r24, Y+4	; 0x04
     504:	9d 81       	ldd	r25, Y+5	; 0x05
     506:	dc 01       	movw	r26, r24
     508:	13 96       	adiw	r26, 0x03	; 3
     50a:	7c 93       	st	X, r23
     50c:	6e 93       	st	-X, r22
     50e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     510:	7d 83       	std	Y+5, r23	; 0x05
     512:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     514:	31 87       	std	Z+9, r19	; 0x09
     516:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     518:	f9 01       	movw	r30, r18
     51a:	80 81       	ld	r24, Z
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 83       	st	Z, r24
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     52c:	48 81       	ld	r20, Y
     52e:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     530:	4f 3f       	cpi	r20, 0xFF	; 255
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	52 07       	cpc	r21, r18
     536:	21 f4       	brne	.+8      	; 0x540 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     538:	fc 01       	movw	r30, r24
     53a:	a7 81       	ldd	r26, Z+7	; 0x07
     53c:	b0 85       	ldd	r27, Z+8	; 0x08
     53e:	0d c0       	rjmp	.+26     	; 0x55a <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     540:	dc 01       	movw	r26, r24
     542:	13 96       	adiw	r26, 0x03	; 3
     544:	01 c0       	rjmp	.+2      	; 0x548 <vListInsert+0x22>
     546:	df 01       	movw	r26, r30
     548:	12 96       	adiw	r26, 0x02	; 2
     54a:	ed 91       	ld	r30, X+
     54c:	fc 91       	ld	r31, X
     54e:	13 97       	sbiw	r26, 0x03	; 3
     550:	20 81       	ld	r18, Z
     552:	31 81       	ldd	r19, Z+1	; 0x01
     554:	42 17       	cp	r20, r18
     556:	53 07       	cpc	r21, r19
     558:	b0 f7       	brcc	.-20     	; 0x546 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     55a:	12 96       	adiw	r26, 0x02	; 2
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	13 97       	sbiw	r26, 0x03	; 3
     562:	fb 83       	std	Y+3, r31	; 0x03
     564:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     566:	d5 83       	std	Z+5, r29	; 0x05
     568:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     56a:	bd 83       	std	Y+5, r27	; 0x05
     56c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     56e:	13 96       	adiw	r26, 0x03	; 3
     570:	dc 93       	st	X, r29
     572:	ce 93       	st	-X, r28
     574:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     576:	99 87       	std	Y+9, r25	; 0x09
     578:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     57a:	fc 01       	movw	r30, r24
     57c:	20 81       	ld	r18, Z
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	20 83       	st	Z, r18
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     58e:	a0 85       	ldd	r26, Z+8	; 0x08
     590:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     592:	c2 81       	ldd	r28, Z+2	; 0x02
     594:	d3 81       	ldd	r29, Z+3	; 0x03
     596:	84 81       	ldd	r24, Z+4	; 0x04
     598:	95 81       	ldd	r25, Z+5	; 0x05
     59a:	9d 83       	std	Y+5, r25	; 0x05
     59c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     59e:	c4 81       	ldd	r28, Z+4	; 0x04
     5a0:	d5 81       	ldd	r29, Z+5	; 0x05
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	9b 83       	std	Y+3, r25	; 0x03
     5a8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5aa:	11 96       	adiw	r26, 0x01	; 1
     5ac:	8d 91       	ld	r24, X+
     5ae:	9c 91       	ld	r25, X
     5b0:	12 97       	sbiw	r26, 0x02	; 2
     5b2:	e8 17       	cp	r30, r24
     5b4:	f9 07       	cpc	r31, r25
     5b6:	31 f4       	brne	.+12     	; 0x5c4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5b8:	84 81       	ldd	r24, Z+4	; 0x04
     5ba:	95 81       	ldd	r25, Z+5	; 0x05
     5bc:	12 96       	adiw	r26, 0x02	; 2
     5be:	9c 93       	st	X, r25
     5c0:	8e 93       	st	-X, r24
     5c2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5c4:	11 86       	std	Z+9, r1	; 0x09
     5c6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5c8:	8c 91       	ld	r24, X
     5ca:	81 50       	subi	r24, 0x01	; 1
     5cc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ce:	8c 91       	ld	r24, X
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     5d6:	31 e1       	ldi	r19, 0x11	; 17
     5d8:	fc 01       	movw	r30, r24
     5da:	30 83       	st	Z, r19
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	22 e2       	ldi	r18, 0x22	; 34
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	a3 e3       	ldi	r26, 0x33	; 51
     5e6:	a0 83       	st	Z, r26
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	60 83       	st	Z, r22
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	70 83       	st	Z, r23
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	10 82       	st	Z, r1
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	10 82       	st	Z, r1
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	60 e8       	ldi	r22, 0x80	; 128
     5fc:	60 83       	st	Z, r22
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	10 82       	st	Z, r1
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	10 82       	st	Z, r1
     606:	31 97       	sbiw	r30, 0x01	; 1
     608:	10 82       	st	Z, r1
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	60 83       	st	Z, r22
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	63 e0       	ldi	r22, 0x03	; 3
     614:	60 83       	st	Z, r22
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	64 e0       	ldi	r22, 0x04	; 4
     61a:	60 83       	st	Z, r22
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	65 e0       	ldi	r22, 0x05	; 5
     620:	60 83       	st	Z, r22
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	66 e0       	ldi	r22, 0x06	; 6
     626:	60 83       	st	Z, r22
     628:	31 97       	sbiw	r30, 0x01	; 1
     62a:	67 e0       	ldi	r22, 0x07	; 7
     62c:	60 83       	st	Z, r22
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	68 e0       	ldi	r22, 0x08	; 8
     632:	60 83       	st	Z, r22
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	69 e0       	ldi	r22, 0x09	; 9
     638:	60 83       	st	Z, r22
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	60 e1       	ldi	r22, 0x10	; 16
     63e:	60 83       	st	Z, r22
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	30 83       	st	Z, r19
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	32 e1       	ldi	r19, 0x12	; 18
     648:	30 83       	st	Z, r19
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	33 e1       	ldi	r19, 0x13	; 19
     64e:	30 83       	st	Z, r19
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	34 e1       	ldi	r19, 0x14	; 20
     654:	30 83       	st	Z, r19
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	35 e1       	ldi	r19, 0x15	; 21
     65a:	30 83       	st	Z, r19
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	36 e1       	ldi	r19, 0x16	; 22
     660:	30 83       	st	Z, r19
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	37 e1       	ldi	r19, 0x17	; 23
     666:	30 83       	st	Z, r19
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	38 e1       	ldi	r19, 0x18	; 24
     66c:	30 83       	st	Z, r19
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	39 e1       	ldi	r19, 0x19	; 25
     672:	30 83       	st	Z, r19
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	30 e2       	ldi	r19, 0x20	; 32
     678:	30 83       	st	Z, r19
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	31 e2       	ldi	r19, 0x21	; 33
     67e:	30 83       	st	Z, r19
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	20 83       	st	Z, r18
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	23 e2       	ldi	r18, 0x23	; 35
     688:	20 83       	st	Z, r18
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	40 83       	st	Z, r20
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	50 83       	st	Z, r21
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	26 e2       	ldi	r18, 0x26	; 38
     696:	20 83       	st	Z, r18
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	27 e2       	ldi	r18, 0x27	; 39
     69c:	20 83       	st	Z, r18
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	28 e2       	ldi	r18, 0x28	; 40
     6a2:	20 83       	st	Z, r18
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	29 e2       	ldi	r18, 0x29	; 41
     6a8:	20 83       	st	Z, r18
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	20 e3       	ldi	r18, 0x30	; 48
     6ae:	20 83       	st	Z, r18
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	21 e3       	ldi	r18, 0x31	; 49
     6b4:	20 83       	st	Z, r18
     6b6:	89 97       	sbiw	r24, 0x29	; 41
     6b8:	08 95       	ret

000006ba <xPortStartScheduler>:
     6ba:	a8 95       	wdr
     6bc:	90 ec       	ldi	r25, 0xC0	; 192
     6be:	88 e1       	ldi	r24, 0x18	; 24
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	a8 95       	wdr
     6c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6d0:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     6d4:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     6d8:	cd 91       	ld	r28, X+
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	dd 91       	ld	r29, X+
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	7f 91       	pop	r23
     6f2:	6f 91       	pop	r22
     6f4:	5f 91       	pop	r21
     6f6:	4f 91       	pop	r20
     6f8:	3f 91       	pop	r19
     6fa:	2f 91       	pop	r18
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	bf 90       	pop	r11
     70a:	af 90       	pop	r10
     70c:	9f 90       	pop	r9
     70e:	8f 90       	pop	r8
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
     716:	4f 90       	pop	r4
     718:	3f 90       	pop	r3
     71a:	2f 90       	pop	r2
     71c:	1f 90       	pop	r1
     71e:	0f 90       	pop	r0
     720:	0c be       	out	0x3c, r0	; 60
     722:	0f 90       	pop	r0
     724:	0b be       	out	0x3b, r0	; 59
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	08 95       	ret
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	08 95       	ret

00000732 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	f8 94       	cli
     738:	0f 92       	push	r0
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	0c b6       	in	r0, 0x3c	; 60
     740:	0f 92       	push	r0
     742:	1f 92       	push	r1
     744:	11 24       	eor	r1, r1
     746:	2f 92       	push	r2
     748:	3f 92       	push	r3
     74a:	4f 92       	push	r4
     74c:	5f 92       	push	r5
     74e:	6f 92       	push	r6
     750:	7f 92       	push	r7
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     786:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     78a:	0d b6       	in	r0, 0x3d	; 61
     78c:	0d 92       	st	X+, r0
     78e:	0e b6       	in	r0, 0x3e	; 62
     790:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     792:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     796:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     79a:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     79e:	cd 91       	ld	r28, X+
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	dd 91       	ld	r29, X+
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	ff 91       	pop	r31
     7a8:	ef 91       	pop	r30
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	bf 91       	pop	r27
     7b0:	af 91       	pop	r26
     7b2:	9f 91       	pop	r25
     7b4:	8f 91       	pop	r24
     7b6:	7f 91       	pop	r23
     7b8:	6f 91       	pop	r22
     7ba:	5f 91       	pop	r21
     7bc:	4f 91       	pop	r20
     7be:	3f 91       	pop	r19
     7c0:	2f 91       	pop	r18
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	bf 90       	pop	r11
     7d0:	af 90       	pop	r10
     7d2:	9f 90       	pop	r9
     7d4:	8f 90       	pop	r8
     7d6:	7f 90       	pop	r7
     7d8:	6f 90       	pop	r6
     7da:	5f 90       	pop	r5
     7dc:	4f 90       	pop	r4
     7de:	3f 90       	pop	r3
     7e0:	2f 90       	pop	r2
     7e2:	1f 90       	pop	r1
     7e4:	0f 90       	pop	r0
     7e6:	0c be       	out	0x3c, r0	; 60
     7e8:	0f 90       	pop	r0
     7ea:	0b be       	out	0x3b, r0	; 59
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7f2:	08 95       	ret

000007f4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	0f 92       	push	r0
     7fc:	0b b6       	in	r0, 0x3b	; 59
     7fe:	0f 92       	push	r0
     800:	0c b6       	in	r0, 0x3c	; 60
     802:	0f 92       	push	r0
     804:	1f 92       	push	r1
     806:	11 24       	eor	r1, r1
     808:	2f 92       	push	r2
     80a:	3f 92       	push	r3
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     848:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     84c:	0d b6       	in	r0, 0x3d	; 61
     84e:	0d 92       	st	X+, r0
     850:	0e b6       	in	r0, 0x3e	; 62
     852:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     854:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     856:	c0 d7       	rcall	.+3968   	; 0x17d8 <xTaskIncrementTick>
     858:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     85a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     85e:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     862:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     866:	cd 91       	ld	r28, X+
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	dd 91       	ld	r29, X+
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	3f 90       	pop	r3
     8a8:	2f 90       	pop	r2
     8aa:	1f 90       	pop	r1
     8ac:	0f 90       	pop	r0
     8ae:	0c be       	out	0x3c, r0	; 60
     8b0:	0f 90       	pop	r0
     8b2:	0b be       	out	0x3b, r0	; 59
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8ba:	08 95       	ret

000008bc <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8bc:	9b df       	rcall	.-202    	; 0x7f4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8be:	18 95       	reti

000008c0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	0f 92       	push	r0
     8c6:	fc 01       	movw	r30, r24
     8c8:	92 8d       	ldd	r25, Z+26	; 0x1a
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	91 11       	cpse	r25, r1
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	08 95       	ret

000008d6 <prvCopyDataToQueue>:
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
     8e0:	04 2f       	mov	r16, r20
     8e2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8e6:	41 11       	cpse	r20, r1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <prvCopyDataToQueue+0x2c>
     8ea:	88 81       	ld	r24, Y
     8ec:	99 81       	ldd	r25, Y+1	; 0x01
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <prvCopyDataToQueue+0x1e>
     8f2:	42 c0       	rjmp	.+132    	; 0x978 <prvCopyDataToQueue+0xa2>
     8f4:	8c 81       	ldd	r24, Y+4	; 0x04
     8f6:	9d 81       	ldd	r25, Y+5	; 0x05
     8f8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xTaskPriorityDisinherit>
     8fc:	1d 82       	std	Y+5, r1	; 0x05
     8fe:	1c 82       	std	Y+4, r1	; 0x04
     900:	42 c0       	rjmp	.+132    	; 0x986 <prvCopyDataToQueue+0xb0>
     902:	01 11       	cpse	r16, r1
     904:	17 c0       	rjmp	.+46     	; 0x934 <prvCopyDataToQueue+0x5e>
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	9b 81       	ldd	r25, Y+3	; 0x03
     90c:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
     910:	2c 8d       	ldd	r18, Y+28	; 0x1c
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	9b 81       	ldd	r25, Y+3	; 0x03
     916:	82 0f       	add	r24, r18
     918:	91 1d       	adc	r25, r1
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	2c 81       	ldd	r18, Y+4	; 0x04
     920:	3d 81       	ldd	r19, Y+5	; 0x05
     922:	82 17       	cp	r24, r18
     924:	93 07       	cpc	r25, r19
     926:	50 f1       	brcs	.+84     	; 0x97c <prvCopyDataToQueue+0xa6>
     928:	88 81       	ld	r24, Y
     92a:	99 81       	ldd	r25, Y+1	; 0x01
     92c:	9b 83       	std	Y+3, r25	; 0x03
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	29 c0       	rjmp	.+82     	; 0x986 <prvCopyDataToQueue+0xb0>
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	9f 81       	ldd	r25, Y+7	; 0x07
     93a:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
     93e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	91 95       	neg	r25
     944:	81 95       	neg	r24
     946:	91 09       	sbc	r25, r1
     948:	2e 81       	ldd	r18, Y+6	; 0x06
     94a:	3f 81       	ldd	r19, Y+7	; 0x07
     94c:	28 0f       	add	r18, r24
     94e:	39 1f       	adc	r19, r25
     950:	3f 83       	std	Y+7, r19	; 0x07
     952:	2e 83       	std	Y+6, r18	; 0x06
     954:	48 81       	ld	r20, Y
     956:	59 81       	ldd	r21, Y+1	; 0x01
     958:	24 17       	cp	r18, r20
     95a:	35 07       	cpc	r19, r21
     95c:	30 f4       	brcc	.+12     	; 0x96a <prvCopyDataToQueue+0x94>
     95e:	2c 81       	ldd	r18, Y+4	; 0x04
     960:	3d 81       	ldd	r19, Y+5	; 0x05
     962:	82 0f       	add	r24, r18
     964:	93 1f       	adc	r25, r19
     966:	9f 83       	std	Y+7, r25	; 0x07
     968:	8e 83       	std	Y+6, r24	; 0x06
     96a:	02 30       	cpi	r16, 0x02	; 2
     96c:	49 f4       	brne	.+18     	; 0x980 <prvCopyDataToQueue+0xaa>
     96e:	11 23       	and	r17, r17
     970:	49 f0       	breq	.+18     	; 0x984 <prvCopyDataToQueue+0xae>
     972:	11 50       	subi	r17, 0x01	; 1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	07 c0       	rjmp	.+14     	; 0x986 <prvCopyDataToQueue+0xb0>
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	05 c0       	rjmp	.+10     	; 0x986 <prvCopyDataToQueue+0xb0>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	03 c0       	rjmp	.+6      	; 0x986 <prvCopyDataToQueue+0xb0>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	01 c0       	rjmp	.+2      	; 0x986 <prvCopyDataToQueue+0xb0>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	1f 5f       	subi	r17, 0xFF	; 255
     988:	1a 8f       	std	Y+26, r17	; 0x1a
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <prvCopyDataFromQueue>:
     994:	fc 01       	movw	r30, r24
     996:	44 8d       	ldd	r20, Z+28	; 0x1c
     998:	44 23       	and	r20, r20
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <prvCopyDataFromQueue+0x32>
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	26 81       	ldd	r18, Z+6	; 0x06
     9a0:	37 81       	ldd	r19, Z+7	; 0x07
     9a2:	24 0f       	add	r18, r20
     9a4:	35 1f       	adc	r19, r21
     9a6:	37 83       	std	Z+7, r19	; 0x07
     9a8:	26 83       	std	Z+6, r18	; 0x06
     9aa:	84 81       	ldd	r24, Z+4	; 0x04
     9ac:	95 81       	ldd	r25, Z+5	; 0x05
     9ae:	28 17       	cp	r18, r24
     9b0:	39 07       	cpc	r19, r25
     9b2:	20 f0       	brcs	.+8      	; 0x9bc <prvCopyDataFromQueue+0x28>
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	97 83       	std	Z+7, r25	; 0x07
     9ba:	86 83       	std	Z+6, r24	; 0x06
     9bc:	cb 01       	movw	r24, r22
     9be:	66 81       	ldd	r22, Z+6	; 0x06
     9c0:	77 81       	ldd	r23, Z+7	; 0x07
     9c2:	0c 94 de 25 	jmp	0x4bbc	; 0x4bbc <memcpy>
     9c6:	08 95       	ret

000009c8 <prvUnlockQueue>:
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	8c 01       	movw	r16, r24
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	0f 92       	push	r0
     9da:	fc 01       	movw	r30, r24
     9dc:	c6 8d       	ldd	r28, Z+30	; 0x1e
     9de:	1c 16       	cp	r1, r28
     9e0:	ac f4       	brge	.+42     	; 0xa0c <prvUnlockQueue+0x44>
     9e2:	81 89       	ldd	r24, Z+17	; 0x11
     9e4:	81 11       	cpse	r24, r1
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <prvUnlockQueue+0x2c>
     9e8:	11 c0       	rjmp	.+34     	; 0xa0c <prvUnlockQueue+0x44>
     9ea:	f8 01       	movw	r30, r16
     9ec:	81 89       	ldd	r24, Z+17	; 0x11
     9ee:	81 11       	cpse	r24, r1
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <prvUnlockQueue+0x34>
     9f2:	0c c0       	rjmp	.+24     	; 0xa0c <prvUnlockQueue+0x44>
     9f4:	78 01       	movw	r14, r16
     9f6:	f1 e1       	ldi	r31, 0x11	; 17
     9f8:	ef 0e       	add	r14, r31
     9fa:	f1 1c       	adc	r15, r1
     9fc:	c7 01       	movw	r24, r14
     9fe:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <xTaskRemoveFromEventList>
     a02:	81 11       	cpse	r24, r1
     a04:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskMissedYield>
     a08:	c1 50       	subi	r28, 0x01	; 1
     a0a:	79 f7       	brne	.-34     	; 0x9ea <prvUnlockQueue+0x22>
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	f8 01       	movw	r30, r16
     a10:	86 8f       	std	Z+30, r24	; 0x1e
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	0f 92       	push	r0
     a1c:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a1e:	1c 16       	cp	r1, r28
     a20:	ac f4       	brge	.+42     	; 0xa4c <prvUnlockQueue+0x84>
     a22:	80 85       	ldd	r24, Z+8	; 0x08
     a24:	81 11       	cpse	r24, r1
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <prvUnlockQueue+0x6c>
     a28:	11 c0       	rjmp	.+34     	; 0xa4c <prvUnlockQueue+0x84>
     a2a:	f8 01       	movw	r30, r16
     a2c:	80 85       	ldd	r24, Z+8	; 0x08
     a2e:	81 11       	cpse	r24, r1
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <prvUnlockQueue+0x74>
     a32:	0c c0       	rjmp	.+24     	; 0xa4c <prvUnlockQueue+0x84>
     a34:	78 01       	movw	r14, r16
     a36:	f8 e0       	ldi	r31, 0x08	; 8
     a38:	ef 0e       	add	r14, r31
     a3a:	f1 1c       	adc	r15, r1
     a3c:	c7 01       	movw	r24, r14
     a3e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <xTaskRemoveFromEventList>
     a42:	81 11       	cpse	r24, r1
     a44:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vTaskMissedYield>
     a48:	c1 50       	subi	r28, 0x01	; 1
     a4a:	79 f7       	brne	.-34     	; 0xa2a <prvUnlockQueue+0x62>
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	f8 01       	movw	r30, r16
     a50:	85 8f       	std	Z+29, r24	; 0x1d
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	08 95       	ret

00000a62 <xQueueGenericReset>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	0f 92       	push	r0
     a6e:	e8 81       	ld	r30, Y
     a70:	f9 81       	ldd	r31, Y+1	; 0x01
     a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a74:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	82 9f       	mul	r24, r18
     a7c:	a0 01       	movw	r20, r0
     a7e:	83 9f       	mul	r24, r19
     a80:	50 0d       	add	r21, r0
     a82:	92 9f       	mul	r25, r18
     a84:	50 0d       	add	r21, r0
     a86:	11 24       	eor	r1, r1
     a88:	4e 0f       	add	r20, r30
     a8a:	5f 1f       	adc	r21, r31
     a8c:	5d 83       	std	Y+5, r21	; 0x05
     a8e:	4c 83       	std	Y+4, r20	; 0x04
     a90:	1a 8e       	std	Y+26, r1	; 0x1a
     a92:	fb 83       	std	Y+3, r31	; 0x03
     a94:	ea 83       	std	Y+2, r30	; 0x02
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	82 9f       	mul	r24, r18
     a9a:	a0 01       	movw	r20, r0
     a9c:	83 9f       	mul	r24, r19
     a9e:	50 0d       	add	r21, r0
     aa0:	92 9f       	mul	r25, r18
     aa2:	50 0d       	add	r21, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	cf 01       	movw	r24, r30
     aa8:	84 0f       	add	r24, r20
     aaa:	95 1f       	adc	r25, r21
     aac:	9f 83       	std	Y+7, r25	; 0x07
     aae:	8e 83       	std	Y+6, r24	; 0x06
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	8d 8f       	std	Y+29, r24	; 0x1d
     ab4:	8e 8f       	std	Y+30, r24	; 0x1e
     ab6:	61 11       	cpse	r22, r1
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <xQueueGenericReset+0x6e>
     aba:	88 85       	ldd	r24, Y+8	; 0x08
     abc:	88 23       	and	r24, r24
     abe:	71 f0       	breq	.+28     	; 0xadc <xQueueGenericReset+0x7a>
     ac0:	ce 01       	movw	r24, r28
     ac2:	08 96       	adiw	r24, 0x08	; 8
     ac4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <xTaskRemoveFromEventList>
     ac8:	88 23       	and	r24, r24
     aca:	41 f0       	breq	.+16     	; 0xadc <xQueueGenericReset+0x7a>
     acc:	32 de       	rcall	.-924    	; 0x732 <vPortYield>
     ace:	06 c0       	rjmp	.+12     	; 0xadc <xQueueGenericReset+0x7a>
     ad0:	ce 01       	movw	r24, r28
     ad2:	08 96       	adiw	r24, 0x08	; 8
     ad4:	f5 dc       	rcall	.-1558   	; 0x4c0 <vListInitialise>
     ad6:	ce 01       	movw	r24, r28
     ad8:	41 96       	adiw	r24, 0x11	; 17
     ada:	f2 dc       	rcall	.-1564   	; 0x4c0 <vListInitialise>
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <xQueueGenericCreate>:
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	08 2f       	mov	r16, r24
     af4:	16 2f       	mov	r17, r22
     af6:	f4 2e       	mov	r15, r20
     af8:	66 23       	and	r22, r22
     afa:	b9 f0       	breq	.+46     	; 0xb2a <xQueueGenericCreate+0x42>
     afc:	86 9f       	mul	r24, r22
     afe:	c0 01       	movw	r24, r0
     b00:	11 24       	eor	r1, r1
     b02:	81 96       	adiw	r24, 0x21	; 33
     b04:	bb dc       	rcall	.-1674   	; 0x47c <pvPortMalloc>
     b06:	ec 01       	movw	r28, r24
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	41 f4       	brne	.+16     	; 0xb1c <xQueueGenericCreate+0x34>
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <xQueueGenericCreate+0x4e>
     b0e:	0b 8f       	std	Y+27, r16	; 0x1b
     b10:	1c 8f       	std	Y+28, r17	; 0x1c
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	ce 01       	movw	r24, r28
     b16:	a5 df       	rcall	.-182    	; 0xa62 <xQueueGenericReset>
     b18:	f8 a2       	std	Y+32, r15	; 0x20
     b1a:	0d c0       	rjmp	.+26     	; 0xb36 <xQueueGenericCreate+0x4e>
     b1c:	81 96       	adiw	r24, 0x21	; 33
     b1e:	99 83       	std	Y+1, r25	; 0x01
     b20:	88 83       	st	Y, r24
     b22:	f5 cf       	rjmp	.-22     	; 0xb0e <xQueueGenericCreate+0x26>
     b24:	d9 83       	std	Y+1, r29	; 0x01
     b26:	c8 83       	st	Y, r28
     b28:	f2 cf       	rjmp	.-28     	; 0xb0e <xQueueGenericCreate+0x26>
     b2a:	81 e2       	ldi	r24, 0x21	; 33
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a6 dc       	rcall	.-1716   	; 0x47c <pvPortMalloc>
     b30:	ec 01       	movw	r28, r24
     b32:	89 2b       	or	r24, r25
     b34:	b9 f7       	brne	.-18     	; 0xb24 <xQueueGenericCreate+0x3c>
     b36:	ce 01       	movw	r24, r28
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	08 95       	ret

00000b44 <xQueueGenericSend>:
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <xQueueGenericSend+0x18>
     b5c:	1f 92       	push	r1
     b5e:	1f 92       	push	r1
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	8c 01       	movw	r16, r24
     b66:	6b 01       	movw	r12, r22
     b68:	5d 83       	std	Y+5, r21	; 0x05
     b6a:	4c 83       	std	Y+4, r20	; 0x04
     b6c:	a2 2e       	mov	r10, r18
     b6e:	b1 2c       	mov	r11, r1
     b70:	99 24       	eor	r9, r9
     b72:	93 94       	inc	r9
     b74:	7c 01       	movw	r14, r24
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	e8 0e       	add	r14, r24
     b7a:	f1 1c       	adc	r15, r1
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	0f 92       	push	r0
     b82:	f8 01       	movw	r30, r16
     b84:	92 8d       	ldd	r25, Z+26	; 0x1a
     b86:	83 8d       	ldd	r24, Z+27	; 0x1b
     b88:	98 17       	cp	r25, r24
     b8a:	18 f0       	brcs	.+6      	; 0xb92 <xQueueGenericSend+0x4e>
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	af 12       	cpse	r10, r31
     b90:	16 c0       	rjmp	.+44     	; 0xbbe <xQueueGenericSend+0x7a>
     b92:	4a 2d       	mov	r20, r10
     b94:	b6 01       	movw	r22, r12
     b96:	c8 01       	movw	r24, r16
     b98:	9e de       	rcall	.-708    	; 0x8d6 <prvCopyDataToQueue>
     b9a:	f8 01       	movw	r30, r16
     b9c:	91 89       	ldd	r25, Z+17	; 0x11
     b9e:	99 23       	and	r25, r25
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <xQueueGenericSend+0x6e>
     ba2:	c8 01       	movw	r24, r16
     ba4:	41 96       	adiw	r24, 0x11	; 17
     ba6:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <xTaskRemoveFromEventList>
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <xQueueGenericSend+0x72>
     bae:	c1 dd       	rcall	.-1150   	; 0x732 <vPortYield>
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <xQueueGenericSend+0x72>
     bb2:	81 11       	cpse	r24, r1
     bb4:	be dd       	rcall	.-1156   	; 0x732 <vPortYield>
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <xQueueGenericSend+0x108>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	89 2b       	or	r24, r25
     bc4:	21 f4       	brne	.+8      	; 0xbce <xQueueGenericSend+0x8a>
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <xQueueGenericSend+0x108>
     bce:	b1 10       	cpse	r11, r1
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <xQueueGenericSend+0x98>
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <vTaskInternalSetTimeOutState>
     bda:	b9 2c       	mov	r11, r9
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	eb d5       	rcall	.+3030   	; 0x17b8 <vTaskSuspendAll>
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	0f 92       	push	r0
     be8:	f8 01       	movw	r30, r16
     bea:	85 8d       	ldd	r24, Z+29	; 0x1d
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	09 f4       	brne	.+2      	; 0xbf2 <xQueueGenericSend+0xae>
     bf0:	15 8e       	std	Z+29, r1	; 0x1d
     bf2:	f8 01       	movw	r30, r16
     bf4:	86 8d       	ldd	r24, Z+30	; 0x1e
     bf6:	8f 3f       	cpi	r24, 0xFF	; 255
     bf8:	09 f4       	brne	.+2      	; 0xbfc <xQueueGenericSend+0xb8>
     bfa:	16 8e       	std	Z+30, r1	; 0x1e
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	be 01       	movw	r22, r28
     c02:	6c 5f       	subi	r22, 0xFC	; 252
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskCheckForTimeOut>
     c0e:	81 11       	cpse	r24, r1
     c10:	19 c0       	rjmp	.+50     	; 0xc44 <xQueueGenericSend+0x100>
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	0f 92       	push	r0
     c18:	f8 01       	movw	r30, r16
     c1a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c1c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	98 13       	cpse	r25, r24
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <xQueueGenericSend+0xf8>
     c26:	6c 81       	ldd	r22, Y+4	; 0x04
     c28:	7d 81       	ldd	r23, Y+5	; 0x05
     c2a:	c7 01       	movw	r24, r14
     c2c:	ba d7       	rcall	.+3956   	; 0x1ba2 <vTaskPlaceOnEventList>
     c2e:	c8 01       	movw	r24, r16
     c30:	cb de       	rcall	.-618    	; 0x9c8 <prvUnlockQueue>
     c32:	8c d6       	rcall	.+3352   	; 0x194c <xTaskResumeAll>
     c34:	81 11       	cpse	r24, r1
     c36:	a2 cf       	rjmp	.-188    	; 0xb7c <xQueueGenericSend+0x38>
     c38:	7c dd       	rcall	.-1288   	; 0x732 <vPortYield>
     c3a:	a0 cf       	rjmp	.-192    	; 0xb7c <xQueueGenericSend+0x38>
     c3c:	c8 01       	movw	r24, r16
     c3e:	c4 de       	rcall	.-632    	; 0x9c8 <prvUnlockQueue>
     c40:	85 d6       	rcall	.+3338   	; 0x194c <xTaskResumeAll>
     c42:	9c cf       	rjmp	.-200    	; 0xb7c <xQueueGenericSend+0x38>
     c44:	c8 01       	movw	r24, r16
     c46:	c0 de       	rcall	.-640    	; 0x9c8 <prvUnlockQueue>
     c48:	81 d6       	rcall	.+3330   	; 0x194c <xTaskResumeAll>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	08 95       	ret

00000c6e <xQueueCreateMutex>:
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	48 2f       	mov	r20, r24
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	37 df       	rcall	.-402    	; 0xae8 <xQueueGenericCreate>
     c7a:	ec 01       	movw	r28, r24
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	59 f0       	breq	.+22     	; 0xc96 <xQueueCreateMutex+0x28>
     c80:	1d 82       	std	Y+5, r1	; 0x05
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	19 82       	std	Y+1, r1	; 0x01
     c86:	18 82       	st	Y, r1
     c88:	1e 82       	std	Y+6, r1	; 0x06
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	57 df       	rcall	.-338    	; 0xb44 <xQueueGenericSend>
     c96:	ce 01       	movw	r24, r28
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <xQueueGenericSendFromISR>:
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	8a 01       	movw	r16, r20
     cac:	fc 01       	movw	r30, r24
     cae:	52 8d       	ldd	r21, Z+26	; 0x1a
     cb0:	33 8d       	ldd	r19, Z+27	; 0x1b
     cb2:	53 17       	cp	r21, r19
     cb4:	10 f0       	brcs	.+4      	; 0xcba <xQueueGenericSendFromISR+0x1c>
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	e1 f4       	brne	.+56     	; 0xcf2 <xQueueGenericSendFromISR+0x54>
     cba:	42 2f       	mov	r20, r18
     cbc:	78 01       	movw	r14, r16
     cbe:	ec 01       	movw	r28, r24
     cc0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cc2:	09 de       	rcall	.-1006   	; 0x8d6 <prvCopyDataToQueue>
     cc4:	1f 3f       	cpi	r17, 0xFF	; 255
     cc6:	79 f4       	brne	.+30     	; 0xce6 <xQueueGenericSendFromISR+0x48>
     cc8:	89 89       	ldd	r24, Y+17	; 0x11
     cca:	88 23       	and	r24, r24
     ccc:	a1 f0       	breq	.+40     	; 0xcf6 <xQueueGenericSendFromISR+0x58>
     cce:	ce 01       	movw	r24, r28
     cd0:	41 96       	adiw	r24, 0x11	; 17
     cd2:	90 d7       	rcall	.+3872   	; 0x1bf4 <xTaskRemoveFromEventList>
     cd4:	88 23       	and	r24, r24
     cd6:	89 f0       	breq	.+34     	; 0xcfa <xQueueGenericSendFromISR+0x5c>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	81 f0       	breq	.+32     	; 0xcfe <xQueueGenericSendFromISR+0x60>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	f7 01       	movw	r30, r14
     ce2:	80 83       	st	Z, r24
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <xQueueGenericSendFromISR+0x62>
     ce6:	ff 24       	eor	r15, r15
     ce8:	f3 94       	inc	r15
     cea:	f1 0e       	add	r15, r17
     cec:	fe 8e       	std	Y+30, r15	; 0x1e
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <xQueueGenericSendFromISR+0x62>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <xQueueGenericSendFromISR+0x62>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <xQueueGenericSendFromISR+0x62>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <xQueueGenericSendFromISR+0x62>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <xQueueReceive>:
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 d0       	rcall	.+0      	; 0xd26 <xQueueReceive+0x18>
     d26:	1f 92       	push	r1
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	8c 01       	movw	r16, r24
     d30:	5b 01       	movw	r10, r22
     d32:	5d 83       	std	Y+5, r21	; 0x05
     d34:	4c 83       	std	Y+4, r20	; 0x04
     d36:	e1 2c       	mov	r14, r1
     d38:	99 24       	eor	r9, r9
     d3a:	93 94       	inc	r9
     d3c:	6c 01       	movw	r12, r24
     d3e:	81 e1       	ldi	r24, 0x11	; 17
     d40:	c8 0e       	add	r12, r24
     d42:	d1 1c       	adc	r13, r1
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	f8 01       	movw	r30, r16
     d4c:	f2 8c       	ldd	r15, Z+26	; 0x1a
     d4e:	ff 20       	and	r15, r15
     d50:	91 f0       	breq	.+36     	; 0xd76 <xQueueReceive+0x68>
     d52:	b5 01       	movw	r22, r10
     d54:	c8 01       	movw	r24, r16
     d56:	1e de       	rcall	.-964    	; 0x994 <prvCopyDataFromQueue>
     d58:	fa 94       	dec	r15
     d5a:	f8 01       	movw	r30, r16
     d5c:	f2 8e       	std	Z+26, r15	; 0x1a
     d5e:	80 85       	ldd	r24, Z+8	; 0x08
     d60:	88 23       	and	r24, r24
     d62:	29 f0       	breq	.+10     	; 0xd6e <xQueueReceive+0x60>
     d64:	c8 01       	movw	r24, r16
     d66:	08 96       	adiw	r24, 0x08	; 8
     d68:	45 d7       	rcall	.+3722   	; 0x1bf4 <xTaskRemoveFromEventList>
     d6a:	81 11       	cpse	r24, r1
     d6c:	e2 dc       	rcall	.-1596   	; 0x732 <vPortYield>
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	44 c0       	rjmp	.+136    	; 0xdfe <xQueueReceive+0xf0>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	89 2b       	or	r24, r25
     d7c:	21 f4       	brne	.+8      	; 0xd86 <xQueueReceive+0x78>
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	3c c0       	rjmp	.+120    	; 0xdfe <xQueueReceive+0xf0>
     d86:	e1 10       	cpse	r14, r1
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <xQueueReceive+0x84>
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	7a d7       	rcall	.+3828   	; 0x1c84 <vTaskInternalSetTimeOutState>
     d90:	e9 2c       	mov	r14, r9
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	10 d5       	rcall	.+2592   	; 0x17b8 <vTaskSuspendAll>
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	0f 92       	push	r0
     d9e:	f8 01       	movw	r30, r16
     da0:	85 8d       	ldd	r24, Z+29	; 0x1d
     da2:	8f 3f       	cpi	r24, 0xFF	; 255
     da4:	09 f4       	brne	.+2      	; 0xda8 <xQueueReceive+0x9a>
     da6:	15 8e       	std	Z+29, r1	; 0x1d
     da8:	f8 01       	movw	r30, r16
     daa:	86 8d       	ldd	r24, Z+30	; 0x1e
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	09 f4       	brne	.+2      	; 0xdb2 <xQueueReceive+0xa4>
     db0:	16 8e       	std	Z+30, r1	; 0x1e
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	be 01       	movw	r22, r28
     db8:	6c 5f       	subi	r22, 0xFC	; 252
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	ce 01       	movw	r24, r28
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	6c d7       	rcall	.+3800   	; 0x1c9a <xTaskCheckForTimeOut>
     dc2:	81 11       	cpse	r24, r1
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <xQueueReceive+0xde>
     dc6:	c8 01       	movw	r24, r16
     dc8:	7b dd       	rcall	.-1290   	; 0x8c0 <prvIsQueueEmpty>
     dca:	88 23       	and	r24, r24
     dcc:	59 f0       	breq	.+22     	; 0xde4 <xQueueReceive+0xd6>
     dce:	6c 81       	ldd	r22, Y+4	; 0x04
     dd0:	7d 81       	ldd	r23, Y+5	; 0x05
     dd2:	c6 01       	movw	r24, r12
     dd4:	e6 d6       	rcall	.+3532   	; 0x1ba2 <vTaskPlaceOnEventList>
     dd6:	c8 01       	movw	r24, r16
     dd8:	f7 dd       	rcall	.-1042   	; 0x9c8 <prvUnlockQueue>
     dda:	b8 d5       	rcall	.+2928   	; 0x194c <xTaskResumeAll>
     ddc:	81 11       	cpse	r24, r1
     dde:	b2 cf       	rjmp	.-156    	; 0xd44 <xQueueReceive+0x36>
     de0:	a8 dc       	rcall	.-1712   	; 0x732 <vPortYield>
     de2:	b0 cf       	rjmp	.-160    	; 0xd44 <xQueueReceive+0x36>
     de4:	c8 01       	movw	r24, r16
     de6:	f0 dd       	rcall	.-1056   	; 0x9c8 <prvUnlockQueue>
     de8:	b1 d5       	rcall	.+2914   	; 0x194c <xTaskResumeAll>
     dea:	ac cf       	rjmp	.-168    	; 0xd44 <xQueueReceive+0x36>
     dec:	c8 01       	movw	r24, r16
     dee:	ec dd       	rcall	.-1064   	; 0x9c8 <prvUnlockQueue>
     df0:	ad d5       	rcall	.+2906   	; 0x194c <xTaskResumeAll>
     df2:	c8 01       	movw	r24, r16
     df4:	65 dd       	rcall	.-1334   	; 0x8c0 <prvIsQueueEmpty>
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <xQueueReceive+0xee>
     dfa:	a4 cf       	rjmp	.-184    	; 0xd44 <xQueueReceive+0x36>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	08 95       	ret

00000e20 <xQueueSemaphoreTake>:
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	00 d0       	rcall	.+0      	; 0xe34 <xQueueSemaphoreTake+0x14>
     e34:	1f 92       	push	r1
     e36:	1f 92       	push	r1
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8c 01       	movw	r16, r24
     e3e:	7d 83       	std	Y+5, r23	; 0x05
     e40:	6c 83       	std	Y+4, r22	; 0x04
     e42:	b1 2c       	mov	r11, r1
     e44:	d1 2c       	mov	r13, r1
     e46:	cc 24       	eor	r12, r12
     e48:	c3 94       	inc	r12
     e4a:	7c 01       	movw	r14, r24
     e4c:	81 e1       	ldi	r24, 0x11	; 17
     e4e:	e8 0e       	add	r14, r24
     e50:	f1 1c       	adc	r15, r1
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	0f 92       	push	r0
     e58:	d8 01       	movw	r26, r16
     e5a:	5a 96       	adiw	r26, 0x1a	; 26
     e5c:	8c 91       	ld	r24, X
     e5e:	5a 97       	sbiw	r26, 0x1a	; 26
     e60:	88 23       	and	r24, r24
     e62:	d9 f0       	breq	.+54     	; 0xe9a <xQueueSemaphoreTake+0x7a>
     e64:	81 50       	subi	r24, 0x01	; 1
     e66:	5a 96       	adiw	r26, 0x1a	; 26
     e68:	8c 93       	st	X, r24
     e6a:	5a 97       	sbiw	r26, 0x1a	; 26
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	89 2b       	or	r24, r25
     e72:	29 f4       	brne	.+10     	; 0xe7e <xQueueSemaphoreTake+0x5e>
     e74:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <pvTaskIncrementMutexHeldCount>
     e78:	f8 01       	movw	r30, r16
     e7a:	95 83       	std	Z+5, r25	; 0x05
     e7c:	84 83       	std	Z+4, r24	; 0x04
     e7e:	d8 01       	movw	r26, r16
     e80:	18 96       	adiw	r26, 0x08	; 8
     e82:	8c 91       	ld	r24, X
     e84:	88 23       	and	r24, r24
     e86:	29 f0       	breq	.+10     	; 0xe92 <xQueueSemaphoreTake+0x72>
     e88:	c8 01       	movw	r24, r16
     e8a:	08 96       	adiw	r24, 0x08	; 8
     e8c:	b3 d6       	rcall	.+3430   	; 0x1bf4 <xTaskRemoveFromEventList>
     e8e:	81 11       	cpse	r24, r1
     e90:	50 dc       	rcall	.-1888   	; 0x732 <vPortYield>
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	70 c0       	rjmp	.+224    	; 0xf7a <xQueueSemaphoreTake+0x15a>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	89 2b       	or	r24, r25
     ea0:	21 f4       	brne	.+8      	; 0xeaa <xQueueSemaphoreTake+0x8a>
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	68 c0       	rjmp	.+208    	; 0xf7a <xQueueSemaphoreTake+0x15a>
     eaa:	d1 10       	cpse	r13, r1
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <xQueueSemaphoreTake+0x96>
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	e8 d6       	rcall	.+3536   	; 0x1c84 <vTaskInternalSetTimeOutState>
     eb4:	dc 2c       	mov	r13, r12
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	7e d4       	rcall	.+2300   	; 0x17b8 <vTaskSuspendAll>
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	0f 92       	push	r0
     ec2:	f8 01       	movw	r30, r16
     ec4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ec6:	8f 3f       	cpi	r24, 0xFF	; 255
     ec8:	09 f4       	brne	.+2      	; 0xecc <xQueueSemaphoreTake+0xac>
     eca:	15 8e       	std	Z+29, r1	; 0x1d
     ecc:	d8 01       	movw	r26, r16
     ece:	5e 96       	adiw	r26, 0x1e	; 30
     ed0:	8c 91       	ld	r24, X
     ed2:	5e 97       	sbiw	r26, 0x1e	; 30
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	11 f4       	brne	.+4      	; 0xedc <xQueueSemaphoreTake+0xbc>
     ed8:	5e 96       	adiw	r26, 0x1e	; 30
     eda:	1c 92       	st	X, r1
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	be 01       	movw	r22, r28
     ee2:	6c 5f       	subi	r22, 0xFC	; 252
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	d7 d6       	rcall	.+3502   	; 0x1c9a <xTaskCheckForTimeOut>
     eec:	81 11       	cpse	r24, r1
     eee:	21 c0       	rjmp	.+66     	; 0xf32 <xQueueSemaphoreTake+0x112>
     ef0:	c8 01       	movw	r24, r16
     ef2:	e6 dc       	rcall	.-1588   	; 0x8c0 <prvIsQueueEmpty>
     ef4:	88 23       	and	r24, r24
     ef6:	c9 f0       	breq	.+50     	; 0xf2a <xQueueSemaphoreTake+0x10a>
     ef8:	f8 01       	movw	r30, r16
     efa:	80 81       	ld	r24, Z
     efc:	91 81       	ldd	r25, Z+1	; 0x01
     efe:	89 2b       	or	r24, r25
     f00:	49 f4       	brne	.+18     	; 0xf14 <xQueueSemaphoreTake+0xf4>
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	0f 92       	push	r0
     f08:	84 81       	ldd	r24, Z+4	; 0x04
     f0a:	95 81       	ldd	r25, Z+5	; 0x05
     f0c:	12 d7       	rcall	.+3620   	; 0x1d32 <xTaskPriorityInherit>
     f0e:	b8 2e       	mov	r11, r24
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	6c 81       	ldd	r22, Y+4	; 0x04
     f16:	7d 81       	ldd	r23, Y+5	; 0x05
     f18:	c7 01       	movw	r24, r14
     f1a:	43 d6       	rcall	.+3206   	; 0x1ba2 <vTaskPlaceOnEventList>
     f1c:	c8 01       	movw	r24, r16
     f1e:	54 dd       	rcall	.-1368   	; 0x9c8 <prvUnlockQueue>
     f20:	15 d5       	rcall	.+2602   	; 0x194c <xTaskResumeAll>
     f22:	81 11       	cpse	r24, r1
     f24:	96 cf       	rjmp	.-212    	; 0xe52 <xQueueSemaphoreTake+0x32>
     f26:	05 dc       	rcall	.-2038   	; 0x732 <vPortYield>
     f28:	94 cf       	rjmp	.-216    	; 0xe52 <xQueueSemaphoreTake+0x32>
     f2a:	c8 01       	movw	r24, r16
     f2c:	4d dd       	rcall	.-1382   	; 0x9c8 <prvUnlockQueue>
     f2e:	0e d5       	rcall	.+2588   	; 0x194c <xTaskResumeAll>
     f30:	90 cf       	rjmp	.-224    	; 0xe52 <xQueueSemaphoreTake+0x32>
     f32:	c8 01       	movw	r24, r16
     f34:	49 dd       	rcall	.-1390   	; 0x9c8 <prvUnlockQueue>
     f36:	0a d5       	rcall	.+2580   	; 0x194c <xTaskResumeAll>
     f38:	c8 01       	movw	r24, r16
     f3a:	c2 dc       	rcall	.-1660   	; 0x8c0 <prvIsQueueEmpty>
     f3c:	88 23       	and	r24, r24
     f3e:	09 f4       	brne	.+2      	; 0xf42 <xQueueSemaphoreTake+0x122>
     f40:	88 cf       	rjmp	.-240    	; 0xe52 <xQueueSemaphoreTake+0x32>
     f42:	bb 20       	and	r11, r11
     f44:	c9 f0       	breq	.+50     	; 0xf78 <xQueueSemaphoreTake+0x158>
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	0f 92       	push	r0
     f4c:	f8 01       	movw	r30, r16
     f4e:	81 89       	ldd	r24, Z+17	; 0x11
     f50:	88 23       	and	r24, r24
     f52:	39 f0       	breq	.+14     	; 0xf62 <xQueueSemaphoreTake+0x142>
     f54:	06 88       	ldd	r0, Z+22	; 0x16
     f56:	f7 89       	ldd	r31, Z+23	; 0x17
     f58:	e0 2d       	mov	r30, r0
     f5a:	80 81       	ld	r24, Z
     f5c:	64 e0       	ldi	r22, 0x04	; 4
     f5e:	68 1b       	sub	r22, r24
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <xQueueSemaphoreTake+0x144>
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	d8 01       	movw	r26, r16
     f66:	14 96       	adiw	r26, 0x04	; 4
     f68:	8d 91       	ld	r24, X+
     f6a:	9c 91       	ld	r25, X
     f6c:	15 97       	sbiw	r26, 0x05	; 5
     f6e:	93 d7       	rcall	.+3878   	; 0x1e96 <vTaskPriorityDisinheritAfterTimeout>
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <xQueueSemaphoreTake+0x15a>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	08 95       	ret

00000f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	0f 92       	push	r0
     fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa6:	8f 3f       	cpi	r24, 0xFF	; 255
     fa8:	09 f4       	brne	.+2      	; 0xfac <vQueueWaitForMessageRestricted+0x14>
     faa:	1d 8e       	std	Y+29, r1	; 0x1d
     fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fae:	8f 3f       	cpi	r24, 0xFF	; 255
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <vQueueWaitForMessageRestricted+0x1c>
     fb2:	1e 8e       	std	Y+30, r1	; 0x1e
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fba:	81 11       	cpse	r24, r1
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fbe:	ce 01       	movw	r24, r28
     fc0:	41 96       	adiw	r24, 0x11	; 17
     fc2:	00 d6       	rcall	.+3072   	; 0x1bc4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     fc4:	ce 01       	movw	r24, r28
     fc6:	00 dd       	rcall	.-1536   	; 0x9c8 <prvUnlockQueue>
    }
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
     fce:	fc 01       	movw	r30, r24
     fd0:	44 81       	ldd	r20, Z+4	; 0x04
     fd2:	55 81       	ldd	r21, Z+5	; 0x05
     fd4:	22 81       	ldd	r18, Z+2	; 0x02
     fd6:	33 81       	ldd	r19, Z+3	; 0x03
     fd8:	24 0f       	add	r18, r20
     fda:	35 1f       	adc	r19, r21
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	b9 01       	movw	r22, r18
     fe2:	68 1b       	sub	r22, r24
     fe4:	79 0b       	sbc	r23, r25
     fe6:	cb 01       	movw	r24, r22
     fe8:	64 17       	cp	r22, r20
     fea:	75 07       	cpc	r23, r21
     fec:	10 f0       	brcs	.+4      	; 0xff2 <prvBytesInBuffer+0x24>
     fee:	84 1b       	sub	r24, r20
     ff0:	95 0b       	sbc	r25, r21
     ff2:	08 95       	ret

00000ff4 <prvWriteBytesToBuffer>:
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	6c 01       	movw	r12, r24
    100a:	5b 01       	movw	r10, r22
    100c:	7a 01       	movw	r14, r20
    100e:	fc 01       	movw	r30, r24
    1010:	c2 81       	ldd	r28, Z+2	; 0x02
    1012:	d3 81       	ldd	r29, Z+3	; 0x03
    1014:	04 81       	ldd	r16, Z+4	; 0x04
    1016:	15 81       	ldd	r17, Z+5	; 0x05
    1018:	0c 1b       	sub	r16, r28
    101a:	1d 0b       	sbc	r17, r29
    101c:	40 17       	cp	r20, r16
    101e:	51 07       	cpc	r21, r17
    1020:	08 f4       	brcc	.+2      	; 0x1024 <prvWriteBytesToBuffer+0x30>
    1022:	8a 01       	movw	r16, r20
    1024:	f6 01       	movw	r30, r12
    1026:	84 85       	ldd	r24, Z+12	; 0x0c
    1028:	95 85       	ldd	r25, Z+13	; 0x0d
    102a:	a8 01       	movw	r20, r16
    102c:	b5 01       	movw	r22, r10
    102e:	8c 0f       	add	r24, r28
    1030:	9d 1f       	adc	r25, r29
    1032:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
    1036:	0e 15       	cp	r16, r14
    1038:	1f 05       	cpc	r17, r15
    103a:	58 f4       	brcc	.+22     	; 0x1052 <prvWriteBytesToBuffer+0x5e>
    103c:	a7 01       	movw	r20, r14
    103e:	40 1b       	sub	r20, r16
    1040:	51 0b       	sbc	r21, r17
    1042:	b5 01       	movw	r22, r10
    1044:	60 0f       	add	r22, r16
    1046:	71 1f       	adc	r23, r17
    1048:	f6 01       	movw	r30, r12
    104a:	84 85       	ldd	r24, Z+12	; 0x0c
    104c:	95 85       	ldd	r25, Z+13	; 0x0d
    104e:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
    1052:	ce 01       	movw	r24, r28
    1054:	8e 0d       	add	r24, r14
    1056:	9f 1d       	adc	r25, r15
    1058:	f6 01       	movw	r30, r12
    105a:	24 81       	ldd	r18, Z+4	; 0x04
    105c:	35 81       	ldd	r19, Z+5	; 0x05
    105e:	82 17       	cp	r24, r18
    1060:	93 07       	cpc	r25, r19
    1062:	10 f0       	brcs	.+4      	; 0x1068 <prvWriteBytesToBuffer+0x74>
    1064:	82 1b       	sub	r24, r18
    1066:	93 0b       	sbc	r25, r19
    1068:	f6 01       	movw	r30, r12
    106a:	93 83       	std	Z+3, r25	; 0x03
    106c:	82 83       	std	Z+2, r24	; 0x02
    106e:	c7 01       	movw	r24, r14
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	08 95       	ret

00001086 <prvWriteMessageToBuffer>:
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	1f 92       	push	r1
    1098:	1f 92       	push	r1
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	5a 83       	std	Y+2, r21	; 0x02
    10a0:	49 83       	std	Y+1, r20	; 0x01
    10a2:	21 15       	cp	r18, r1
    10a4:	31 05       	cpc	r19, r1
    10a6:	c9 f0       	breq	.+50     	; 0x10da <prvWriteMessageToBuffer+0x54>
    10a8:	6b 01       	movw	r12, r22
    10aa:	7c 01       	movw	r14, r24
    10ac:	fc 01       	movw	r30, r24
    10ae:	86 85       	ldd	r24, Z+14	; 0x0e
    10b0:	80 fd       	sbrc	r24, 0
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <prvWriteMessageToBuffer+0x3e>
    10b4:	ca 01       	movw	r24, r20
    10b6:	24 17       	cp	r18, r20
    10b8:	35 07       	cpc	r19, r21
    10ba:	08 f4       	brcc	.+2      	; 0x10be <prvWriteMessageToBuffer+0x38>
    10bc:	c9 01       	movw	r24, r18
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <prvWriteMessageToBuffer+0x60>
    10c4:	20 17       	cp	r18, r16
    10c6:	31 07       	cpc	r19, r17
    10c8:	58 f0       	brcs	.+22     	; 0x10e0 <prvWriteMessageToBuffer+0x5a>
    10ca:	42 e0       	ldi	r20, 0x02	; 2
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	c7 01       	movw	r24, r14
    10d6:	8e df       	rcall	.-228    	; 0xff4 <prvWriteBytesToBuffer>
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <prvWriteMessageToBuffer+0x60>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <prvWriteMessageToBuffer+0x6a>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <prvWriteMessageToBuffer+0x6a>
    10e6:	49 81       	ldd	r20, Y+1	; 0x01
    10e8:	5a 81       	ldd	r21, Y+2	; 0x02
    10ea:	b6 01       	movw	r22, r12
    10ec:	c7 01       	movw	r24, r14
    10ee:	82 df       	rcall	.-252    	; 0xff4 <prvWriteBytesToBuffer>
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	08 95       	ret

00001106 <prvReadBytesFromBuffer>:
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	7c 01       	movw	r14, r24
    111c:	5b 01       	movw	r10, r22
    111e:	e9 01       	movw	r28, r18
    1120:	42 17       	cp	r20, r18
    1122:	53 07       	cpc	r21, r19
    1124:	08 f4       	brcc	.+2      	; 0x1128 <prvReadBytesFromBuffer+0x22>
    1126:	ea 01       	movw	r28, r20
    1128:	20 97       	sbiw	r28, 0x00	; 0
    112a:	79 f1       	breq	.+94     	; 0x118a <prvReadBytesFromBuffer+0x84>
    112c:	f7 01       	movw	r30, r14
    112e:	00 81       	ld	r16, Z
    1130:	11 81       	ldd	r17, Z+1	; 0x01
    1132:	c4 80       	ldd	r12, Z+4	; 0x04
    1134:	d5 80       	ldd	r13, Z+5	; 0x05
    1136:	c0 1a       	sub	r12, r16
    1138:	d1 0a       	sbc	r13, r17
    113a:	cc 15       	cp	r28, r12
    113c:	dd 05       	cpc	r29, r13
    113e:	08 f4       	brcc	.+2      	; 0x1142 <prvReadBytesFromBuffer+0x3c>
    1140:	6e 01       	movw	r12, r28
    1142:	f7 01       	movw	r30, r14
    1144:	64 85       	ldd	r22, Z+12	; 0x0c
    1146:	75 85       	ldd	r23, Z+13	; 0x0d
    1148:	60 0f       	add	r22, r16
    114a:	71 1f       	adc	r23, r17
    114c:	a6 01       	movw	r20, r12
    114e:	c5 01       	movw	r24, r10
    1150:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
    1154:	cc 16       	cp	r12, r28
    1156:	dd 06       	cpc	r13, r29
    1158:	58 f4       	brcc	.+22     	; 0x1170 <prvReadBytesFromBuffer+0x6a>
    115a:	ae 01       	movw	r20, r28
    115c:	4c 19       	sub	r20, r12
    115e:	5d 09       	sbc	r21, r13
    1160:	f7 01       	movw	r30, r14
    1162:	64 85       	ldd	r22, Z+12	; 0x0c
    1164:	75 85       	ldd	r23, Z+13	; 0x0d
    1166:	c5 01       	movw	r24, r10
    1168:	8c 0d       	add	r24, r12
    116a:	9d 1d       	adc	r25, r13
    116c:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <memcpy>
    1170:	0c 0f       	add	r16, r28
    1172:	1d 1f       	adc	r17, r29
    1174:	f7 01       	movw	r30, r14
    1176:	84 81       	ldd	r24, Z+4	; 0x04
    1178:	95 81       	ldd	r25, Z+5	; 0x05
    117a:	08 17       	cp	r16, r24
    117c:	19 07       	cpc	r17, r25
    117e:	10 f0       	brcs	.+4      	; 0x1184 <prvReadBytesFromBuffer+0x7e>
    1180:	08 1b       	sub	r16, r24
    1182:	19 0b       	sbc	r17, r25
    1184:	f7 01       	movw	r30, r14
    1186:	11 83       	std	Z+1, r17	; 0x01
    1188:	00 83       	st	Z, r16
    118a:	ce 01       	movw	r24, r28
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	08 95       	ret

000011a2 <xStreamBufferGenericCreate>:
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	eb 01       	movw	r28, r22
    11ae:	11 e0       	ldi	r17, 0x01	; 1
    11b0:	41 30       	cpi	r20, 0x01	; 1
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <xStreamBufferGenericCreate+0x14>
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	20 97       	sbiw	r28, 0x00	; 0
    11b8:	11 f4       	brne	.+4      	; 0x11be <xStreamBufferGenericCreate+0x1c>
    11ba:	c1 e0       	ldi	r28, 0x01	; 1
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
    11be:	7c 01       	movw	r14, r24
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	e2 1a       	sub	r14, r18
    11c4:	f2 0a       	sbc	r15, r18
    11c6:	41 96       	adiw	r24, 0x11	; 17
    11c8:	59 d9       	rcall	.-3406   	; 0x47c <pvPortMalloc>
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	81 f0       	breq	.+32     	; 0x11ee <xStreamBufferGenericCreate+0x4c>
    11ce:	20 e1       	ldi	r18, 0x10	; 16
    11d0:	fc 01       	movw	r30, r24
    11d2:	11 92       	st	Z+, r1
    11d4:	2a 95       	dec	r18
    11d6:	e9 f7       	brne	.-6      	; 0x11d2 <xStreamBufferGenericCreate+0x30>
    11d8:	9c 01       	movw	r18, r24
    11da:	20 5f       	subi	r18, 0xF0	; 240
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	35 87       	std	Z+13, r19	; 0x0d
    11e2:	24 87       	std	Z+12, r18	; 0x0c
    11e4:	f5 82       	std	Z+5, r15	; 0x05
    11e6:	e4 82       	std	Z+4, r14	; 0x04
    11e8:	d7 83       	std	Z+7, r29	; 0x07
    11ea:	c6 83       	std	Z+6, r28	; 0x06
    11ec:	16 87       	std	Z+14, r17	; 0x0e
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <xStreamBufferReset>:
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	fc 01       	movw	r30, r24
    1200:	27 85       	ldd	r18, Z+15	; 0x0f
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	0f 92       	push	r0
    1208:	80 85       	ldd	r24, Z+8	; 0x08
    120a:	91 85       	ldd	r25, Z+9	; 0x09
    120c:	89 2b       	or	r24, r25
    120e:	d1 f4       	brne	.+52     	; 0x1244 <xStreamBufferReset+0x4a>
    1210:	82 85       	ldd	r24, Z+10	; 0x0a
    1212:	93 85       	ldd	r25, Z+11	; 0x0b
    1214:	89 2b       	or	r24, r25
    1216:	c1 f4       	brne	.+48     	; 0x1248 <xStreamBufferReset+0x4e>
    1218:	86 85       	ldd	r24, Z+14	; 0x0e
    121a:	46 81       	ldd	r20, Z+6	; 0x06
    121c:	57 81       	ldd	r21, Z+7	; 0x07
    121e:	64 81       	ldd	r22, Z+4	; 0x04
    1220:	75 81       	ldd	r23, Z+5	; 0x05
    1222:	a4 85       	ldd	r26, Z+12	; 0x0c
    1224:	b5 85       	ldd	r27, Z+13	; 0x0d
    1226:	90 e1       	ldi	r25, 0x10	; 16
    1228:	ef 01       	movw	r28, r30
    122a:	19 92       	st	Y+, r1
    122c:	9a 95       	dec	r25
    122e:	e9 f7       	brne	.-6      	; 0x122a <xStreamBufferReset+0x30>
    1230:	b5 87       	std	Z+13, r27	; 0x0d
    1232:	a4 87       	std	Z+12, r26	; 0x0c
    1234:	75 83       	std	Z+5, r23	; 0x05
    1236:	64 83       	std	Z+4, r22	; 0x04
    1238:	57 83       	std	Z+7, r21	; 0x07
    123a:	46 83       	std	Z+6, r20	; 0x06
    123c:	86 87       	std	Z+14, r24	; 0x0e
    123e:	27 87       	std	Z+15, r18	; 0x0f
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	03 c0       	rjmp	.+6      	; 0x124a <xStreamBufferReset+0x50>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	01 c0       	rjmp	.+2      	; 0x124a <xStreamBufferReset+0x50>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <xStreamBufferSpacesAvailable>:
    1254:	fc 01       	movw	r30, r24
    1256:	24 81       	ldd	r18, Z+4	; 0x04
    1258:	35 81       	ldd	r19, Z+5	; 0x05
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	42 81       	ldd	r20, Z+2	; 0x02
    1260:	53 81       	ldd	r21, Z+3	; 0x03
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	84 1b       	sub	r24, r20
    126a:	95 0b       	sbc	r25, r21
    126c:	82 17       	cp	r24, r18
    126e:	93 07       	cpc	r25, r19
    1270:	10 f0       	brcs	.+4      	; 0x1276 <xStreamBufferSpacesAvailable+0x22>
    1272:	82 1b       	sub	r24, r18
    1274:	93 0b       	sbc	r25, r19
    1276:	08 95       	ret

00001278 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	5b 01       	movw	r10, r22
    1290:	6a 01       	movw	r12, r20
    1292:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1294:	8e 85       	ldd	r24, Y+14	; 0x0e
    1296:	80 ff       	sbrs	r24, 0
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    129a:	8a 01       	movw	r16, r20
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    12a2:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12a4:	ce 01       	movw	r24, r28
    12a6:	d6 df       	rcall	.-84     	; 0x1254 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12a8:	9c 01       	movw	r18, r24
    12aa:	a6 01       	movw	r20, r12
    12ac:	b5 01       	movw	r22, r10
    12ae:	ce 01       	movw	r24, r28
    12b0:	ea de       	rcall	.-556    	; 0x1086 <prvWriteMessageToBuffer>
    12b2:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12b4:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12b6:	b1 f0       	breq	.+44     	; 0x12e4 <xStreamBufferSendFromISR+0x6c>
    12b8:	ce 01       	movw	r24, r28
    12ba:	89 de       	rcall	.-750    	; 0xfce <prvBytesInBuffer>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	82 17       	cp	r24, r18
    12c2:	93 07       	cpc	r25, r19
    12c4:	78 f0       	brcs	.+30     	; 0x12e4 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12c6:	88 85       	ldd	r24, Y+8	; 0x08
    12c8:	99 85       	ldd	r25, Y+9	; 0x09
    12ca:	89 2b       	or	r24, r25
    12cc:	59 f0       	breq	.+22     	; 0x12e4 <xStreamBufferSendFromISR+0x6c>
    12ce:	88 85       	ldd	r24, Y+8	; 0x08
    12d0:	99 85       	ldd	r25, Y+9	; 0x09
    12d2:	00 e0       	ldi	r16, 0x00	; 0
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	ba 01       	movw	r22, r20
    12de:	3e d7       	rcall	.+3708   	; 0x215c <xTaskGenericNotifyFromISR>
    12e0:	19 86       	std	Y+9, r1	; 0x09
    12e2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    12e4:	c6 01       	movw	r24, r12
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	08 95       	ret

000012fc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    12fc:	6f 92       	push	r6
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	1f 92       	push	r1
    131a:	1f 92       	push	r1
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	6c 01       	movw	r12, r24
    1322:	3b 01       	movw	r6, r22
    1324:	4a 01       	movw	r8, r20
    1326:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1328:	fc 01       	movw	r30, r24
    132a:	86 85       	ldd	r24, Z+14	; 0x0e
    132c:	80 fd       	sbrc	r24, 0
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1330:	a1 2c       	mov	r10, r1
    1332:	b1 2c       	mov	r11, r1
    1334:	04 c0       	rjmp	.+8      	; 0x133e <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1336:	68 94       	set
    1338:	aa 24       	eor	r10, r10
    133a:	a1 f8       	bld	r10, 1
    133c:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    133e:	e1 14       	cp	r14, r1
    1340:	f1 04       	cpc	r15, r1
    1342:	29 f1       	breq	.+74     	; 0x138e <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    134a:	c6 01       	movw	r24, r12
    134c:	40 de       	rcall	.-896    	; 0xfce <prvBytesInBuffer>
    134e:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1350:	a8 16       	cp	r10, r24
    1352:	b9 06       	cpc	r11, r25
    1354:	38 f0       	brcs	.+14     	; 0x1364 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    135a:	90 d7       	rcall	.+3872   	; 0x227c <xTaskNotifyStateClear>
    135c:	d7 d4       	rcall	.+2478   	; 0x1d0c <xTaskGetCurrentTaskHandle>
    135e:	f6 01       	movw	r30, r12
    1360:	91 87       	std	Z+9, r25	; 0x09
    1362:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1368:	a0 16       	cp	r10, r16
    136a:	b1 06       	cpc	r11, r17
    136c:	b0 f0       	brcs	.+44     	; 0x139a <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	a9 01       	movw	r20, r18
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	cb 01       	movw	r24, r22
    137e:	ed d5       	rcall	.+3034   	; 0x1f5a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1380:	f6 01       	movw	r30, r12
    1382:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1384:	10 86       	std	Z+8, r1	; 0x08
    1386:	c6 01       	movw	r24, r12
    1388:	22 de       	rcall	.-956    	; 0xfce <prvBytesInBuffer>
    138a:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <xStreamBufferReceive+0x98>
    138e:	c6 01       	movw	r24, r12
    1390:	1e de       	rcall	.-964    	; 0xfce <prvBytesInBuffer>
    1392:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1394:	a0 16       	cp	r10, r16
    1396:	b1 06       	cpc	r11, r17
    1398:	b8 f5       	brcc	.+110    	; 0x1408 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    139a:	a1 14       	cp	r10, r1
    139c:	b1 04       	cpc	r11, r1
    139e:	c1 f0       	breq	.+48     	; 0x13d0 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    13a0:	f6 01       	movw	r30, r12
    13a2:	e0 80       	ld	r14, Z
    13a4:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    13a6:	98 01       	movw	r18, r16
    13a8:	a5 01       	movw	r20, r10
    13aa:	be 01       	movw	r22, r28
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	c6 01       	movw	r24, r12
    13b2:	a9 de       	rcall	.-686    	; 0x1106 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    13b8:	0a 19       	sub	r16, r10
    13ba:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    13bc:	88 16       	cp	r8, r24
    13be:	99 06       	cpc	r9, r25
    13c0:	30 f4       	brcc	.+12     	; 0x13ce <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    13c2:	f6 01       	movw	r30, r12
    13c4:	f1 82       	std	Z+1, r15	; 0x01
    13c6:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    13c8:	81 2c       	mov	r8, r1
    13ca:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    13ce:	4c 01       	movw	r8, r24
    13d0:	98 01       	movw	r18, r16
    13d2:	a4 01       	movw	r20, r8
    13d4:	b3 01       	movw	r22, r6
    13d6:	c6 01       	movw	r24, r12
    13d8:	96 de       	rcall	.-724    	; 0x1106 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    13da:	7c 01       	movw	r14, r24
    13dc:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    13de:	b1 f0       	breq	.+44     	; 0x140c <xStreamBufferReceive+0x110>
    13e0:	eb d1       	rcall	.+982    	; 0x17b8 <vTaskSuspendAll>
    13e2:	f6 01       	movw	r30, r12
    13e4:	82 85       	ldd	r24, Z+10	; 0x0a
    13e6:	93 85       	ldd	r25, Z+11	; 0x0b
    13e8:	89 2b       	or	r24, r25
    13ea:	61 f0       	breq	.+24     	; 0x1404 <xStreamBufferReceive+0x108>
    13ec:	82 85       	ldd	r24, Z+10	; 0x0a
    13ee:	93 85       	ldd	r25, Z+11	; 0x0b
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	ba 01       	movw	r22, r20
    13fc:	31 d6       	rcall	.+3170   	; 0x2060 <xTaskGenericNotify>
    13fe:	f6 01       	movw	r30, r12
    1400:	13 86       	std	Z+11, r1	; 0x0b
    1402:	12 86       	std	Z+10, r1	; 0x0a
    1404:	a3 d2       	rcall	.+1350   	; 0x194c <xTaskResumeAll>
    1406:	02 c0       	rjmp	.+4      	; 0x140c <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1408:	e1 2c       	mov	r14, r1
    140a:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    140c:	c7 01       	movw	r24, r14
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	7f 90       	pop	r7
    142c:	6f 90       	pop	r6
    142e:	08 95       	ret

00001430 <prvResetNextTaskUnblockTime>:
    1430:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1434:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1438:	80 81       	ld	r24, Z
    143a:	81 11       	cpse	r24, r1
    143c:	07 c0       	rjmp	.+14     	; 0x144c <prvResetNextTaskUnblockTime+0x1c>
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xNextTaskUnblockTime+0x1>
    1446:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNextTaskUnblockTime>
    144a:	08 95       	ret
    144c:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1450:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1454:	05 80       	ldd	r0, Z+5	; 0x05
    1456:	f6 81       	ldd	r31, Z+6	; 0x06
    1458:	e0 2d       	mov	r30, r0
    145a:	06 80       	ldd	r0, Z+6	; 0x06
    145c:	f7 81       	ldd	r31, Z+7	; 0x07
    145e:	e0 2d       	mov	r30, r0
    1460:	82 81       	ldd	r24, Z+2	; 0x02
    1462:	93 81       	ldd	r25, Z+3	; 0x03
    1464:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xNextTaskUnblockTime+0x1>
    1468:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNextTaskUnblockTime>
    146c:	08 95       	ret

0000146e <prvAddCurrentTaskToDelayedList>:
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	ec 01       	movw	r28, r24
    147a:	f6 2e       	mov	r15, r22
    147c:	00 91 7f 07 	lds	r16, 0x077F	; 0x80077f <xTickCount>
    1480:	10 91 80 07 	lds	r17, 0x0780	; 0x800780 <xTickCount+0x1>
    1484:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1488:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    148c:	02 96       	adiw	r24, 0x02	; 2
    148e:	7c d8       	rcall	.-3848   	; 0x588 <uxListRemove>
    1490:	cf 3f       	cpi	r28, 0xFF	; 255
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	d8 07       	cpc	r29, r24
    1496:	61 f4       	brne	.+24     	; 0x14b0 <prvAddCurrentTaskToDelayedList+0x42>
    1498:	ff 20       	and	r15, r15
    149a:	51 f0       	breq	.+20     	; 0x14b0 <prvAddCurrentTaskToDelayedList+0x42>
    149c:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    14a0:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    14a4:	6e 5f       	subi	r22, 0xFE	; 254
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	82 e8       	ldi	r24, 0x82	; 130
    14aa:	97 e0       	ldi	r25, 0x07	; 7
    14ac:	1b d8       	rcall	.-4042   	; 0x4e4 <vListInsertEnd>
    14ae:	2d c0       	rjmp	.+90     	; 0x150a <prvAddCurrentTaskToDelayedList+0x9c>
    14b0:	c0 0f       	add	r28, r16
    14b2:	d1 1f       	adc	r29, r17
    14b4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    14b8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    14bc:	d3 83       	std	Z+3, r29	; 0x03
    14be:	c2 83       	std	Z+2, r28	; 0x02
    14c0:	c0 17       	cp	r28, r16
    14c2:	d1 07       	cpc	r29, r17
    14c4:	60 f4       	brcc	.+24     	; 0x14de <prvAddCurrentTaskToDelayedList+0x70>
    14c6:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    14ca:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    14ce:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    14d2:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    14d6:	6e 5f       	subi	r22, 0xFE	; 254
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	25 d8       	rcall	.-4022   	; 0x526 <vListInsert>
    14dc:	16 c0       	rjmp	.+44     	; 0x150a <prvAddCurrentTaskToDelayedList+0x9c>
    14de:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    14e2:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    14e6:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    14ea:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    14ee:	6e 5f       	subi	r22, 0xFE	; 254
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	19 d8       	rcall	.-4046   	; 0x526 <vListInsert>
    14f4:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xNextTaskUnblockTime>
    14f8:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <xNextTaskUnblockTime+0x1>
    14fc:	c8 17       	cp	r28, r24
    14fe:	d9 07       	cpc	r29, r25
    1500:	20 f4       	brcc	.+8      	; 0x150a <prvAddCurrentTaskToDelayedList+0x9c>
    1502:	d0 93 78 07 	sts	0x0778, r29	; 0x800778 <xNextTaskUnblockTime+0x1>
    1506:	c0 93 77 07 	sts	0x0777, r28	; 0x800777 <xNextTaskUnblockTime>
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	08 95       	ret

00001516 <xTaskCreate>:
    1516:	4f 92       	push	r4
    1518:	5f 92       	push	r5
    151a:	6f 92       	push	r6
    151c:	7f 92       	push	r7
    151e:	8f 92       	push	r8
    1520:	9f 92       	push	r9
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	4c 01       	movw	r8, r24
    1536:	6b 01       	movw	r12, r22
    1538:	5a 01       	movw	r10, r20
    153a:	29 01       	movw	r4, r18
    153c:	ca 01       	movw	r24, r20
    153e:	0e 94 3e 02 	call	0x47c	; 0x47c <pvPortMalloc>
    1542:	3c 01       	movw	r6, r24
    1544:	89 2b       	or	r24, r25
    1546:	09 f4       	brne	.+2      	; 0x154a <xTaskCreate+0x34>
    1548:	f3 c0       	rjmp	.+486    	; 0x1730 <xTaskCreate+0x21a>
    154a:	8c e2       	ldi	r24, 0x2C	; 44
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 3e 02 	call	0x47c	; 0x47c <pvPortMalloc>
    1552:	ec 01       	movw	r28, r24
    1554:	89 2b       	or	r24, r25
    1556:	99 f0       	breq	.+38     	; 0x157e <xTaskCreate+0x68>
    1558:	78 8e       	std	Y+24, r7	; 0x18
    155a:	6f 8a       	std	Y+23, r6	; 0x17
    155c:	a5 01       	movw	r20, r10
    155e:	65 ea       	ldi	r22, 0xA5	; 165
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	c3 01       	movw	r24, r6
    1564:	0e 94 e7 25 	call	0x4bce	; 0x4bce <memset>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	a8 1a       	sub	r10, r24
    156c:	b1 08       	sbc	r11, r1
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	98 8d       	ldd	r25, Y+24	; 0x18
    1572:	a8 0e       	add	r10, r24
    1574:	b9 1e       	adc	r11, r25
    1576:	c1 14       	cp	r12, r1
    1578:	d1 04       	cpc	r13, r1
    157a:	29 f4       	brne	.+10     	; 0x1586 <xTaskCreate+0x70>
    157c:	20 c0       	rjmp	.+64     	; 0x15be <xTaskCreate+0xa8>
    157e:	c3 01       	movw	r24, r6
    1580:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vPortFree>
    1584:	d5 c0       	rjmp	.+426    	; 0x1730 <xTaskCreate+0x21a>
    1586:	d6 01       	movw	r26, r12
    1588:	8c 91       	ld	r24, X
    158a:	89 8f       	std	Y+25, r24	; 0x19
    158c:	8c 91       	ld	r24, X
    158e:	88 23       	and	r24, r24
    1590:	a1 f0       	breq	.+40     	; 0x15ba <xTaskCreate+0xa4>
    1592:	ae 01       	movw	r20, r28
    1594:	46 5e       	subi	r20, 0xE6	; 230
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	f6 01       	movw	r30, r12
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	b8 e0       	ldi	r27, 0x08	; 8
    159e:	cb 0e       	add	r12, r27
    15a0:	d1 1c       	adc	r13, r1
    15a2:	cf 01       	movw	r24, r30
    15a4:	21 91       	ld	r18, Z+
    15a6:	da 01       	movw	r26, r20
    15a8:	2d 93       	st	X+, r18
    15aa:	ad 01       	movw	r20, r26
    15ac:	dc 01       	movw	r26, r24
    15ae:	8c 91       	ld	r24, X
    15b0:	88 23       	and	r24, r24
    15b2:	19 f0       	breq	.+6      	; 0x15ba <xTaskCreate+0xa4>
    15b4:	ec 15       	cp	r30, r12
    15b6:	fd 05       	cpc	r31, r13
    15b8:	a1 f7       	brne	.-24     	; 0x15a2 <xTaskCreate+0x8c>
    15ba:	18 a2       	std	Y+32, r1	; 0x20
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <xTaskCreate+0xaa>
    15be:	19 8e       	std	Y+25, r1	; 0x19
    15c0:	04 30       	cpi	r16, 0x04	; 4
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <xTaskCreate+0xb0>
    15c4:	03 e0       	ldi	r16, 0x03	; 3
    15c6:	0e 8b       	std	Y+22, r16	; 0x16
    15c8:	0b a3       	std	Y+35, r16	; 0x23
    15ca:	1c a2       	std	Y+36, r1	; 0x24
    15cc:	6e 01       	movw	r12, r28
    15ce:	b2 e0       	ldi	r27, 0x02	; 2
    15d0:	cb 0e       	add	r12, r27
    15d2:	d1 1c       	adc	r13, r1
    15d4:	c6 01       	movw	r24, r12
    15d6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vListInitialiseItem>
    15da:	ce 01       	movw	r24, r28
    15dc:	0c 96       	adiw	r24, 0x0c	; 12
    15de:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vListInitialiseItem>
    15e2:	d9 87       	std	Y+9, r29	; 0x09
    15e4:	c8 87       	std	Y+8, r28	; 0x08
    15e6:	84 e0       	ldi	r24, 0x04	; 4
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	80 1b       	sub	r24, r16
    15ec:	91 09       	sbc	r25, r1
    15ee:	9d 87       	std	Y+13, r25	; 0x0d
    15f0:	8c 87       	std	Y+12, r24	; 0x0c
    15f2:	db 8b       	std	Y+19, r29	; 0x13
    15f4:	ca 8b       	std	Y+18, r28	; 0x12
    15f6:	1e a2       	std	Y+38, r1	; 0x26
    15f8:	1d a2       	std	Y+37, r1	; 0x25
    15fa:	1f a2       	std	Y+39, r1	; 0x27
    15fc:	18 a6       	std	Y+40, r1	; 0x28
    15fe:	19 a6       	std	Y+41, r1	; 0x29
    1600:	1a a6       	std	Y+42, r1	; 0x2a
    1602:	1b a6       	std	Y+43, r1	; 0x2b
    1604:	a2 01       	movw	r20, r4
    1606:	b4 01       	movw	r22, r8
    1608:	c5 01       	movw	r24, r10
    160a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <pxPortInitialiseStack>
    160e:	99 83       	std	Y+1, r25	; 0x01
    1610:	88 83       	st	Y, r24
    1612:	e1 14       	cp	r14, r1
    1614:	f1 04       	cpc	r15, r1
    1616:	19 f0       	breq	.+6      	; 0x161e <xTaskCreate+0x108>
    1618:	f7 01       	movw	r30, r14
    161a:	d1 83       	std	Z+1, r29	; 0x01
    161c:	c0 83       	st	Z, r28
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	0f 92       	push	r0
    1624:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxCurrentNumberOfTasks>
    162e:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1632:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1636:	89 2b       	or	r24, r25
    1638:	d1 f5       	brne	.+116    	; 0x16ae <xTaskCreate+0x198>
    163a:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    163e:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
    1642:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <xTaskCreate+0x136>
    164a:	41 c0       	rjmp	.+130    	; 0x16ce <xTaskCreate+0x1b8>
    164c:	84 eb       	ldi	r24, 0xB4	; 180
    164e:	97 e0       	ldi	r25, 0x07	; 7
    1650:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    1654:	8d eb       	ldi	r24, 0xBD	; 189
    1656:	97 e0       	ldi	r25, 0x07	; 7
    1658:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    165c:	86 ec       	ldi	r24, 0xC6	; 198
    165e:	97 e0       	ldi	r25, 0x07	; 7
    1660:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    1664:	8f ec       	ldi	r24, 0xCF	; 207
    1666:	97 e0       	ldi	r25, 0x07	; 7
    1668:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    166c:	8b ea       	ldi	r24, 0xAB	; 171
    166e:	97 e0       	ldi	r25, 0x07	; 7
    1670:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    1674:	82 ea       	ldi	r24, 0xA2	; 162
    1676:	97 e0       	ldi	r25, 0x07	; 7
    1678:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    167c:	85 e9       	ldi	r24, 0x95	; 149
    167e:	97 e0       	ldi	r25, 0x07	; 7
    1680:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    1684:	8c e8       	ldi	r24, 0x8C	; 140
    1686:	97 e0       	ldi	r25, 0x07	; 7
    1688:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    168c:	82 e8       	ldi	r24, 0x82	; 130
    168e:	97 e0       	ldi	r25, 0x07	; 7
    1690:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    1694:	8b ea       	ldi	r24, 0xAB	; 171
    1696:	97 e0       	ldi	r25, 0x07	; 7
    1698:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxDelayedTaskList+0x1>
    169c:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxDelayedTaskList>
    16a0:	82 ea       	ldi	r24, 0xA2	; 162
    16a2:	97 e0       	ldi	r25, 0x07	; 7
    16a4:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    16a8:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    16ac:	10 c0       	rjmp	.+32     	; 0x16ce <xTaskCreate+0x1b8>
    16ae:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xSchedulerRunning>
    16b2:	81 11       	cpse	r24, r1
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <xTaskCreate+0x1b8>
    16b6:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    16ba:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    16be:	96 89       	ldd	r25, Z+22	; 0x16
    16c0:	8e 89       	ldd	r24, Y+22	; 0x16
    16c2:	89 17       	cp	r24, r25
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <xTaskCreate+0x1b8>
    16c6:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
    16ca:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
    16ce:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxTaskNumber>
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uxTaskNumber>
    16d8:	89 a3       	std	Y+33, r24	; 0x21
    16da:	8e 89       	ldd	r24, Y+22	; 0x16
    16dc:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    16e0:	98 17       	cp	r25, r24
    16e2:	10 f4       	brcc	.+4      	; 0x16e8 <xTaskCreate+0x1d2>
    16e4:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9c 01       	movw	r18, r24
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	82 0f       	add	r24, r18
    16fa:	93 1f       	adc	r25, r19
    16fc:	b6 01       	movw	r22, r12
    16fe:	8c 54       	subi	r24, 0x4C	; 76
    1700:	98 4f       	sbci	r25, 0xF8	; 248
    1702:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xSchedulerRunning>
    170e:	88 23       	and	r24, r24
    1710:	59 f0       	breq	.+22     	; 0x1728 <xTaskCreate+0x212>
    1712:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1716:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    171a:	96 89       	ldd	r25, Z+22	; 0x16
    171c:	8e 89       	ldd	r24, Y+22	; 0x16
    171e:	98 17       	cp	r25, r24
    1720:	28 f4       	brcc	.+10     	; 0x172c <xTaskCreate+0x216>
    1722:	07 d8       	rcall	.-4082   	; 0x732 <vPortYield>
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <xTaskCreate+0x21c>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <xTaskCreate+0x21c>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <xTaskCreate+0x21c>
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	af 90       	pop	r10
    1744:	9f 90       	pop	r9
    1746:	8f 90       	pop	r8
    1748:	7f 90       	pop	r7
    174a:	6f 90       	pop	r6
    174c:	5f 90       	pop	r5
    174e:	4f 90       	pop	r4
    1750:	08 95       	ret

00001752 <vTaskStartScheduler>:
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	0f 2e       	mov	r0, r31
    175a:	f5 e7       	ldi	r31, 0x75	; 117
    175c:	ef 2e       	mov	r14, r31
    175e:	f7 e0       	ldi	r31, 0x07	; 7
    1760:	ff 2e       	mov	r15, r31
    1762:	f0 2d       	mov	r31, r0
    1764:	00 e0       	ldi	r16, 0x00	; 0
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 ec       	ldi	r20, 0xC0	; 192
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	6e e6       	ldi	r22, 0x6E	; 110
    1770:	72 e0       	ldi	r23, 0x02	; 2
    1772:	8d ec       	ldi	r24, 0xCD	; 205
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	cf de       	rcall	.-610    	; 0x1516 <xTaskCreate>
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	d1 f4       	brne	.+52     	; 0x17b0 <vTaskStartScheduler+0x5e>
    177c:	eb d5       	rcall	.+3030   	; 0x2354 <xTimerCreateTimerTask>
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	b9 f4       	brne	.+46     	; 0x17b0 <vTaskStartScheduler+0x5e>
    1782:	f8 94       	cli
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	9f ef       	ldi	r25, 0xFF	; 255
    1788:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xNextTaskUnblockTime+0x1>
    178c:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNextTaskUnblockTime>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <xSchedulerRunning>
    1796:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <xTickCount+0x1>
    179a:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <xTickCount>
    179e:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    17a2:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    17a6:	85 a1       	ldd	r24, Z+37	; 0x25
    17a8:	0e 94 2e 02 	call	0x45c	; 0x45c <task_switch_in>
    17ac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <xPortStartScheduler>
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	08 95       	ret

000017b8 <vTaskSuspendAll>:
    17b8:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <__data_end>
    17c2:	08 95       	ret

000017c4 <xTaskGetTickCount>:
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <xTickCount>
    17ce:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <xTickCount+0x1>
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	08 95       	ret

000017d8 <xTaskIncrementTick>:
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    17ec:	81 11       	cpse	r24, r1
    17ee:	98 c0       	rjmp	.+304    	; 0x1920 <xTaskIncrementTick+0x148>
    17f0:	e0 90 7f 07 	lds	r14, 0x077F	; 0x80077f <xTickCount>
    17f4:	f0 90 80 07 	lds	r15, 0x0780	; 0x800780 <xTickCount+0x1>
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	e8 1a       	sub	r14, r24
    17fc:	f8 0a       	sbc	r15, r24
    17fe:	f0 92 80 07 	sts	0x0780, r15	; 0x800780 <xTickCount+0x1>
    1802:	e0 92 7f 07 	sts	0x077F, r14	; 0x80077f <xTickCount>
    1806:	e1 14       	cp	r14, r1
    1808:	f1 04       	cpc	r15, r1
    180a:	b1 f4       	brne	.+44     	; 0x1838 <xTaskIncrementTick+0x60>
    180c:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1810:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1814:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    1818:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    181c:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <pxDelayedTaskList+0x1>
    1820:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <pxDelayedTaskList>
    1824:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    1828:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    182c:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xNumOfOverflows>
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xNumOfOverflows>
    1836:	fc dd       	rcall	.-1032   	; 0x1430 <prvResetNextTaskUnblockTime>
    1838:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xNextTaskUnblockTime>
    183c:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <xNextTaskUnblockTime+0x1>
    1840:	e8 16       	cp	r14, r24
    1842:	f9 06       	cpc	r15, r25
    1844:	10 f4       	brcc	.+4      	; 0x184a <xTaskIncrementTick+0x72>
    1846:	d1 2c       	mov	r13, r1
    1848:	53 c0       	rjmp	.+166    	; 0x18f0 <xTaskIncrementTick+0x118>
    184a:	d1 2c       	mov	r13, r1
    184c:	cc 24       	eor	r12, r12
    184e:	c3 94       	inc	r12
    1850:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1854:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1858:	80 81       	ld	r24, Z
    185a:	81 11       	cpse	r24, r1
    185c:	07 c0       	rjmp	.+14     	; 0x186c <xTaskIncrementTick+0x94>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xNextTaskUnblockTime+0x1>
    1866:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNextTaskUnblockTime>
    186a:	42 c0       	rjmp	.+132    	; 0x18f0 <xTaskIncrementTick+0x118>
    186c:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1870:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1874:	05 80       	ldd	r0, Z+5	; 0x05
    1876:	f6 81       	ldd	r31, Z+6	; 0x06
    1878:	e0 2d       	mov	r30, r0
    187a:	c6 81       	ldd	r28, Z+6	; 0x06
    187c:	d7 81       	ldd	r29, Z+7	; 0x07
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	e8 16       	cp	r14, r24
    1884:	f9 06       	cpc	r15, r25
    1886:	28 f4       	brcc	.+10     	; 0x1892 <xTaskIncrementTick+0xba>
    1888:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <xNextTaskUnblockTime+0x1>
    188c:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNextTaskUnblockTime>
    1890:	2f c0       	rjmp	.+94     	; 0x18f0 <xTaskIncrementTick+0x118>
    1892:	8e 01       	movw	r16, r28
    1894:	0e 5f       	subi	r16, 0xFE	; 254
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    189e:	8c 89       	ldd	r24, Y+20	; 0x14
    18a0:	9d 89       	ldd	r25, Y+21	; 0x15
    18a2:	89 2b       	or	r24, r25
    18a4:	21 f0       	breq	.+8      	; 0x18ae <xTaskIncrementTick+0xd6>
    18a6:	ce 01       	movw	r24, r28
    18a8:	0c 96       	adiw	r24, 0x0c	; 12
    18aa:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    18ae:	8e 89       	ldd	r24, Y+22	; 0x16
    18b0:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    18b4:	98 17       	cp	r25, r24
    18b6:	10 f4       	brcc	.+4      	; 0x18bc <xTaskIncrementTick+0xe4>
    18b8:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9c 01       	movw	r18, r24
    18c0:	22 0f       	add	r18, r18
    18c2:	33 1f       	adc	r19, r19
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	b8 01       	movw	r22, r16
    18d2:	8c 54       	subi	r24, 0x4C	; 76
    18d4:	98 4f       	sbci	r25, 0xF8	; 248
    18d6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    18da:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    18de:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    18e2:	9e 89       	ldd	r25, Y+22	; 0x16
    18e4:	86 89       	ldd	r24, Z+22	; 0x16
    18e6:	98 17       	cp	r25, r24
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <xTaskIncrementTick+0x114>
    18ea:	b2 cf       	rjmp	.-156    	; 0x1850 <xTaskIncrementTick+0x78>
    18ec:	dc 2c       	mov	r13, r12
    18ee:	b0 cf       	rjmp	.-160    	; 0x1850 <xTaskIncrementTick+0x78>
    18f0:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    18f4:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    18f8:	86 89       	ldd	r24, Z+22	; 0x16
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	fc 01       	movw	r30, r24
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	fc 01       	movw	r30, r24
    1910:	ec 54       	subi	r30, 0x4C	; 76
    1912:	f8 4f       	sbci	r31, 0xF8	; 248
    1914:	80 81       	ld	r24, Z
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	48 f0       	brcs	.+18     	; 0x192c <xTaskIncrementTick+0x154>
    191a:	dd 24       	eor	r13, r13
    191c:	d3 94       	inc	r13
    191e:	06 c0       	rjmp	.+12     	; 0x192c <xTaskIncrementTick+0x154>
    1920:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uxPendedTicks>
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <uxPendedTicks>
    192a:	d1 2c       	mov	r13, r1
    192c:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <xYieldPending>
    1930:	88 23       	and	r24, r24
    1932:	11 f0       	breq	.+4      	; 0x1938 <xTaskIncrementTick+0x160>
    1934:	dd 24       	eor	r13, r13
    1936:	d3 94       	inc	r13
    1938:	8d 2d       	mov	r24, r13
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	08 95       	ret

0000194c <xTaskResumeAll>:
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	0f 92       	push	r0
    1960:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    1964:	81 50       	subi	r24, 0x01	; 1
    1966:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <__data_end>
    196a:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    196e:	81 11       	cpse	r24, r1
    1970:	5d c0       	rjmp	.+186    	; 0x1a2c <xTaskResumeAll+0xe0>
    1972:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
    1976:	81 11       	cpse	r24, r1
    1978:	33 c0       	rjmp	.+102    	; 0x19e0 <xTaskResumeAll+0x94>
    197a:	5b c0       	rjmp	.+182    	; 0x1a32 <xTaskResumeAll+0xe6>
    197c:	d7 01       	movw	r26, r14
    197e:	15 96       	adiw	r26, 0x05	; 5
    1980:	ed 91       	ld	r30, X+
    1982:	fc 91       	ld	r31, X
    1984:	16 97       	sbiw	r26, 0x06	; 6
    1986:	c6 81       	ldd	r28, Z+6	; 0x06
    1988:	d7 81       	ldd	r29, Z+7	; 0x07
    198a:	ce 01       	movw	r24, r28
    198c:	0c 96       	adiw	r24, 0x0c	; 12
    198e:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1992:	8e 01       	movw	r16, r28
    1994:	0e 5f       	subi	r16, 0xFE	; 254
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	c8 01       	movw	r24, r16
    199a:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    199e:	8e 89       	ldd	r24, Y+22	; 0x16
    19a0:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    19a4:	98 17       	cp	r25, r24
    19a6:	10 f4       	brcc	.+4      	; 0x19ac <xTaskResumeAll+0x60>
    19a8:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 01       	movw	r18, r24
    19b0:	22 0f       	add	r18, r18
    19b2:	33 1f       	adc	r19, r19
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	b8 01       	movw	r22, r16
    19c2:	8c 54       	subi	r24, 0x4C	; 76
    19c4:	98 4f       	sbci	r25, 0xF8	; 248
    19c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    19ca:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    19ce:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    19d2:	9e 89       	ldd	r25, Y+22	; 0x16
    19d4:	86 89       	ldd	r24, Z+22	; 0x16
    19d6:	98 17       	cp	r25, r24
    19d8:	68 f0       	brcs	.+26     	; 0x19f4 <xTaskResumeAll+0xa8>
    19da:	d0 92 7b 07 	sts	0x077B, r13	; 0x80077b <xYieldPending>
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <xTaskResumeAll+0xa8>
    19e0:	c0 e0       	ldi	r28, 0x00	; 0
    19e2:	d0 e0       	ldi	r29, 0x00	; 0
    19e4:	0f 2e       	mov	r0, r31
    19e6:	f5 e9       	ldi	r31, 0x95	; 149
    19e8:	ef 2e       	mov	r14, r31
    19ea:	f7 e0       	ldi	r31, 0x07	; 7
    19ec:	ff 2e       	mov	r15, r31
    19ee:	f0 2d       	mov	r31, r0
    19f0:	dd 24       	eor	r13, r13
    19f2:	d3 94       	inc	r13
    19f4:	f7 01       	movw	r30, r14
    19f6:	80 81       	ld	r24, Z
    19f8:	81 11       	cpse	r24, r1
    19fa:	c0 cf       	rjmp	.-128    	; 0x197c <xTaskResumeAll+0x30>
    19fc:	cd 2b       	or	r28, r29
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <xTaskResumeAll+0xb6>
    1a00:	17 dd       	rcall	.-1490   	; 0x1430 <prvResetNextTaskUnblockTime>
    1a02:	c0 91 7c 07 	lds	r28, 0x077C	; 0x80077c <uxPendedTicks>
    1a06:	cc 23       	and	r28, r28
    1a08:	49 f0       	breq	.+18     	; 0x1a1c <xTaskResumeAll+0xd0>
    1a0a:	d1 e0       	ldi	r29, 0x01	; 1
    1a0c:	e5 de       	rcall	.-566    	; 0x17d8 <xTaskIncrementTick>
    1a0e:	81 11       	cpse	r24, r1
    1a10:	d0 93 7b 07 	sts	0x077B, r29	; 0x80077b <xYieldPending>
    1a14:	c1 50       	subi	r28, 0x01	; 1
    1a16:	d1 f7       	brne	.-12     	; 0x1a0c <xTaskResumeAll+0xc0>
    1a18:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <uxPendedTicks>
    1a1c:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <xYieldPending>
    1a20:	88 23       	and	r24, r24
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <xTaskResumeAll+0xe4>
    1a24:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <xTaskResumeAll+0xe6>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <xTaskResumeAll+0xe6>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	08 95       	ret

00001a46 <vTaskDelay>:
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
    1a4c:	89 2b       	or	r24, r25
    1a4e:	39 f0       	breq	.+14     	; 0x1a5e <vTaskDelay+0x18>
    1a50:	b3 de       	rcall	.-666    	; 0x17b8 <vTaskSuspendAll>
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	ce 01       	movw	r24, r28
    1a56:	0b dd       	rcall	.-1514   	; 0x146e <prvAddCurrentTaskToDelayedList>
    1a58:	79 df       	rcall	.-270    	; 0x194c <xTaskResumeAll>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vTaskDelay+0x1c>
    1a5e:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <vTaskSetApplicationTaskTag>:
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <vTaskSetApplicationTaskTag+0xc>
    1a6c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1a70:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	0f 92       	push	r0
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	76 a3       	std	Z+38, r23	; 0x26
    1a7e:	65 a3       	std	Z+37, r22	; 0x25
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	08 95       	ret

00001a86 <vTaskSwitchContext>:
    1a86:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    1a8a:	88 23       	and	r24, r24
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <vTaskSwitchContext+0x10>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xYieldPending>
    1a94:	08 95       	ret
    1a96:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <xYieldPending>
    1a9a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1a9e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1aa2:	85 a1       	ldd	r24, Z+37	; 0x25
    1aa4:	0e 94 38 02 	call	0x470	; 0x470 <task_switch_out>
    1aa8:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1aac:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1ab0:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1ab4:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1ab8:	2d 91       	ld	r18, X+
    1aba:	3c 91       	ld	r19, X
    1abc:	87 89       	ldd	r24, Z+23	; 0x17
    1abe:	90 8d       	ldd	r25, Z+24	; 0x18
    1ac0:	82 17       	cp	r24, r18
    1ac2:	93 07       	cpc	r25, r19
    1ac4:	58 f0       	brcs	.+22     	; 0x1adc <vTaskSwitchContext+0x56>
    1ac6:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1aca:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1ace:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1ad2:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1ad6:	67 5e       	subi	r22, 0xE7	; 231
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	1f d5       	rcall	.+2622   	; 0x251a <vApplicationStackOverflowHook>
    1adc:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uxTopReadyPriority>
    1ae0:	82 2f       	mov	r24, r18
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	ee 0f       	add	r30, r30
    1aec:	ff 1f       	adc	r31, r31
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	e8 0f       	add	r30, r24
    1af4:	f9 1f       	adc	r31, r25
    1af6:	ec 54       	subi	r30, 0x4C	; 76
    1af8:	f8 4f       	sbci	r31, 0xF8	; 248
    1afa:	30 81       	ld	r19, Z
    1afc:	31 11       	cpse	r19, r1
    1afe:	11 c0       	rjmp	.+34     	; 0x1b22 <vTaskSwitchContext+0x9c>
    1b00:	21 50       	subi	r18, 0x01	; 1
    1b02:	82 2f       	mov	r24, r18
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	fc 01       	movw	r30, r24
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	e8 0f       	add	r30, r24
    1b16:	f9 1f       	adc	r31, r25
    1b18:	ec 54       	subi	r30, 0x4C	; 76
    1b1a:	f8 4f       	sbci	r31, 0xF8	; 248
    1b1c:	30 81       	ld	r19, Z
    1b1e:	33 23       	and	r19, r19
    1b20:	79 f3       	breq	.-34     	; 0x1b00 <vTaskSwitchContext+0x7a>
    1b22:	ac 01       	movw	r20, r24
    1b24:	44 0f       	add	r20, r20
    1b26:	55 1f       	adc	r21, r21
    1b28:	44 0f       	add	r20, r20
    1b2a:	55 1f       	adc	r21, r21
    1b2c:	44 0f       	add	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	48 0f       	add	r20, r24
    1b32:	59 1f       	adc	r21, r25
    1b34:	da 01       	movw	r26, r20
    1b36:	ac 54       	subi	r26, 0x4C	; 76
    1b38:	b8 4f       	sbci	r27, 0xF8	; 248
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	ed 91       	ld	r30, X+
    1b3e:	fc 91       	ld	r31, X
    1b40:	12 97       	sbiw	r26, 0x02	; 2
    1b42:	02 80       	ldd	r0, Z+2	; 0x02
    1b44:	f3 81       	ldd	r31, Z+3	; 0x03
    1b46:	e0 2d       	mov	r30, r0
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	fc 93       	st	X, r31
    1b4c:	ee 93       	st	-X, r30
    1b4e:	11 97       	sbiw	r26, 0x01	; 1
    1b50:	49 54       	subi	r20, 0x49	; 73
    1b52:	58 4f       	sbci	r21, 0xF8	; 248
    1b54:	e4 17       	cp	r30, r20
    1b56:	f5 07       	cpc	r31, r21
    1b58:	29 f4       	brne	.+10     	; 0x1b64 <vTaskSwitchContext+0xde>
    1b5a:	42 81       	ldd	r20, Z+2	; 0x02
    1b5c:	53 81       	ldd	r21, Z+3	; 0x03
    1b5e:	fd 01       	movw	r30, r26
    1b60:	52 83       	std	Z+2, r21	; 0x02
    1b62:	41 83       	std	Z+1, r20	; 0x01
    1b64:	fc 01       	movw	r30, r24
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	8e 0f       	add	r24, r30
    1b74:	9f 1f       	adc	r25, r31
    1b76:	fc 01       	movw	r30, r24
    1b78:	ec 54       	subi	r30, 0x4C	; 76
    1b7a:	f8 4f       	sbci	r31, 0xF8	; 248
    1b7c:	01 80       	ldd	r0, Z+1	; 0x01
    1b7e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b80:	e0 2d       	mov	r30, r0
    1b82:	86 81       	ldd	r24, Z+6	; 0x06
    1b84:	97 81       	ldd	r25, Z+7	; 0x07
    1b86:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxCurrentTCB+0x1>
    1b8a:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxCurrentTCB>
    1b8e:	20 93 7e 07 	sts	0x077E, r18	; 0x80077e <uxTopReadyPriority>
    1b92:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b96:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b9a:	85 a1       	ldd	r24, Z+37	; 0x25
    1b9c:	0c 94 2e 02 	jmp	0x45c	; 0x45c <task_switch_in>
    1ba0:	08 95       	ret

00001ba2 <vTaskPlaceOnEventList>:
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	eb 01       	movw	r28, r22
    1ba8:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1bac:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1bb0:	64 5f       	subi	r22, 0xF4	; 244
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	0e 94 93 02 	call	0x526	; 0x526 <vListInsert>
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	ce 01       	movw	r24, r28
    1bbc:	58 dc       	rcall	.-1872   	; 0x146e <prvAddCurrentTaskToDelayedList>
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <vTaskPlaceOnEventListRestricted>:
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	8b 01       	movw	r16, r22
    1bcc:	c4 2f       	mov	r28, r20
    1bce:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1bd2:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1bd6:	64 5f       	subi	r22, 0xF4	; 244
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1bde:	cc 23       	and	r28, r28
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <vTaskPlaceOnEventListRestricted+0x22>
    1be2:	0f ef       	ldi	r16, 0xFF	; 255
    1be4:	1f ef       	ldi	r17, 0xFF	; 255
    1be6:	6c 2f       	mov	r22, r28
    1be8:	c8 01       	movw	r24, r16
    1bea:	41 dc       	rcall	.-1918   	; 0x146e <prvAddCurrentTaskToDelayedList>
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	08 95       	ret

00001bf4 <xTaskRemoveFromEventList>:
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	15 96       	adiw	r26, 0x05	; 5
    1c00:	ed 91       	ld	r30, X+
    1c02:	fc 91       	ld	r31, X
    1c04:	16 97       	sbiw	r26, 0x06	; 6
    1c06:	c6 81       	ldd	r28, Z+6	; 0x06
    1c08:	d7 81       	ldd	r29, Z+7	; 0x07
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	04 5f       	subi	r16, 0xF4	; 244
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1c16:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	1c c0       	rjmp	.+56     	; 0x1c56 <xTaskRemoveFromEventList+0x62>
    1c1e:	0a 50       	subi	r16, 0x0A	; 10
    1c20:	11 09       	sbc	r17, r1
    1c22:	c8 01       	movw	r24, r16
    1c24:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1c28:	8e 89       	ldd	r24, Y+22	; 0x16
    1c2a:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1c2e:	98 17       	cp	r25, r24
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <xTaskRemoveFromEventList+0x42>
    1c32:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	b8 01       	movw	r22, r16
    1c4c:	8c 54       	subi	r24, 0x4C	; 76
    1c4e:	98 4f       	sbci	r25, 0xF8	; 248
    1c50:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <xTaskRemoveFromEventList+0x6c>
    1c56:	b8 01       	movw	r22, r16
    1c58:	85 e9       	ldi	r24, 0x95	; 149
    1c5a:	97 e0       	ldi	r25, 0x07	; 7
    1c5c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1c60:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1c64:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1c68:	9e 89       	ldd	r25, Y+22	; 0x16
    1c6a:	86 89       	ldd	r24, Z+22	; 0x16
    1c6c:	89 17       	cp	r24, r25
    1c6e:	20 f4       	brcc	.+8      	; 0x1c78 <xTaskRemoveFromEventList+0x84>
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xYieldPending>
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <xTaskRemoveFromEventList+0x86>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <vTaskInternalSetTimeOutState>:
    1c84:	20 91 7a 07 	lds	r18, 0x077A	; 0x80077a <xNumOfOverflows>
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
    1c8c:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <xTickCount>
    1c90:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <xTickCount+0x1>
    1c94:	32 83       	std	Z+2, r19	; 0x02
    1c96:	21 83       	std	Z+1, r18	; 0x01
    1c98:	08 95       	ret

00001c9a <xTaskCheckForTimeOut>:
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	0f 92       	push	r0
    1ca4:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <xTickCount>
    1ca8:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <xTickCount+0x1>
    1cac:	db 01       	movw	r26, r22
    1cae:	4d 91       	ld	r20, X+
    1cb0:	5c 91       	ld	r21, X
    1cb2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cb4:	bf ef       	ldi	r27, 0xFF	; 255
    1cb6:	5b 07       	cpc	r21, r27
    1cb8:	e9 f0       	breq	.+58     	; 0x1cf4 <xTaskCheckForTimeOut+0x5a>
    1cba:	ec 01       	movw	r28, r24
    1cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc0:	a0 91 7a 07 	lds	r26, 0x077A	; 0x80077a <xNumOfOverflows>
    1cc4:	b8 81       	ld	r27, Y
    1cc6:	ba 17       	cp	r27, r26
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <xTaskCheckForTimeOut+0x36>
    1cca:	2e 17       	cp	r18, r30
    1ccc:	3f 07       	cpc	r19, r31
    1cce:	a0 f4       	brcc	.+40     	; 0x1cf8 <xTaskCheckForTimeOut+0x5e>
    1cd0:	2e 1b       	sub	r18, r30
    1cd2:	3f 0b       	sbc	r19, r31
    1cd4:	24 17       	cp	r18, r20
    1cd6:	35 07       	cpc	r19, r21
    1cd8:	40 f4       	brcc	.+16     	; 0x1cea <xTaskCheckForTimeOut+0x50>
    1cda:	fb 01       	movw	r30, r22
    1cdc:	42 1b       	sub	r20, r18
    1cde:	53 0b       	sbc	r21, r19
    1ce0:	51 83       	std	Z+1, r21	; 0x01
    1ce2:	40 83       	st	Z, r20
    1ce4:	cf df       	rcall	.-98     	; 0x1c84 <vTaskInternalSetTimeOutState>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <xTaskCheckForTimeOut+0x60>
    1cea:	fb 01       	movw	r30, r22
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <xTaskCheckForTimeOut+0x60>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <xTaskCheckForTimeOut+0x60>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <vTaskMissedYield>:
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xYieldPending>
    1d0a:	08 95       	ret

00001d0c <xTaskGetCurrentTaskHandle>:
    1d0c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1d10:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1d14:	08 95       	ret

00001d16 <xTaskGetSchedulerState>:
    1d16:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xSchedulerRunning>
    1d1a:	88 23       	and	r24, r24
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <xTaskGetSchedulerState+0x14>
    1d1e:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    1d22:	88 23       	and	r24, r24
    1d24:	21 f0       	breq	.+8      	; 0x1d2e <xTaskGetSchedulerState+0x18>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	08 95       	ret
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	08 95       	ret
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	08 95       	ret

00001d32 <xTaskPriorityInherit>:
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	89 2b       	or	r24, r25
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <xTaskPriorityInherit+0x10>
    1d40:	64 c0       	rjmp	.+200    	; 0x1e0a <xTaskPriorityInherit+0xd8>
    1d42:	26 89       	ldd	r18, Z+22	; 0x16
    1d44:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1d48:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1d4c:	56 96       	adiw	r26, 0x16	; 22
    1d4e:	8c 91       	ld	r24, X
    1d50:	28 17       	cp	r18, r24
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <xTaskPriorityInherit+0x24>
    1d54:	4e c0       	rjmp	.+156    	; 0x1df2 <xTaskPriorityInherit+0xc0>
    1d56:	84 85       	ldd	r24, Z+12	; 0x0c
    1d58:	95 85       	ldd	r25, Z+13	; 0x0d
    1d5a:	99 23       	and	r25, r25
    1d5c:	64 f0       	brlt	.+24     	; 0x1d76 <xTaskPriorityInherit+0x44>
    1d5e:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1d62:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1d66:	56 96       	adiw	r26, 0x16	; 22
    1d68:	3c 91       	ld	r19, X
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	83 1b       	sub	r24, r19
    1d70:	91 09       	sbc	r25, r1
    1d72:	95 87       	std	Z+13, r25	; 0x0d
    1d74:	84 87       	std	Z+12, r24	; 0x0c
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	c9 01       	movw	r24, r18
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	28 0f       	add	r18, r24
    1d88:	39 1f       	adc	r19, r25
    1d8a:	2c 54       	subi	r18, 0x4C	; 76
    1d8c:	38 4f       	sbci	r19, 0xF8	; 248
    1d8e:	82 85       	ldd	r24, Z+10	; 0x0a
    1d90:	93 85       	ldd	r25, Z+11	; 0x0b
    1d92:	82 17       	cp	r24, r18
    1d94:	93 07       	cpc	r25, r19
    1d96:	21 f5       	brne	.+72     	; 0x1de0 <xTaskPriorityInherit+0xae>
    1d98:	8f 01       	movw	r16, r30
    1d9a:	ef 01       	movw	r28, r30
    1d9c:	22 96       	adiw	r28, 0x02	; 2
    1d9e:	ce 01       	movw	r24, r28
    1da0:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1da4:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1da8:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1dac:	86 89       	ldd	r24, Z+22	; 0x16
    1dae:	f8 01       	movw	r30, r16
    1db0:	86 8b       	std	Z+22, r24	; 0x16
    1db2:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1db6:	98 17       	cp	r25, r24
    1db8:	10 f4       	brcc	.+4      	; 0x1dbe <xTaskPriorityInherit+0x8c>
    1dba:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	22 0f       	add	r18, r18
    1dc4:	33 1f       	adc	r19, r19
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	82 0f       	add	r24, r18
    1dd0:	93 1f       	adc	r25, r19
    1dd2:	be 01       	movw	r22, r28
    1dd4:	8c 54       	subi	r24, 0x4C	; 76
    1dd6:	98 4f       	sbci	r25, 0xF8	; 248
    1dd8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	16 c0       	rjmp	.+44     	; 0x1e0c <xTaskPriorityInherit+0xda>
    1de0:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1de4:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1de8:	56 96       	adiw	r26, 0x16	; 22
    1dea:	8c 91       	ld	r24, X
    1dec:	86 8b       	std	Z+22, r24	; 0x16
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <xTaskPriorityInherit+0xda>
    1df2:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1df6:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	23 a1       	ldd	r18, Z+35	; 0x23
    1dfe:	56 96       	adiw	r26, 0x16	; 22
    1e00:	9c 91       	ld	r25, X
    1e02:	29 17       	cp	r18, r25
    1e04:	18 f0       	brcs	.+6      	; 0x1e0c <xTaskPriorityInherit+0xda>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <xTaskPriorityInherit+0xda>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <xTaskPriorityDisinherit>:
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	fc 01       	movw	r30, r24
    1e20:	89 2b       	or	r24, r25
    1e22:	79 f1       	breq	.+94     	; 0x1e82 <xTaskPriorityDisinherit+0x6c>
    1e24:	84 a1       	ldd	r24, Z+36	; 0x24
    1e26:	81 50       	subi	r24, 0x01	; 1
    1e28:	84 a3       	std	Z+36, r24	; 0x24
    1e2a:	26 89       	ldd	r18, Z+22	; 0x16
    1e2c:	93 a1       	ldd	r25, Z+35	; 0x23
    1e2e:	29 17       	cp	r18, r25
    1e30:	51 f1       	breq	.+84     	; 0x1e86 <xTaskPriorityDisinherit+0x70>
    1e32:	81 11       	cpse	r24, r1
    1e34:	2a c0       	rjmp	.+84     	; 0x1e8a <xTaskPriorityDisinherit+0x74>
    1e36:	ef 01       	movw	r28, r30
    1e38:	8f 01       	movw	r16, r30
    1e3a:	0e 5f       	subi	r16, 0xFE	; 254
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1e44:	8b a1       	ldd	r24, Y+35	; 0x23
    1e46:	8e 8b       	std	Y+22, r24	; 0x16
    1e48:	24 e0       	ldi	r18, 0x04	; 4
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	28 1b       	sub	r18, r24
    1e4e:	31 09       	sbc	r19, r1
    1e50:	3d 87       	std	Y+13, r19	; 0x0d
    1e52:	2c 87       	std	Y+12, r18	; 0x0c
    1e54:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1e58:	98 17       	cp	r25, r24
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <xTaskPriorityDisinherit+0x4a>
    1e5c:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9c 01       	movw	r18, r24
    1e64:	22 0f       	add	r18, r18
    1e66:	33 1f       	adc	r19, r19
    1e68:	22 0f       	add	r18, r18
    1e6a:	33 1f       	adc	r19, r19
    1e6c:	22 0f       	add	r18, r18
    1e6e:	33 1f       	adc	r19, r19
    1e70:	82 0f       	add	r24, r18
    1e72:	93 1f       	adc	r25, r19
    1e74:	b8 01       	movw	r22, r16
    1e76:	8c 54       	subi	r24, 0x4C	; 76
    1e78:	98 4f       	sbci	r25, 0xF8	; 248
    1e7a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <xTaskPriorityDisinherit+0x76>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <xTaskPriorityDisinherit+0x76>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <xTaskPriorityDisinherit+0x76>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <vTaskPriorityDisinheritAfterTimeout>:
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	89 2b       	or	r24, r25
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1ea4:	43 c0       	rjmp	.+134    	; 0x1f2c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ea6:	93 a1       	ldd	r25, Z+35	; 0x23
    1ea8:	96 17       	cp	r25, r22
    1eaa:	08 f4       	brcc	.+2      	; 0x1eae <vTaskPriorityDisinheritAfterTimeout+0x18>
    1eac:	96 2f       	mov	r25, r22
    1eae:	86 89       	ldd	r24, Z+22	; 0x16
    1eb0:	89 17       	cp	r24, r25
    1eb2:	e1 f1       	breq	.+120    	; 0x1f2c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eb4:	24 a1       	ldd	r18, Z+36	; 0x24
    1eb6:	21 30       	cpi	r18, 0x01	; 1
    1eb8:	c9 f5       	brne	.+114    	; 0x1f2c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eba:	96 8b       	std	Z+22, r25	; 0x16
    1ebc:	24 85       	ldd	r18, Z+12	; 0x0c
    1ebe:	35 85       	ldd	r19, Z+13	; 0x0d
    1ec0:	33 23       	and	r19, r19
    1ec2:	34 f0       	brlt	.+12     	; 0x1ed0 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1ec4:	24 e0       	ldi	r18, 0x04	; 4
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	29 1b       	sub	r18, r25
    1eca:	31 09       	sbc	r19, r1
    1ecc:	35 87       	std	Z+13, r19	; 0x0d
    1ece:	24 87       	std	Z+12, r18	; 0x0c
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c 01       	movw	r18, r24
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	8c 54       	subi	r24, 0x4C	; 76
    1ee6:	98 4f       	sbci	r25, 0xF8	; 248
    1ee8:	22 85       	ldd	r18, Z+10	; 0x0a
    1eea:	33 85       	ldd	r19, Z+11	; 0x0b
    1eec:	28 17       	cp	r18, r24
    1eee:	39 07       	cpc	r19, r25
    1ef0:	e9 f4       	brne	.+58     	; 0x1f2c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ef2:	ef 01       	movw	r28, r30
    1ef4:	8f 01       	movw	r16, r30
    1ef6:	0e 5f       	subi	r16, 0xFE	; 254
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	c8 01       	movw	r24, r16
    1efc:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    1f00:	8e 89       	ldd	r24, Y+22	; 0x16
    1f02:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1f06:	98 17       	cp	r25, r24
    1f08:	10 f4       	brcc	.+4      	; 0x1f0e <vTaskPriorityDisinheritAfterTimeout+0x78>
    1f0a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 01       	movw	r18, r24
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	82 0f       	add	r24, r18
    1f20:	93 1f       	adc	r25, r19
    1f22:	b8 01       	movw	r22, r16
    1f24:	8c 54       	subi	r24, 0x4C	; 76
    1f26:	98 4f       	sbci	r25, 0xF8	; 248
    1f28:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	08 95       	ret

00001f36 <pvTaskIncrementMutexHeldCount>:
    1f36:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1f3a:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1f3e:	89 2b       	or	r24, r25
    1f40:	39 f0       	breq	.+14     	; 0x1f50 <pvTaskIncrementMutexHeldCount+0x1a>
    1f42:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1f46:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1f4a:	84 a1       	ldd	r24, Z+36	; 0x24
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	84 a3       	std	Z+36, r24	; 0x24
    1f50:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1f54:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1f58:	08 95       	ret

00001f5a <xTaskNotifyWait>:
    1f5a:	4f 92       	push	r4
    1f5c:	5f 92       	push	r5
    1f5e:	6f 92       	push	r6
    1f60:	7f 92       	push	r7
    1f62:	8f 92       	push	r8
    1f64:	9f 92       	push	r9
    1f66:	af 92       	push	r10
    1f68:	bf 92       	push	r11
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	49 01       	movw	r8, r18
    1f74:	5a 01       	movw	r10, r20
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	0f 92       	push	r0
    1f7c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1f80:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1f84:	23 a5       	ldd	r18, Z+43	; 0x2b
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	21 f1       	breq	.+72     	; 0x1fd2 <xTaskNotifyWait+0x78>
    1f8a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1f8e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1f92:	47 a0       	ldd	r4, Z+39	; 0x27
    1f94:	50 a4       	ldd	r5, Z+40	; 0x28
    1f96:	61 a4       	ldd	r6, Z+41	; 0x29
    1f98:	72 a4       	ldd	r7, Z+42	; 0x2a
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	a0 95       	com	r26
    1fa4:	b0 95       	com	r27
    1fa6:	84 21       	and	r24, r4
    1fa8:	95 21       	and	r25, r5
    1faa:	a6 21       	and	r26, r6
    1fac:	b7 21       	and	r27, r7
    1fae:	87 a3       	std	Z+39, r24	; 0x27
    1fb0:	90 a7       	std	Z+40, r25	; 0x28
    1fb2:	a1 a7       	std	Z+41, r26	; 0x29
    1fb4:	b2 a7       	std	Z+42, r27	; 0x2a
    1fb6:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1fba:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	83 a7       	std	Z+43, r24	; 0x2b
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <xTaskNotifyWait+0x78>
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	c7 01       	movw	r24, r14
    1fcc:	50 da       	rcall	.-2912   	; 0x146e <prvAddCurrentTaskToDelayedList>
    1fce:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    1fd2:	0f 90       	pop	r0
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	0f 92       	push	r0
    1fdc:	01 15       	cp	r16, r1
    1fde:	11 05       	cpc	r17, r1
    1fe0:	69 f0       	breq	.+26     	; 0x1ffc <xTaskNotifyWait+0xa2>
    1fe2:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1fe6:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1fea:	87 a1       	ldd	r24, Z+39	; 0x27
    1fec:	90 a5       	ldd	r25, Z+40	; 0x28
    1fee:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ff0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
    1ffc:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2000:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2004:	83 a5       	ldd	r24, Z+43	; 0x2b
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	b1 f4       	brne	.+44     	; 0x2036 <xTaskNotifyWait+0xdc>
    200a:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    200e:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2012:	87 a1       	ldd	r24, Z+39	; 0x27
    2014:	90 a5       	ldd	r25, Z+40	; 0x28
    2016:	a1 a5       	ldd	r26, Z+41	; 0x29
    2018:	b2 a5       	ldd	r27, Z+42	; 0x2a
    201a:	80 94       	com	r8
    201c:	90 94       	com	r9
    201e:	a0 94       	com	r10
    2020:	b0 94       	com	r11
    2022:	88 22       	and	r8, r24
    2024:	99 22       	and	r9, r25
    2026:	aa 22       	and	r10, r26
    2028:	bb 22       	and	r11, r27
    202a:	87 a2       	std	Z+39, r8	; 0x27
    202c:	90 a6       	std	Z+40, r9	; 0x28
    202e:	a1 a6       	std	Z+41, r10	; 0x29
    2030:	b2 a6       	std	Z+42, r11	; 0x2a
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <xTaskNotifyWait+0xde>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    203c:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2040:	13 a6       	std	Z+43, r1	; 0x2b
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	7f 90       	pop	r7
    2058:	6f 90       	pop	r6
    205a:	5f 90       	pop	r5
    205c:	4f 90       	pop	r4
    205e:	08 95       	ret

00002060 <xTaskGenericNotify>:
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	fc 01       	movw	r30, r24
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	0f 92       	push	r0
    2070:	01 15       	cp	r16, r1
    2072:	11 05       	cpc	r17, r1
    2074:	49 f0       	breq	.+18     	; 0x2088 <xTaskGenericNotify+0x28>
    2076:	87 a1       	ldd	r24, Z+39	; 0x27
    2078:	90 a5       	ldd	r25, Z+40	; 0x28
    207a:	a1 a5       	ldd	r26, Z+41	; 0x29
    207c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    207e:	e8 01       	movw	r28, r16
    2080:	88 83       	st	Y, r24
    2082:	99 83       	std	Y+1, r25	; 0x01
    2084:	aa 83       	std	Y+2, r26	; 0x02
    2086:	bb 83       	std	Y+3, r27	; 0x03
    2088:	83 a5       	ldd	r24, Z+43	; 0x2b
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	93 a7       	std	Z+43, r25	; 0x2b
    208e:	22 30       	cpi	r18, 0x02	; 2
    2090:	b1 f0       	breq	.+44     	; 0x20be <xTaskGenericNotify+0x5e>
    2092:	18 f4       	brcc	.+6      	; 0x209a <xTaskGenericNotify+0x3a>
    2094:	21 30       	cpi	r18, 0x01	; 1
    2096:	31 f0       	breq	.+12     	; 0x20a4 <xTaskGenericNotify+0x44>
    2098:	2a c0       	rjmp	.+84     	; 0x20ee <xTaskGenericNotify+0x8e>
    209a:	23 30       	cpi	r18, 0x03	; 3
    209c:	e9 f0       	breq	.+58     	; 0x20d8 <xTaskGenericNotify+0x78>
    209e:	24 30       	cpi	r18, 0x04	; 4
    20a0:	01 f1       	breq	.+64     	; 0x20e2 <xTaskGenericNotify+0x82>
    20a2:	25 c0       	rjmp	.+74     	; 0x20ee <xTaskGenericNotify+0x8e>
    20a4:	07 a1       	ldd	r16, Z+39	; 0x27
    20a6:	10 a5       	ldd	r17, Z+40	; 0x28
    20a8:	21 a5       	ldd	r18, Z+41	; 0x29
    20aa:	32 a5       	ldd	r19, Z+42	; 0x2a
    20ac:	40 2b       	or	r20, r16
    20ae:	51 2b       	or	r21, r17
    20b0:	62 2b       	or	r22, r18
    20b2:	73 2b       	or	r23, r19
    20b4:	47 a3       	std	Z+39, r20	; 0x27
    20b6:	50 a7       	std	Z+40, r21	; 0x28
    20b8:	61 a7       	std	Z+41, r22	; 0x29
    20ba:	72 a7       	std	Z+42, r23	; 0x2a
    20bc:	18 c0       	rjmp	.+48     	; 0x20ee <xTaskGenericNotify+0x8e>
    20be:	47 a1       	ldd	r20, Z+39	; 0x27
    20c0:	50 a5       	ldd	r21, Z+40	; 0x28
    20c2:	61 a5       	ldd	r22, Z+41	; 0x29
    20c4:	72 a5       	ldd	r23, Z+42	; 0x2a
    20c6:	4f 5f       	subi	r20, 0xFF	; 255
    20c8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ca:	6f 4f       	sbci	r22, 0xFF	; 255
    20cc:	7f 4f       	sbci	r23, 0xFF	; 255
    20ce:	47 a3       	std	Z+39, r20	; 0x27
    20d0:	50 a7       	std	Z+40, r21	; 0x28
    20d2:	61 a7       	std	Z+41, r22	; 0x29
    20d4:	72 a7       	std	Z+42, r23	; 0x2a
    20d6:	0b c0       	rjmp	.+22     	; 0x20ee <xTaskGenericNotify+0x8e>
    20d8:	47 a3       	std	Z+39, r20	; 0x27
    20da:	50 a7       	std	Z+40, r21	; 0x28
    20dc:	61 a7       	std	Z+41, r22	; 0x29
    20de:	72 a7       	std	Z+42, r23	; 0x2a
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <xTaskGenericNotify+0x8e>
    20e2:	82 30       	cpi	r24, 0x02	; 2
    20e4:	79 f1       	breq	.+94     	; 0x2144 <xTaskGenericNotify+0xe4>
    20e6:	47 a3       	std	Z+39, r20	; 0x27
    20e8:	50 a7       	std	Z+40, r21	; 0x28
    20ea:	61 a7       	std	Z+41, r22	; 0x29
    20ec:	72 a7       	std	Z+42, r23	; 0x2a
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	59 f5       	brne	.+86     	; 0x2148 <xTaskGenericNotify+0xe8>
    20f2:	ef 01       	movw	r28, r30
    20f4:	8f 01       	movw	r16, r30
    20f6:	0e 5f       	subi	r16, 0xFE	; 254
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	c8 01       	movw	r24, r16
    20fc:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    2100:	8e 89       	ldd	r24, Y+22	; 0x16
    2102:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    2106:	98 17       	cp	r25, r24
    2108:	10 f4       	brcc	.+4      	; 0x210e <xTaskGenericNotify+0xae>
    210a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9c 01       	movw	r18, r24
    2112:	22 0f       	add	r18, r18
    2114:	33 1f       	adc	r19, r19
    2116:	22 0f       	add	r18, r18
    2118:	33 1f       	adc	r19, r19
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	82 0f       	add	r24, r18
    2120:	93 1f       	adc	r25, r19
    2122:	b8 01       	movw	r22, r16
    2124:	8c 54       	subi	r24, 0x4C	; 76
    2126:	98 4f       	sbci	r25, 0xF8	; 248
    2128:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    212c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2130:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2134:	9e 89       	ldd	r25, Y+22	; 0x16
    2136:	86 89       	ldd	r24, Z+22	; 0x16
    2138:	89 17       	cp	r24, r25
    213a:	40 f4       	brcc	.+16     	; 0x214c <xTaskGenericNotify+0xec>
    213c:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	05 c0       	rjmp	.+10     	; 0x214e <xTaskGenericNotify+0xee>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	03 c0       	rjmp	.+6      	; 0x214e <xTaskGenericNotify+0xee>
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	01 c0       	rjmp	.+2      	; 0x214e <xTaskGenericNotify+0xee>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	0f 90       	pop	r0
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	08 95       	ret

0000215c <xTaskGenericNotifyFromISR>:
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	fc 01       	movw	r30, r24
    216a:	01 15       	cp	r16, r1
    216c:	11 05       	cpc	r17, r1
    216e:	49 f0       	breq	.+18     	; 0x2182 <xTaskGenericNotifyFromISR+0x26>
    2170:	87 a1       	ldd	r24, Z+39	; 0x27
    2172:	90 a5       	ldd	r25, Z+40	; 0x28
    2174:	a1 a5       	ldd	r26, Z+41	; 0x29
    2176:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2178:	e8 01       	movw	r28, r16
    217a:	88 83       	st	Y, r24
    217c:	99 83       	std	Y+1, r25	; 0x01
    217e:	aa 83       	std	Y+2, r26	; 0x02
    2180:	bb 83       	std	Y+3, r27	; 0x03
    2182:	83 a5       	ldd	r24, Z+43	; 0x2b
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	93 a7       	std	Z+43, r25	; 0x2b
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	b1 f0       	breq	.+44     	; 0x21b8 <xTaskGenericNotifyFromISR+0x5c>
    218c:	18 f4       	brcc	.+6      	; 0x2194 <xTaskGenericNotifyFromISR+0x38>
    218e:	21 30       	cpi	r18, 0x01	; 1
    2190:	31 f0       	breq	.+12     	; 0x219e <xTaskGenericNotifyFromISR+0x42>
    2192:	2b c0       	rjmp	.+86     	; 0x21ea <xTaskGenericNotifyFromISR+0x8e>
    2194:	23 30       	cpi	r18, 0x03	; 3
    2196:	e9 f0       	breq	.+58     	; 0x21d2 <xTaskGenericNotifyFromISR+0x76>
    2198:	24 30       	cpi	r18, 0x04	; 4
    219a:	01 f1       	breq	.+64     	; 0x21dc <xTaskGenericNotifyFromISR+0x80>
    219c:	26 c0       	rjmp	.+76     	; 0x21ea <xTaskGenericNotifyFromISR+0x8e>
    219e:	07 a1       	ldd	r16, Z+39	; 0x27
    21a0:	10 a5       	ldd	r17, Z+40	; 0x28
    21a2:	21 a5       	ldd	r18, Z+41	; 0x29
    21a4:	32 a5       	ldd	r19, Z+42	; 0x2a
    21a6:	40 2b       	or	r20, r16
    21a8:	51 2b       	or	r21, r17
    21aa:	62 2b       	or	r22, r18
    21ac:	73 2b       	or	r23, r19
    21ae:	47 a3       	std	Z+39, r20	; 0x27
    21b0:	50 a7       	std	Z+40, r21	; 0x28
    21b2:	61 a7       	std	Z+41, r22	; 0x29
    21b4:	72 a7       	std	Z+42, r23	; 0x2a
    21b6:	19 c0       	rjmp	.+50     	; 0x21ea <xTaskGenericNotifyFromISR+0x8e>
    21b8:	47 a1       	ldd	r20, Z+39	; 0x27
    21ba:	50 a5       	ldd	r21, Z+40	; 0x28
    21bc:	61 a5       	ldd	r22, Z+41	; 0x29
    21be:	72 a5       	ldd	r23, Z+42	; 0x2a
    21c0:	4f 5f       	subi	r20, 0xFF	; 255
    21c2:	5f 4f       	sbci	r21, 0xFF	; 255
    21c4:	6f 4f       	sbci	r22, 0xFF	; 255
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255
    21c8:	47 a3       	std	Z+39, r20	; 0x27
    21ca:	50 a7       	std	Z+40, r21	; 0x28
    21cc:	61 a7       	std	Z+41, r22	; 0x29
    21ce:	72 a7       	std	Z+42, r23	; 0x2a
    21d0:	0c c0       	rjmp	.+24     	; 0x21ea <xTaskGenericNotifyFromISR+0x8e>
    21d2:	47 a3       	std	Z+39, r20	; 0x27
    21d4:	50 a7       	std	Z+40, r21	; 0x28
    21d6:	61 a7       	std	Z+41, r22	; 0x29
    21d8:	72 a7       	std	Z+42, r23	; 0x2a
    21da:	07 c0       	rjmp	.+14     	; 0x21ea <xTaskGenericNotifyFromISR+0x8e>
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	09 f4       	brne	.+2      	; 0x21e2 <xTaskGenericNotifyFromISR+0x86>
    21e0:	41 c0       	rjmp	.+130    	; 0x2264 <__stack+0x65>
    21e2:	47 a3       	std	Z+39, r20	; 0x27
    21e4:	50 a7       	std	Z+40, r21	; 0x28
    21e6:	61 a7       	std	Z+41, r22	; 0x29
    21e8:	72 a7       	std	Z+42, r23	; 0x2a
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	e9 f5       	brne	.+122    	; 0x2268 <__stack+0x69>
    21ee:	ef 01       	movw	r28, r30
    21f0:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <__data_end>
    21f4:	81 11       	cpse	r24, r1
    21f6:	1d c0       	rjmp	.+58     	; 0x2232 <__stack+0x33>
    21f8:	8f 01       	movw	r16, r30
    21fa:	0e 5f       	subi	r16, 0xFE	; 254
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	c8 01       	movw	r24, r16
    2200:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
    2204:	8e 89       	ldd	r24, Y+22	; 0x16
    2206:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    220a:	98 17       	cp	r25, r24
    220c:	10 f4       	brcc	.+4      	; 0x2212 <__stack+0x13>
    220e:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 01       	movw	r18, r24
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	b8 01       	movw	r22, r16
    2228:	8c 54       	subi	r24, 0x4C	; 76
    222a:	98 4f       	sbci	r25, 0xF8	; 248
    222c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    2230:	07 c0       	rjmp	.+14     	; 0x2240 <__stack+0x41>
    2232:	bf 01       	movw	r22, r30
    2234:	64 5f       	subi	r22, 0xF4	; 244
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	85 e9       	ldi	r24, 0x95	; 149
    223a:	97 e0       	ldi	r25, 0x07	; 7
    223c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInsertEnd>
    2240:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2244:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    2248:	9e 89       	ldd	r25, Y+22	; 0x16
    224a:	86 89       	ldd	r24, Z+22	; 0x16
    224c:	89 17       	cp	r24, r25
    224e:	70 f4       	brcc	.+28     	; 0x226c <__stack+0x6d>
    2250:	e1 14       	cp	r14, r1
    2252:	f1 04       	cpc	r15, r1
    2254:	19 f0       	breq	.+6      	; 0x225c <__stack+0x5d>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	f7 01       	movw	r30, r14
    225a:	80 83       	st	Z, r24
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xYieldPending>
    2262:	05 c0       	rjmp	.+10     	; 0x226e <__stack+0x6f>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	03 c0       	rjmp	.+6      	; 0x226e <__stack+0x6f>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	01 c0       	rjmp	.+2      	; 0x226e <__stack+0x6f>
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	08 95       	ret

0000227c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	21 f4       	brne	.+8      	; 0x2288 <xTaskNotifyStateClear+0xc>
    2280:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    2284:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    228e:	fc 01       	movw	r30, r24
    2290:	23 a5       	ldd	r18, Z+43	; 0x2b
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	19 f4       	brne	.+6      	; 0x229c <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2296:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	01 c0       	rjmp	.+2      	; 0x229e <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    229c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    229e:	0f 90       	pop	r0
    22a0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    22a2:	08 95       	ret

000022a4 <prvInsertTimerInActiveList>:
    22a4:	fc 01       	movw	r30, r24
    22a6:	73 83       	std	Z+3, r23	; 0x03
    22a8:	62 83       	std	Z+2, r22	; 0x02
    22aa:	91 87       	std	Z+9, r25	; 0x09
    22ac:	80 87       	std	Z+8, r24	; 0x08
    22ae:	46 17       	cp	r20, r22
    22b0:	57 07       	cpc	r21, r23
    22b2:	90 f0       	brcs	.+36     	; 0x22d8 <prvInsertTimerInActiveList+0x34>
    22b4:	42 1b       	sub	r20, r18
    22b6:	53 0b       	sbc	r21, r19
    22b8:	84 85       	ldd	r24, Z+12	; 0x0c
    22ba:	95 85       	ldd	r25, Z+13	; 0x0d
    22bc:	48 17       	cp	r20, r24
    22be:	59 07       	cpc	r21, r25
    22c0:	e0 f4       	brcc	.+56     	; 0x22fa <prvInsertTimerInActiveList+0x56>
    22c2:	bf 01       	movw	r22, r30
    22c4:	6e 5f       	subi	r22, 0xFE	; 254
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    22cc:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    22d0:	0e 94 93 02 	call	0x526	; 0x526 <vListInsert>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	08 95       	ret
    22d8:	42 17       	cp	r20, r18
    22da:	53 07       	cpc	r21, r19
    22dc:	18 f4       	brcc	.+6      	; 0x22e4 <prvInsertTimerInActiveList+0x40>
    22de:	62 17       	cp	r22, r18
    22e0:	73 07       	cpc	r23, r19
    22e2:	68 f4       	brcc	.+26     	; 0x22fe <prvInsertTimerInActiveList+0x5a>
    22e4:	bf 01       	movw	r22, r30
    22e6:	6e 5f       	subi	r22, 0xFE	; 254
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    22ee:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    22f2:	0e 94 93 02 	call	0x526	; 0x526 <vListInsert>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	08 95       	ret
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	08 95       	ret
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	08 95       	ret

00002302 <prvCheckForValidListAndQueue>:
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	0f 92       	push	r0
    2308:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    230c:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    2310:	89 2b       	or	r24, r25
    2312:	e9 f4       	brne	.+58     	; 0x234e <prvCheckForValidListAndQueue+0x4c>
    2314:	8d ee       	ldi	r24, 0xED	; 237
    2316:	97 e0       	ldi	r25, 0x07	; 7
    2318:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    231c:	84 ee       	ldi	r24, 0xE4	; 228
    231e:	97 e0       	ldi	r25, 0x07	; 7
    2320:	0e 94 60 02 	call	0x4c0	; 0x4c0 <vListInitialise>
    2324:	8d ee       	ldi	r24, 0xED	; 237
    2326:	97 e0       	ldi	r25, 0x07	; 7
    2328:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    232c:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
    2330:	84 ee       	ldi	r24, 0xE4	; 228
    2332:	97 e0       	ldi	r25, 0x07	; 7
    2334:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <pxOverflowTimerList+0x1>
    2338:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <pxOverflowTimerList>
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	65 e0       	ldi	r22, 0x05	; 5
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	0e 94 74 05 	call	0xae8	; 0xae8 <xQueueGenericCreate>
    2346:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <xTimerQueue+0x1>
    234a:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <xTimerQueue>
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	08 95       	ret

00002354 <xTimerCreateTimerTask>:
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	d3 df       	rcall	.-90     	; 0x2302 <prvCheckForValidListAndQueue>
    235c:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    2360:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    2364:	89 2b       	or	r24, r25
    2366:	89 f0       	breq	.+34     	; 0x238a <xTimerCreateTimerTask+0x36>
    2368:	0f 2e       	mov	r0, r31
    236a:	fc ed       	ldi	r31, 0xDC	; 220
    236c:	ef 2e       	mov	r14, r31
    236e:	f7 e0       	ldi	r31, 0x07	; 7
    2370:	ff 2e       	mov	r15, r31
    2372:	f0 2d       	mov	r31, r0
    2374:	03 e0       	ldi	r16, 0x03	; 3
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	45 e5       	ldi	r20, 0x55	; 85
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	63 e7       	ldi	r22, 0x73	; 115
    2380:	72 e0       	ldi	r23, 0x02	; 2
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	c7 d8       	rcall	.-3698   	; 0x1516 <xTaskCreate>
    2388:	01 c0       	rjmp	.+2      	; 0x238c <xTimerCreateTimerTask+0x38>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	08 95       	ret

00002394 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	00 d0       	rcall	.+0      	; 0x239e <xTimerGenericCommand+0xa>
    239e:	1f 92       	push	r1
    23a0:	1f 92       	push	r1
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    23a6:	e0 91 de 07 	lds	r30, 0x07DE	; 0x8007de <xTimerQueue>
    23aa:	f0 91 df 07 	lds	r31, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	69 f1       	breq	.+90     	; 0x240c <xTimerGenericCommand+0x78>
    23b2:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    23b4:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    23b6:	5b 83       	std	Y+3, r21	; 0x03
    23b8:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    23ba:	9d 83       	std	Y+5, r25	; 0x05
    23bc:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    23be:	66 30       	cpi	r22, 0x06	; 6
    23c0:	e4 f4       	brge	.+56     	; 0x23fa <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    23c2:	a9 dc       	rcall	.-1710   	; 0x1d16 <xTaskGetSchedulerState>
    23c4:	82 30       	cpi	r24, 0x02	; 2
    23c6:	61 f4       	brne	.+24     	; 0x23e0 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	a8 01       	movw	r20, r16
    23cc:	be 01       	movw	r22, r28
    23ce:	6f 5f       	subi	r22, 0xFF	; 255
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    23d6:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    23da:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    23de:	17 c0       	rjmp	.+46     	; 0x240e <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	be 01       	movw	r22, r28
    23e8:	6f 5f       	subi	r22, 0xFF	; 255
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <xTimerQueue>
    23f0:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <xTimerQueue+0x1>
    23f4:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    23f8:	0a c0       	rjmp	.+20     	; 0x240e <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	ad 01       	movw	r20, r26
    23fe:	be 01       	movw	r22, r28
    2400:	6f 5f       	subi	r22, 0xFF	; 255
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	cf 01       	movw	r24, r30
    2406:	0e 94 4f 06 	call	0xc9e	; 0xc9e <xQueueGenericSendFromISR>
    240a:	01 c0       	rjmp	.+2      	; 0x240e <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    240c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

00002422 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2438:	c5 d9       	rcall	.-3190   	; 0x17c4 <xTaskGetTickCount>
    243a:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    243c:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <xLastTime.2432>
    2440:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <xLastTime.2432+0x1>
    2444:	e8 16       	cp	r14, r24
    2446:	f9 06       	cpc	r15, r25
    2448:	08 f0       	brcs	.+2      	; 0x244c <prvSampleTimeNow+0x2a>
    244a:	47 c0       	rjmp	.+142    	; 0x24da <prvSampleTimeNow+0xb8>
    244c:	2f c0       	rjmp	.+94     	; 0x24ac <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    244e:	05 80       	ldd	r0, Z+5	; 0x05
    2450:	f6 81       	ldd	r31, Z+6	; 0x06
    2452:	e0 2d       	mov	r30, r0
    2454:	a0 80       	ld	r10, Z
    2456:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2458:	c6 81       	ldd	r28, Z+6	; 0x06
    245a:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    245c:	8e 01       	movw	r16, r28
    245e:	0e 5f       	subi	r16, 0xFE	; 254
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	c8 01       	movw	r24, r16
    2464:	0e 94 c4 02 	call	0x588	; 0x588 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2468:	e8 89       	ldd	r30, Y+16	; 0x10
    246a:	f9 89       	ldd	r31, Y+17	; 0x11
    246c:	ce 01       	movw	r24, r28
    246e:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	82 ff       	sbrs	r24, 2
    2474:	1b c0       	rjmp	.+54     	; 0x24ac <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2476:	8c 85       	ldd	r24, Y+12	; 0x0c
    2478:	9d 85       	ldd	r25, Y+13	; 0x0d
    247a:	8a 0d       	add	r24, r10
    247c:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    247e:	a8 16       	cp	r10, r24
    2480:	b9 06       	cpc	r11, r25
    2482:	60 f4       	brcc	.+24     	; 0x249c <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2484:	9b 83       	std	Y+3, r25	; 0x03
    2486:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2488:	d9 87       	std	Y+9, r29	; 0x09
    248a:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    248c:	b8 01       	movw	r22, r16
    248e:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    2492:	90 91 e3 07 	lds	r25, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    2496:	0e 94 93 02 	call	0x526	; 0x526 <vListInsert>
    249a:	08 c0       	rjmp	.+16     	; 0x24ac <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    249c:	00 e0       	ldi	r16, 0x00	; 0
    249e:	10 e0       	ldi	r17, 0x00	; 0
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	a5 01       	movw	r20, r10
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	ce 01       	movw	r24, r28
    24aa:	74 df       	rcall	.-280    	; 0x2394 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    24ac:	e0 91 e2 07 	lds	r30, 0x07E2	; 0x8007e2 <pxCurrentTimerList>
    24b0:	f0 91 e3 07 	lds	r31, 0x07E3	; 0x8007e3 <pxCurrentTimerList+0x1>
    24b4:	80 81       	ld	r24, Z
    24b6:	81 11       	cpse	r24, r1
    24b8:	ca cf       	rjmp	.-108    	; 0x244e <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    24ba:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxOverflowTimerList>
    24be:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxOverflowTimerList+0x1>
    24c2:	90 93 e3 07 	sts	0x07E3, r25	; 0x8007e3 <pxCurrentTimerList+0x1>
    24c6:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    24ca:	f0 93 e1 07 	sts	0x07E1, r31	; 0x8007e1 <pxOverflowTimerList+0x1>
    24ce:	e0 93 e0 07 	sts	0x07E0, r30	; 0x8007e0 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	f6 01       	movw	r30, r12
    24d6:	80 83       	st	Z, r24
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    24da:	f6 01       	movw	r30, r12
    24dc:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    24de:	f0 92 db 07 	sts	0x07DB, r15	; 0x8007db <xLastTime.2432+0x1>
    24e2:	e0 92 da 07 	sts	0x07DA, r14	; 0x8007da <xLastTime.2432>

    return xTimeNow;
}
    24e6:	c7 01       	movw	r24, r14
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	08 95       	ret

000024fe <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    24fe:	08 95       	ret

00002500 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2500:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2502:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2504:	2f ef       	ldi	r18, 0xFF	; 255
    2506:	80 e7       	ldi	r24, 0x70	; 112
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	21 50       	subi	r18, 0x01	; 1
    250c:	80 40       	sbci	r24, 0x00	; 0
    250e:	90 40       	sbci	r25, 0x00	; 0
    2510:	e1 f7       	brne	.-8      	; 0x250a <vApplicationMallocFailedHook+0xa>
    2512:	00 c0       	rjmp	.+0      	; 0x2514 <vApplicationMallocFailedHook+0x14>
    2514:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2516:	1f 9a       	sbi	0x03, 7	; 3
    2518:	f5 cf       	rjmp	.-22     	; 0x2504 <vApplicationMallocFailedHook+0x4>

0000251a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    251a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    251c:	2f 9a       	sbi	0x05, 7	; 5
    251e:	2f ef       	ldi	r18, 0xFF	; 255
    2520:	87 ea       	ldi	r24, 0xA7	; 167
    2522:	91 e6       	ldi	r25, 0x61	; 97
    2524:	21 50       	subi	r18, 0x01	; 1
    2526:	80 40       	sbci	r24, 0x00	; 0
    2528:	90 40       	sbci	r25, 0x00	; 0
    252a:	e1 f7       	brne	.-8      	; 0x2524 <vApplicationStackOverflowHook+0xa>
    252c:	00 c0       	rjmp	.+0      	; 0x252e <vApplicationStackOverflowHook+0x14>
    252e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2530:	1f 9a       	sbi	0x03, 7	; 3
    2532:	f5 cf       	rjmp	.-22     	; 0x251e <vApplicationStackOverflowHook+0x4>

00002534 <my_co2_call_back>:
/*-----------------------------------------------------------*/
void getCo2(void)
{
	uint16_t ppm=0;
	mh_z19_return_code_t rc;
	rc = mh_z19_take_meassuring();
    2534:	90 93 d0 09 	sts	0x09D0, r25	; 0x8009d0 <mainPpm+0x1>
    2538:	80 93 cf 09 	sts	0x09CF, r24	; 0x8009cf <mainPpm>
    253c:	08 95       	ret

0000253e <task_read_temperature>:
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	1f 92       	push	r1
    2544:	1f 92       	push	r1
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	8a da       	rcall	.-2796   	; 0x1a68 <vTaskSetApplicationTaskTag>
    2554:	1a 82       	std	Y+2, r1	; 0x02
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	0e e9       	ldi	r16, 0x9E	; 158
    255a:	12 e0       	ldi	r17, 0x02	; 2
    255c:	6f ef       	ldi	r22, 0xFF	; 255
    255e:	7f ef       	ldi	r23, 0xFF	; 255
    2560:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <xSharedSensorSemaphore>
    2564:	90 91 d6 09 	lds	r25, 0x09D6	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    2568:	0e 94 10 07 	call	0xe20	; 0xe20 <xQueueSemaphoreTake>
    256c:	88 23       	and	r24, r24
    256e:	11 f1       	breq	.+68     	; 0x25b4 <task_read_temperature+0x76>
    2570:	47 d3       	rcall	.+1678   	; 0x2c00 <hih8120Wakeup>
    2572:	88 23       	and	r24, r24
    2574:	21 f0       	breq	.+8      	; 0x257e <task_read_temperature+0x40>
    2576:	8b e7       	ldi	r24, 0x7B	; 123
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <puts>
    257e:	84 e6       	ldi	r24, 0x64	; 100
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	61 da       	rcall	.-2878   	; 0x1a46 <vTaskDelay>
    2584:	52 d3       	rcall	.+1700   	; 0x2c2a <hih8120Meassure>
    2586:	88 23       	and	r24, r24
    2588:	21 f0       	breq	.+8      	; 0x2592 <task_read_temperature+0x54>
    258a:	8a e8       	ldi	r24, 0x8A	; 138
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <puts>
    2592:	84 e6       	ldi	r24, 0x64	; 100
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	57 da       	rcall	.-2898   	; 0x1a46 <vTaskDelay>
    2598:	94 d3       	rcall	.+1832   	; 0x2cc2 <hih8120GetTemperature_x10>
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <xSharedSensorSemaphore>
    25ac:	90 91 d6 09 	lds	r25, 0x09D6	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    25b0:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    25b4:	6f ef       	ldi	r22, 0xFF	; 255
    25b6:	7f ef       	ldi	r23, 0xFF	; 255
    25b8:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <xTempSemaphore>
    25bc:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <xTempSemaphore+0x1>
    25c0:	0e 94 10 07 	call	0xe20	; 0xe20 <xQueueSemaphoreTake>
    25c4:	88 23       	and	r24, r24
    25c6:	51 f2       	breq	.-108    	; 0x255c <task_read_temperature+0x1e>
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	8f 93       	push	r24
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	8f 93       	push	r24
    25d0:	1f 93       	push	r17
    25d2:	0f 93       	push	r16
    25d4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	be 01       	movw	r22, r28
    25e0:	6f 5f       	subi	r22, 0xFF	; 255
    25e2:	7f 4f       	sbci	r23, 0xFF	; 255
    25e4:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <temperature_queue>
    25e8:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <temperature_queue+0x1>
    25ec:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	b1 cf       	rjmp	.-158    	; 0x255c <task_read_temperature+0x1e>

000025fa <task_read_humidity>:
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	1f 92       	push	r1
    2600:	1f 92       	push	r1
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	61 e0       	ldi	r22, 0x01	; 1
    2608:	70 e0       	ldi	r23, 0x00	; 0
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	2c da       	rcall	.-2984   	; 0x1a68 <vTaskSetApplicationTaskTag>
    2610:	1a 82       	std	Y+2, r1	; 0x02
    2612:	19 82       	std	Y+1, r1	; 0x01
    2614:	0b eb       	ldi	r16, 0xBB	; 187
    2616:	12 e0       	ldi	r17, 0x02	; 2
    2618:	6f ef       	ldi	r22, 0xFF	; 255
    261a:	7f ef       	ldi	r23, 0xFF	; 255
    261c:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <xSharedSensorSemaphore>
    2620:	90 91 d6 09 	lds	r25, 0x09D6	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    2624:	0e 94 10 07 	call	0xe20	; 0xe20 <xQueueSemaphoreTake>
    2628:	88 23       	and	r24, r24
    262a:	11 f1       	breq	.+68     	; 0x2670 <task_read_humidity+0x76>
    262c:	e9 d2       	rcall	.+1490   	; 0x2c00 <hih8120Wakeup>
    262e:	88 23       	and	r24, r24
    2630:	21 f0       	breq	.+8      	; 0x263a <task_read_humidity+0x40>
    2632:	8b e7       	ldi	r24, 0x7B	; 123
    2634:	92 e0       	ldi	r25, 0x02	; 2
    2636:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <puts>
    263a:	84 e6       	ldi	r24, 0x64	; 100
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	03 da       	rcall	.-3066   	; 0x1a46 <vTaskDelay>
    2640:	f4 d2       	rcall	.+1512   	; 0x2c2a <hih8120Meassure>
    2642:	88 23       	and	r24, r24
    2644:	21 f0       	breq	.+8      	; 0x264e <task_read_humidity+0x54>
    2646:	8a e8       	ldi	r24, 0x8A	; 138
    2648:	92 e0       	ldi	r25, 0x02	; 2
    264a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <puts>
    264e:	84 e6       	ldi	r24, 0x64	; 100
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	f9 d9       	rcall	.-3086   	; 0x1a46 <vTaskDelay>
    2654:	10 d3       	rcall	.+1568   	; 0x2c76 <hih8120GetHumidityPercent_x10>
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <xSharedSensorSemaphore>
    2668:	90 91 d6 09 	lds	r25, 0x09D6	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    266c:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    2670:	6f ef       	ldi	r22, 0xFF	; 255
    2672:	7f ef       	ldi	r23, 0xFF	; 255
    2674:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <xHumSemaphore>
    2678:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <xHumSemaphore+0x1>
    267c:	0e 94 10 07 	call	0xe20	; 0xe20 <xQueueSemaphoreTake>
    2680:	88 23       	and	r24, r24
    2682:	51 f2       	breq	.-108    	; 0x2618 <task_read_humidity+0x1e>
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	8f 93       	push	r24
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	8f 93       	push	r24
    268c:	1f 93       	push	r17
    268e:	0f 93       	push	r16
    2690:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	be 01       	movw	r22, r28
    269c:	6f 5f       	subi	r22, 0xFF	; 255
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <humidity_queue>
    26a4:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <humidity_queue+0x1>
    26a8:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	b1 cf       	rjmp	.-158    	; 0x2618 <task_read_humidity+0x1e>

000026b6 <lora_handler_task>:
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <lora_handler_task+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <lora_handler_task+0x8>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	dd d5       	rcall	.+3002   	; 0x3280 <lora_driver_reset_rn2483>
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	bd d9       	rcall	.-3206   	; 0x1a46 <vTaskDelay>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	d8 d5       	rcall	.+2992   	; 0x3280 <lora_driver_reset_rn2483>
    26d0:	86 e9       	ldi	r24, 0x96	; 150
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	b8 d9       	rcall	.-3216   	; 0x1a46 <vTaskDelay>
    26d6:	91 d5       	rcall	.+2850   	; 0x31fa <lora_driver_flush_buffers>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	23 d4       	rcall	.+2118   	; 0x2f22 <led_slow_blink>
    26dc:	e5 d5       	rcall	.+3018   	; 0x32a8 <lora_driver_rn2483_factory_reset>
    26de:	0e 94 80 1b 	call	0x3700	; 0x3700 <lora_driver_map_return_code_to_text>
    26e2:	9f 93       	push	r25
    26e4:	8f 93       	push	r24
    26e6:	85 ed       	ldi	r24, 0xD5	; 213
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	9f 93       	push	r25
    26ec:	8f 93       	push	r24
    26ee:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    26f2:	07 d7       	rcall	.+3598   	; 0x3502 <lora_driver_configure_to_eu868>
    26f4:	0e 94 80 1b 	call	0x3700	; 0x3700 <lora_driver_map_return_code_to_text>
    26f8:	9f 93       	push	r25
    26fa:	8f 93       	push	r24
    26fc:	88 ee       	ldi	r24, 0xE8	; 232
    26fe:	92 e0       	ldi	r25, 0x02	; 2
    2700:	9f 93       	push	r25
    2702:	8f 93       	push	r24
    2704:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2708:	8c e0       	ldi	r24, 0x0C	; 12
    270a:	98 e0       	ldi	r25, 0x08	; 8
    270c:	df d5       	rcall	.+3006   	; 0x32cc <lora_driver_get_rn2483_hweui>
    270e:	f8 d7       	rcall	.+4080   	; 0x3700 <lora_driver_map_return_code_to_text>
    2710:	0c e0       	ldi	r16, 0x0C	; 12
    2712:	18 e0       	ldi	r17, 0x08	; 8
    2714:	1f 93       	push	r17
    2716:	0f 93       	push	r16
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2728:	c8 01       	movw	r24, r16
    272a:	ec d5       	rcall	.+3032   	; 0x3304 <lora_driver_set_device_identifier>
    272c:	e9 d7       	rcall	.+4050   	; 0x3700 <lora_driver_map_return_code_to_text>
    272e:	9f 93       	push	r25
    2730:	8f 93       	push	r24
    2732:	1f 93       	push	r17
    2734:	0f 93       	push	r16
    2736:	85 e1       	ldi	r24, 0x15	; 21
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	9f 93       	push	r25
    273c:	8f 93       	push	r24
    273e:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2742:	a8 01       	movw	r20, r16
    2744:	6a e2       	ldi	r22, 0x2A	; 42
    2746:	73 e0       	ldi	r23, 0x03	; 3
    2748:	8b e4       	ldi	r24, 0x4B	; 75
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	b8 d7       	rcall	.+3952   	; 0x36be <lora_driver_set_otaa_identity>
    274e:	d8 d7       	rcall	.+4016   	; 0x3700 <lora_driver_map_return_code_to_text>
    2750:	9f 93       	push	r25
    2752:	8f 93       	push	r24
    2754:	1f 93       	push	r17
    2756:	0f 93       	push	r16
    2758:	8a e2       	ldi	r24, 0x2A	; 42
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	9f 93       	push	r25
    275e:	8f 93       	push	r24
    2760:	8b e4       	ldi	r24, 0x4B	; 75
    2762:	93 e0       	ldi	r25, 0x03	; 3
    2764:	9f 93       	push	r25
    2766:	8f 93       	push	r24
    2768:	8c e5       	ldi	r24, 0x5C	; 92
    276a:	93 e0       	ldi	r25, 0x03	; 3
    276c:	9f 93       	push	r25
    276e:	8f 93       	push	r24
    2770:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2774:	fa d5       	rcall	.+3060   	; 0x336a <lora_driver_save_mac>
    2776:	c4 d7       	rcall	.+3976   	; 0x3700 <lora_driver_map_return_code_to_text>
    2778:	9f 93       	push	r25
    277a:	8f 93       	push	r24
    277c:	82 e9       	ldi	r24, 0x92	; 146
    277e:	93 e0       	ldi	r25, 0x03	; 3
    2780:	9f 93       	push	r25
    2782:	8f 93       	push	r24
    2784:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	ab d6       	rcall	.+3414   	; 0x34ec <lora_driver_set_adaptive_data_rate>
    2796:	b4 d7       	rcall	.+3944   	; 0x3700 <lora_driver_map_return_code_to_text>
    2798:	9f 93       	push	r25
    279a:	8f 93       	push	r24
    279c:	81 ea       	ldi	r24, 0xA1	; 161
    279e:	93 e0       	ldi	r25, 0x03	; 3
    27a0:	9f 93       	push	r25
    27a2:	8f 93       	push	r24
    27a4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	05 e0       	ldi	r16, 0x05	; 5
    27b2:	10 e0       	ldi	r17, 0x00	; 0
    27b4:	0f 2e       	mov	r0, r31
    27b6:	f2 ec       	ldi	r31, 0xC2	; 194
    27b8:	ef 2e       	mov	r14, r31
    27ba:	f3 e0       	ldi	r31, 0x03	; 3
    27bc:	ff 2e       	mov	r15, r31
    27be:	f0 2d       	mov	r31, r0
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	d9 d5       	rcall	.+2994   	; 0x3376 <lora_driver_join>
    27c4:	d8 2e       	mov	r13, r24
    27c6:	9c d7       	rcall	.+3896   	; 0x3700 <lora_driver_map_return_code_to_text>
    27c8:	9f 93       	push	r25
    27ca:	8f 93       	push	r24
    27cc:	1f 93       	push	r17
    27ce:	0f 93       	push	r16
    27d0:	ff 92       	push	r15
    27d2:	ef 92       	push	r14
    27d4:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	98 e0       	ldi	r25, 0x08	; 8
    27e6:	d9 16       	cp	r13, r25
    27e8:	09 f4       	brne	.+2      	; 0x27ec <lora_handler_task+0x136>
    27ea:	8f c0       	rjmp	.+286    	; 0x290a <lora_handler_task+0x254>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	05 d4       	rcall	.+2058   	; 0x2ffa <led_long_puls>
    27f0:	8f e2       	ldi	r24, 0x2F	; 47
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	28 d9       	rcall	.-3504   	; 0x1a46 <vTaskDelay>
    27f6:	01 50       	subi	r16, 0x01	; 1
    27f8:	11 09       	sbc	r17, r1
    27fa:	11 f7       	brne	.-60     	; 0x27c0 <lora_handler_task+0x10a>
    27fc:	81 c0       	rjmp	.+258    	; 0x2900 <lora_handler_task+0x24a>
    27fe:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    2802:	fd cf       	rjmp	.-6      	; 0x27fe <lora_handler_task+0x148>
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <xTempSemaphore>
    2812:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <xTempSemaphore+0x1>
    2816:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <xHumSemaphore>
    2828:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <xHumSemaphore+0x1>
    282c:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <xCo2Semaphore>
    283e:	90 91 d8 09 	lds	r25, 0x09D8	; 0x8009d8 <xCo2Semaphore+0x1>
    2842:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    2846:	80 e4       	ldi	r24, 0x40	; 64
    2848:	9e e7       	ldi	r25, 0x7E	; 126
    284a:	fd d8       	rcall	.-3590   	; 0x1a46 <vTaskDelay>
    284c:	4f ef       	ldi	r20, 0xFF	; 255
    284e:	5f ef       	ldi	r21, 0xFF	; 255
    2850:	be 01       	movw	r22, r28
    2852:	6d 5f       	subi	r22, 0xFD	; 253
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	80 91 cd 09 	lds	r24, 0x09CD	; 0x8009cd <temperature_queue>
    285a:	90 91 ce 09 	lds	r25, 0x09CE	; 0x8009ce <temperature_queue+0x1>
    285e:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
    2862:	4f ef       	ldi	r20, 0xFF	; 255
    2864:	5f ef       	ldi	r21, 0xFF	; 255
    2866:	be 01       	movw	r22, r28
    2868:	6f 5f       	subi	r22, 0xFF	; 255
    286a:	7f 4f       	sbci	r23, 0xFF	; 255
    286c:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <humidity_queue>
    2870:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <humidity_queue+0x1>
    2874:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
    2878:	4f ef       	ldi	r20, 0xFF	; 255
    287a:	5f ef       	ldi	r21, 0xFF	; 255
    287c:	be 01       	movw	r22, r28
    287e:	6b 5f       	subi	r22, 0xFB	; 251
    2880:	7f 4f       	sbci	r23, 0xFF	; 255
    2882:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <co2_queue>
    2886:	90 91 da 09 	lds	r25, 0x09DA	; 0x8009da <co2_queue+0x1>
    288a:	0e 94 87 06 	call	0xd0e	; 0xd0e <xQueueReceive>
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	8f 93       	push	r24
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	8f 93       	push	r24
    2896:	9f 92       	push	r9
    2898:	8f 92       	push	r8
    289a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	8f 93       	push	r24
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	8f 93       	push	r24
    28a6:	bf 92       	push	r11
    28a8:	af 92       	push	r10
    28aa:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	8f 93       	push	r24
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	8f 93       	push	r24
    28b6:	df 92       	push	r13
    28b8:	cf 92       	push	r12
    28ba:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    28be:	f8 01       	movw	r30, r16
    28c0:	61 82       	std	Z+1, r6	; 0x01
    28c2:	70 82       	st	Z, r7
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	92 83       	std	Z+2, r25	; 0x02
    28ca:	83 83       	std	Z+3, r24	; 0x03
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	94 83       	std	Z+4, r25	; 0x04
    28d2:	85 83       	std	Z+5, r24	; 0x05
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	96 83       	std	Z+6, r25	; 0x06
    28da:	87 83       	std	Z+7, r24	; 0x07
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	9f d3       	rcall	.+1854   	; 0x301e <led_short_puls>
    28e0:	b8 01       	movw	r22, r16
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	6b d5       	rcall	.+2774   	; 0x33bc <lora_driver_sent_upload_message>
    28e6:	0c d7       	rcall	.+3608   	; 0x3700 <lora_driver_map_return_code_to_text>
    28e8:	9f 93       	push	r25
    28ea:	8f 93       	push	r24
    28ec:	ff 92       	push	r15
    28ee:	ef 92       	push	r14
    28f0:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	82 cf       	rjmp	.-252    	; 0x2804 <lora_handler_task+0x14e>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	6c d3       	rcall	.+1752   	; 0x2fdc <led_led_off>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	34 d3       	rcall	.+1640   	; 0x2f70 <led_fast_blink>
    2908:	7a cf       	rjmp	.-268    	; 0x27fe <lora_handler_task+0x148>
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	58 d3       	rcall	.+1712   	; 0x2fbe <led_led_on>
    290e:	1a 82       	std	Y+2, r1	; 0x02
    2910:	19 82       	std	Y+1, r1	; 0x01
    2912:	1c 82       	std	Y+4, r1	; 0x04
    2914:	1b 82       	std	Y+3, r1	; 0x03
    2916:	1e 82       	std	Y+6, r1	; 0x06
    2918:	1d 82       	std	Y+5, r1	; 0x05
    291a:	0f 2e       	mov	r0, r31
    291c:	f2 ee       	ldi	r31, 0xE2	; 226
    291e:	8f 2e       	mov	r8, r31
    2920:	f3 e0       	ldi	r31, 0x03	; 3
    2922:	9f 2e       	mov	r9, r31
    2924:	f0 2d       	mov	r31, r0
    2926:	0f 2e       	mov	r0, r31
    2928:	fe ef       	ldi	r31, 0xFE	; 254
    292a:	af 2e       	mov	r10, r31
    292c:	f3 e0       	ldi	r31, 0x03	; 3
    292e:	bf 2e       	mov	r11, r31
    2930:	f0 2d       	mov	r31, r0
    2932:	0f 2e       	mov	r0, r31
    2934:	f7 e1       	ldi	r31, 0x17	; 23
    2936:	cf 2e       	mov	r12, r31
    2938:	f4 e0       	ldi	r31, 0x04	; 4
    293a:	df 2e       	mov	r13, r31
    293c:	f0 2d       	mov	r31, r0
    293e:	06 ef       	ldi	r16, 0xF6	; 246
    2940:	17 e0       	ldi	r17, 0x07	; 7
    2942:	0f 2e       	mov	r0, r31
    2944:	f6 e0       	ldi	r31, 0x06	; 6
    2946:	6f 2e       	mov	r6, r31
    2948:	f0 2d       	mov	r31, r0
    294a:	68 94       	set
    294c:	77 24       	eor	r7, r7
    294e:	71 f8       	bld	r7, 1
    2950:	0f 2e       	mov	r0, r31
    2952:	fb e2       	ldi	r31, 0x2B	; 43
    2954:	ef 2e       	mov	r14, r31
    2956:	f4 e0       	ldi	r31, 0x04	; 4
    2958:	ff 2e       	mov	r15, r31
    295a:	f0 2d       	mov	r31, r0
    295c:	53 cf       	rjmp	.-346    	; 0x2804 <lora_handler_task+0x14e>

0000295e <task_read_co2>:
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	80 d8       	rcall	.-3840   	; 0x1a68 <vTaskSetApplicationTaskTag>
    2968:	c0 e4       	ldi	r28, 0x40	; 64
    296a:	d4 e0       	ldi	r29, 0x04	; 4
    296c:	6f ef       	ldi	r22, 0xFF	; 255
    296e:	7f ef       	ldi	r23, 0xFF	; 255
    2970:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <xCo2Semaphore>
    2974:	90 91 d8 09 	lds	r25, 0x09D8	; 0x8009d8 <xCo2Semaphore+0x1>
    2978:	0e 94 10 07 	call	0xe20	; 0xe20 <xQueueSemaphoreTake>
    297c:	88 23       	and	r24, r24
    297e:	b1 f3       	breq	.-20     	; 0x296c <task_read_co2+0xe>
    2980:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <mh_z19_take_meassuring>
    2984:	8c e3       	ldi	r24, 0x3C	; 60
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	5e d8       	rcall	.-3908   	; 0x1a46 <vTaskDelay>
    298a:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <mainPpm+0x1>
    298e:	8f 93       	push	r24
    2990:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <mainPpm>
    2994:	8f 93       	push	r24
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	6f ec       	ldi	r22, 0xCF	; 207
    29a6:	79 e0       	ldi	r23, 0x09	; 9
    29a8:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <co2_queue>
    29ac:	90 91 da 09 	lds	r25, 0x09DA	; 0x8009da <co2_queue+0x1>
    29b0:	0e 94 a2 05 	call	0xb44	; 0xb44 <xQueueGenericSend>
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	d7 cf       	rjmp	.-82     	; 0x296c <task_read_co2+0xe>

000029be <innitialise>:
    29be:	84 e1       	ldi	r24, 0x14	; 20
    29c0:	a8 d0       	rcall	.+336    	; 0x2b12 <hal_create>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	21 d4       	rcall	.+2114   	; 0x3208 <lora_driver_create>
    29c6:	10 92 d0 09 	sts	0x09D0, r1	; 0x8009d0 <mainPpm+0x1>
    29ca:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <mainPpm>
    29ce:	6a e9       	ldi	r22, 0x9A	; 154
    29d0:	72 e1       	ldi	r23, 0x12	; 18
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	be d7       	rcall	.+3964   	; 0x3952 <mh_z19_create>
    29d6:	fc d0       	rcall	.+504    	; 0x2bd0 <hih8120Create>
    29d8:	81 11       	cpse	r24, r1
    29da:	0d c0       	rjmp	.+26     	; 0x29f6 <innitialise+0x38>
    29dc:	f9 d0       	rcall	.+498    	; 0x2bd0 <hih8120Create>
    29de:	1f 92       	push	r1
    29e0:	8f 93       	push	r24
    29e2:	85 e5       	ldi	r24, 0x55	; 85
    29e4:	94 e0       	ldi	r25, 0x04	; 4
    29e6:	9f 93       	push	r25
    29e8:	8f 93       	push	r24
    29ea:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	08 95       	ret

000029f8 <create_tasks_and_semaphores>:
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <xTempSemaphore>
    2a02:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <xTempSemaphore+0x1>
    2a06:	89 2b       	or	r24, r25
    2a08:	39 f4       	brne	.+14     	; 0x2a18 <create_tasks_and_semaphores+0x20>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	0e 94 37 06 	call	0xc6e	; 0xc6e <xQueueCreateMutex>
    2a10:	90 93 d2 09 	sts	0x09D2, r25	; 0x8009d2 <xTempSemaphore+0x1>
    2a14:	80 93 d1 09 	sts	0x09D1, r24	; 0x8009d1 <xTempSemaphore>
    2a18:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <xHumSemaphore>
    2a1c:	90 91 cc 09 	lds	r25, 0x09CC	; 0x8009cc <xHumSemaphore+0x1>
    2a20:	89 2b       	or	r24, r25
    2a22:	39 f4       	brne	.+14     	; 0x2a32 <create_tasks_and_semaphores+0x3a>
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	0e 94 37 06 	call	0xc6e	; 0xc6e <xQueueCreateMutex>
    2a2a:	90 93 cc 09 	sts	0x09CC, r25	; 0x8009cc <xHumSemaphore+0x1>
    2a2e:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <xHumSemaphore>
    2a32:	80 91 d7 09 	lds	r24, 0x09D7	; 0x8009d7 <xCo2Semaphore>
    2a36:	90 91 d8 09 	lds	r25, 0x09D8	; 0x8009d8 <xCo2Semaphore+0x1>
    2a3a:	89 2b       	or	r24, r25
    2a3c:	39 f4       	brne	.+14     	; 0x2a4c <create_tasks_and_semaphores+0x54>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	0e 94 37 06 	call	0xc6e	; 0xc6e <xQueueCreateMutex>
    2a44:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <xCo2Semaphore+0x1>
    2a48:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <xCo2Semaphore>
    2a4c:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <xSharedSensorSemaphore>
    2a50:	90 91 d6 09 	lds	r25, 0x09D6	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    2a54:	89 2b       	or	r24, r25
    2a56:	39 f4       	brne	.+14     	; 0x2a66 <create_tasks_and_semaphores+0x6e>
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	0e 94 37 06 	call	0xc6e	; 0xc6e <xQueueCreateMutex>
    2a5e:	90 93 d6 09 	sts	0x09D6, r25	; 0x8009d6 <xSharedSensorSemaphore+0x1>
    2a62:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <xSharedSensorSemaphore>
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	62 e0       	ldi	r22, 0x02	; 2
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	0e 94 74 05 	call	0xae8	; 0xae8 <xQueueGenericCreate>
    2a70:	90 93 ce 09 	sts	0x09CE, r25	; 0x8009ce <temperature_queue+0x1>
    2a74:	80 93 cd 09 	sts	0x09CD, r24	; 0x8009cd <temperature_queue>
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	62 e0       	ldi	r22, 0x02	; 2
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	0e 94 74 05 	call	0xae8	; 0xae8 <xQueueGenericCreate>
    2a82:	90 93 d4 09 	sts	0x09D4, r25	; 0x8009d4 <humidity_queue+0x1>
    2a86:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <humidity_queue>
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	62 e0       	ldi	r22, 0x02	; 2
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 74 05 	call	0xae8	; 0xae8 <xQueueGenericCreate>
    2a94:	90 93 da 09 	sts	0x09DA, r25	; 0x8009da <co2_queue+0x1>
    2a98:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <co2_queue>
    2a9c:	e1 2c       	mov	r14, r1
    2a9e:	f1 2c       	mov	r15, r1
    2aa0:	03 e0       	ldi	r16, 0x03	; 3
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 ec       	ldi	r20, 0xC0	; 192
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	6d e7       	ldi	r22, 0x7D	; 125
    2aac:	74 e0       	ldi	r23, 0x04	; 4
    2aae:	8f e9       	ldi	r24, 0x9F	; 159
    2ab0:	92 e1       	ldi	r25, 0x12	; 18
    2ab2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <xTaskCreate>
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 ec       	ldi	r20, 0xC0	; 192
    2abc:	50 e0       	ldi	r21, 0x00	; 0
    2abe:	66 e8       	ldi	r22, 0x86	; 134
    2ac0:	74 e0       	ldi	r23, 0x04	; 4
    2ac2:	8d ef       	ldi	r24, 0xFD	; 253
    2ac4:	92 e1       	ldi	r25, 0x12	; 18
    2ac6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <xTaskCreate>
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 ec       	ldi	r20, 0xC0	; 192
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	6e e8       	ldi	r22, 0x8E	; 142
    2ad4:	74 e0       	ldi	r23, 0x04	; 4
    2ad6:	8f ea       	ldi	r24, 0xAF	; 175
    2ad8:	94 e1       	ldi	r25, 0x14	; 20
    2ada:	0e 94 8b 0a 	call	0x1516	; 0x1516 <xTaskCreate>
    2ade:	02 e0       	ldi	r16, 0x02	; 2
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 ec       	ldi	r20, 0xC0	; 192
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	66 e9       	ldi	r22, 0x96	; 150
    2aea:	74 e0       	ldi	r23, 0x04	; 4
    2aec:	8b e5       	ldi	r24, 0x5B	; 91
    2aee:	93 e1       	ldi	r25, 0x13	; 19
    2af0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <xTaskCreate>
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	08 95       	ret

00002afc <main>:

/*-----------------------------------------------------------*/
int main(void)
{

	stdioCreate(0);
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	0e 94 a3 20 	call	0x4146	; 0x4146 <stdioCreate>

	sei();
    2b02:	78 94       	sei

	innitialise();
    2b04:	5c df       	rcall	.-328    	; 0x29be <innitialise>

	trace_init();
    2b06:	0e 94 28 02 	call	0x450	; 0x450 <trace_init>

	create_tasks_and_semaphores();
    2b0a:	76 df       	rcall	.-276    	; 0x29f8 <create_tasks_and_semaphores>

	vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    2b0c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vTaskStartScheduler>
    2b10:	ff cf       	rjmp	.-2      	; 0x2b10 <main+0x14>

00002b12 <hal_create>:
    2b12:	eb ed       	ldi	r30, 0xDB	; 219
    2b14:	f9 e0       	ldi	r31, 0x09	; 9
    2b16:	21 e0       	ldi	r18, 0x01	; 1
    2b18:	3c e1       	ldi	r19, 0x1C	; 28
    2b1a:	31 83       	std	Z+1, r19	; 0x01
    2b1c:	20 83       	st	Z, r18
    2b1e:	24 e0       	ldi	r18, 0x04	; 4
    2b20:	3c e1       	ldi	r19, 0x1C	; 28
    2b22:	33 83       	std	Z+3, r19	; 0x03
    2b24:	22 83       	std	Z+2, r18	; 0x02
    2b26:	2f e0       	ldi	r18, 0x0F	; 15
    2b28:	3c e1       	ldi	r19, 0x1C	; 28
    2b2a:	35 83       	std	Z+5, r19	; 0x05
    2b2c:	24 83       	std	Z+4, r18	; 0x04
    2b2e:	23 e1       	ldi	r18, 0x13	; 19
    2b30:	3c e1       	ldi	r19, 0x1C	; 28
    2b32:	37 83       	std	Z+7, r19	; 0x07
    2b34:	26 83       	std	Z+6, r18	; 0x06
    2b36:	29 e1       	ldi	r18, 0x19	; 25
    2b38:	3c e1       	ldi	r19, 0x1C	; 28
    2b3a:	31 87       	std	Z+9, r19	; 0x09
    2b3c:	20 87       	std	Z+8, r18	; 0x08
    2b3e:	25 e2       	ldi	r18, 0x25	; 37
    2b40:	3c e1       	ldi	r19, 0x1C	; 28
    2b42:	33 87       	std	Z+11, r19	; 0x0b
    2b44:	22 87       	std	Z+10, r18	; 0x0a
    2b46:	2a e2       	ldi	r18, 0x2A	; 42
    2b48:	3c e1       	ldi	r19, 0x1C	; 28
    2b4a:	35 87       	std	Z+13, r19	; 0x0d
    2b4c:	24 87       	std	Z+12, r18	; 0x0c
    2b4e:	26 e3       	ldi	r18, 0x36	; 54
    2b50:	3c e1       	ldi	r19, 0x1C	; 28
    2b52:	37 87       	std	Z+15, r19	; 0x0f
    2b54:	26 87       	std	Z+14, r18	; 0x0e
    2b56:	26 e1       	ldi	r18, 0x16	; 22
    2b58:	3c e1       	ldi	r19, 0x1C	; 28
    2b5a:	31 8b       	std	Z+17, r19	; 0x11
    2b5c:	20 8b       	std	Z+16, r18	; 0x10
    2b5e:	2b e3       	ldi	r18, 0x3B	; 59
    2b60:	3c e1       	ldi	r19, 0x1C	; 28
    2b62:	33 8b       	std	Z+19, r19	; 0x13
    2b64:	22 8b       	std	Z+18, r18	; 0x12
    2b66:	28 e4       	ldi	r18, 0x48	; 72
    2b68:	3c e1       	ldi	r19, 0x1C	; 28
    2b6a:	35 8b       	std	Z+21, r19	; 0x15
    2b6c:	24 8b       	std	Z+20, r18	; 0x14
    2b6e:	68 2f       	mov	r22, r24
    2b70:	cf 01       	movw	r24, r30
    2b72:	52 c1       	rjmp	.+676    	; 0x2e18 <led_create>
    2b74:	08 95       	ret

00002b76 <_hihTwiCallback>:
    2b76:	65 30       	cpi	r22, 0x05	; 5
    2b78:	f1 f4       	brne	.+60     	; 0x2bb6 <_hihTwiCallback+0x40>
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8f 73       	andi	r24, 0x3F	; 63
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	98 2f       	mov	r25, r24
    2b84:	88 27       	eor	r24, r24
    2b86:	21 81       	ldd	r18, Z+1	; 0x01
    2b88:	82 2b       	or	r24, r18
    2b8a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2b8e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2b92:	82 81       	ldd	r24, Z+2	; 0x02
    2b94:	f0 e4       	ldi	r31, 0x40	; 64
    2b96:	8f 9f       	mul	r24, r31
    2b98:	c0 01       	movw	r24, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	fa 01       	movw	r30, r20
    2b9e:	23 81       	ldd	r18, Z+3	; 0x03
    2ba0:	26 95       	lsr	r18
    2ba2:	26 95       	lsr	r18
    2ba4:	82 2b       	or	r24, r18
    2ba6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2baa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <_measuringIsReady>
    2bb4:	08 95       	ret
    2bb6:	64 30       	cpi	r22, 0x04	; 4
    2bb8:	51 f0       	breq	.+20     	; 0x2bce <_hihTwiCallback+0x58>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e4       	ldi	r25, 0x40	; 64
    2bbe:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2bc2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2bc6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2bca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2bce:	08 95       	ret

00002bd0 <hih8120Create>:
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	0b eb       	ldi	r16, 0xBB	; 187
    2bd6:	15 e1       	ldi	r17, 0x15	; 21
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	34 e2       	ldi	r19, 0x24	; 36
    2bdc:	44 ef       	ldi	r20, 0xF4	; 244
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	87 e2       	ldi	r24, 0x27	; 39
    2be4:	0e 94 dd 20 	call	0x41ba	; 0x41ba <twiCreate>
    2be8:	90 93 72 08 	sts	0x0872, r25	; 0x800872 <_hih8120Handler+0x1>
    2bec:	80 93 71 08 	sts	0x0871, r24	; 0x800871 <_hih8120Handler>
    2bf0:	21 e0       	ldi	r18, 0x01	; 1
    2bf2:	89 2b       	or	r24, r25
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <hih8120Create+0x28>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	82 2f       	mov	r24, r18
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	08 95       	ret

00002c00 <hih8120Wakeup>:
    2c00:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <_hih8120Handler>
    2c04:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <_hih8120Handler+0x1>
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	59 f0       	breq	.+22     	; 0x2c22 <hih8120Wakeup+0x22>
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	60 e0       	ldi	r22, 0x00	; 0
    2c10:	70 e0       	ldi	r23, 0x00	; 0
    2c12:	0e 94 2e 21 	call	0x425c	; 0x425c <twiTransmit>
    2c16:	84 30       	cpi	r24, 0x04	; 4
    2c18:	31 f4       	brne	.+12     	; 0x2c26 <hih8120Wakeup+0x26>
    2c1a:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <_measuringIsReady>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	08 95       	ret
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	08 95       	ret
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	08 95       	ret

00002c2a <hih8120Meassure>:
    2c2a:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <_hih8120Handler>
    2c2e:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <_hih8120Handler+0x1>
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	39 f0       	breq	.+14     	; 0x2c44 <hih8120Meassure+0x1a>
    2c36:	64 e0       	ldi	r22, 0x04	; 4
    2c38:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <twiReceive>
    2c3c:	85 30       	cpi	r24, 0x05	; 5
    2c3e:	21 f0       	breq	.+8      	; 0x2c48 <hih8120Meassure+0x1e>
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	08 95       	ret
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	08 95       	ret
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	08 95       	ret

00002c4c <hih8120GetHumidity>:
    2c4c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2c50:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 84 23 	call	0x4708	; 0x4708 <__floatunsisf>
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	48 ec       	ldi	r20, 0xC8	; 200
    2c62:	52 e4       	ldi	r21, 0x42	; 66
    2c64:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsf3>
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	38 ef       	ldi	r19, 0xF8	; 248
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	56 e4       	ldi	r21, 0x46	; 70
    2c70:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__divsf3>
    2c74:	08 95       	ret

00002c76 <hih8120GetHumidityPercent_x10>:
    2c76:	ea df       	rcall	.-44     	; 0x2c4c <hih8120GetHumidity>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsf3>
    2c84:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__fixunssfsi>
    2c88:	cb 01       	movw	r24, r22
    2c8a:	08 95       	ret

00002c8c <hih8120GetTemperature>:
    2c8c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2c90:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 84 23 	call	0x4708	; 0x4708 <__floatunsisf>
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	45 e2       	ldi	r20, 0x25	; 37
    2ca2:	53 e4       	ldi	r21, 0x43	; 67
    2ca4:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsf3>
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	38 ef       	ldi	r19, 0xF8	; 248
    2cac:	4f e7       	ldi	r20, 0x7F	; 127
    2cae:	56 e4       	ldi	r21, 0x46	; 70
    2cb0:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <__divsf3>
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	52 e4       	ldi	r21, 0x42	; 66
    2cbc:	0c 94 86 22 	jmp	0x450c	; 0x450c <__subsf3>
    2cc0:	08 95       	ret

00002cc2 <hih8120GetTemperature_x10>:
    2cc2:	e4 df       	rcall	.-56     	; 0x2c8c <hih8120GetTemperature>
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e2       	ldi	r20, 0x20	; 32
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsf3>
    2cd0:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__fixsfsi>
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	08 95       	ret

00002cd8 <_turn_off>:
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	fc 01       	movw	r30, r24
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	e8 0f       	add	r30, r24
    2ce6:	f9 1f       	adc	r31, r25
    2ce8:	ee 0f       	add	r30, r30
    2cea:	ff 1f       	adc	r31, r31
    2cec:	ed 58       	subi	r30, 0x8D	; 141
    2cee:	f7 4f       	sbci	r31, 0xF7	; 247
    2cf0:	23 81       	ldd	r18, Z+3	; 0x03
    2cf2:	21 11       	cpse	r18, r1
    2cf4:	0a c0       	rjmp	.+20     	; 0x2d0a <_turn_off+0x32>
    2cf6:	ef 01       	movw	r28, r30
    2cf8:	e0 91 e3 09 	lds	r30, 0x09E3	; 0x8009e3 <register_access+0x8>
    2cfc:	f0 91 e4 09 	lds	r31, 0x09E4	; 0x8009e4 <register_access+0x9>
    2d00:	6a 81       	ldd	r22, Y+2	; 0x02
    2d02:	88 81       	ld	r24, Y
    2d04:	99 81       	ldd	r25, Y+1	; 0x01
    2d06:	19 95       	eicall
    2d08:	12 c0       	rjmp	.+36     	; 0x2d2e <_turn_off+0x56>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	aa 0f       	add	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	ed 01       	movw	r28, r26
    2d12:	c8 0f       	add	r28, r24
    2d14:	d9 1f       	adc	r29, r25
    2d16:	cc 0f       	add	r28, r28
    2d18:	dd 1f       	adc	r29, r29
    2d1a:	cd 58       	subi	r28, 0x8D	; 141
    2d1c:	d7 4f       	sbci	r29, 0xF7	; 247
    2d1e:	e0 91 ed 09 	lds	r30, 0x09ED	; 0x8009ed <register_access+0x12>
    2d22:	f0 91 ee 09 	lds	r31, 0x09EE	; 0x8009ee <register_access+0x13>
    2d26:	6a 81       	ldd	r22, Y+2	; 0x02
    2d28:	88 81       	ld	r24, Y
    2d2a:	99 81       	ldd	r25, Y+1	; 0x01
    2d2c:	19 95       	eicall
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	08 95       	ret

00002d34 <_turn_on>:
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	ee 0f       	add	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	e8 0f       	add	r30, r24
    2d42:	f9 1f       	adc	r31, r25
    2d44:	ee 0f       	add	r30, r30
    2d46:	ff 1f       	adc	r31, r31
    2d48:	ed 58       	subi	r30, 0x8D	; 141
    2d4a:	f7 4f       	sbci	r31, 0xF7	; 247
    2d4c:	23 81       	ldd	r18, Z+3	; 0x03
    2d4e:	21 11       	cpse	r18, r1
    2d50:	0a c0       	rjmp	.+20     	; 0x2d66 <_turn_on+0x32>
    2d52:	ef 01       	movw	r28, r30
    2d54:	e0 91 ed 09 	lds	r30, 0x09ED	; 0x8009ed <register_access+0x12>
    2d58:	f0 91 ee 09 	lds	r31, 0x09EE	; 0x8009ee <register_access+0x13>
    2d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    2d5e:	88 81       	ld	r24, Y
    2d60:	99 81       	ldd	r25, Y+1	; 0x01
    2d62:	19 95       	eicall
    2d64:	12 c0       	rjmp	.+36     	; 0x2d8a <_turn_on+0x56>
    2d66:	dc 01       	movw	r26, r24
    2d68:	aa 0f       	add	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	ed 01       	movw	r28, r26
    2d6e:	c8 0f       	add	r28, r24
    2d70:	d9 1f       	adc	r29, r25
    2d72:	cc 0f       	add	r28, r28
    2d74:	dd 1f       	adc	r29, r29
    2d76:	cd 58       	subi	r28, 0x8D	; 141
    2d78:	d7 4f       	sbci	r29, 0xF7	; 247
    2d7a:	e0 91 e3 09 	lds	r30, 0x09E3	; 0x8009e3 <register_access+0x8>
    2d7e:	f0 91 e4 09 	lds	r31, 0x09E4	; 0x8009e4 <register_access+0x9>
    2d82:	6a 81       	ldd	r22, Y+2	; 0x02
    2d84:	88 81       	ld	r24, Y
    2d86:	99 81       	ldd	r25, Y+1	; 0x01
    2d88:	19 95       	eicall
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	08 95       	ret

00002d90 <_hal_led_task>:
    2d90:	8f e9       	ldi	r24, 0x9F	; 159
    2d92:	94 e0       	ldi	r25, 0x04	; 4
    2d94:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <puts>
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fb ed       	ldi	r31, 0xDB	; 219
    2d9c:	cf 2e       	mov	r12, r31
    2d9e:	f9 e0       	ldi	r31, 0x09	; 9
    2da0:	df 2e       	mov	r13, r31
    2da2:	f0 2d       	mov	r31, r0
    2da4:	04 e0       	ldi	r16, 0x04	; 4
    2da6:	c3 e7       	ldi	r28, 0x73	; 115
    2da8:	d8 e0       	ldi	r29, 0x08	; 8
    2daa:	10 e0       	ldi	r17, 0x00	; 0
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	69 f0       	breq	.+26     	; 0x2dcc <_hal_led_task+0x3c>
    2db2:	e8 f0       	brcs	.+58     	; 0x2dee <_hal_led_task+0x5e>
    2db4:	82 30       	cpi	r24, 0x02	; 2
    2db6:	39 f5       	brne	.+78     	; 0x2e06 <_hal_led_task+0x76>
    2db8:	d6 01       	movw	r26, r12
    2dba:	1c 96       	adiw	r26, 0x0c	; 12
    2dbc:	ed 91       	ld	r30, X+
    2dbe:	fc 91       	ld	r31, X
    2dc0:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc2:	6a 81       	ldd	r22, Y+2	; 0x02
    2dc4:	88 81       	ld	r24, Y
    2dc6:	99 81       	ldd	r25, Y+1	; 0x01
    2dc8:	19 95       	eicall
    2dca:	1d c0       	rjmp	.+58     	; 0x2e06 <_hal_led_task+0x76>
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	8a 30       	cpi	r24, 0x0A	; 10
    2dd2:	10 f4       	brcc	.+4      	; 0x2dd8 <_hal_led_task+0x48>
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	17 c0       	rjmp	.+46     	; 0x2e06 <_hal_led_task+0x76>
    2dd8:	1d 82       	std	Y+5, r1	; 0x05
    2dda:	d6 01       	movw	r26, r12
    2ddc:	1c 96       	adiw	r26, 0x0c	; 12
    2dde:	ed 91       	ld	r30, X+
    2de0:	fc 91       	ld	r31, X
    2de2:	1d 97       	sbiw	r26, 0x0d	; 13
    2de4:	6a 81       	ldd	r22, Y+2	; 0x02
    2de6:	88 81       	ld	r24, Y
    2de8:	99 81       	ldd	r25, Y+1	; 0x01
    2dea:	19 95       	eicall
    2dec:	0c c0       	rjmp	.+24     	; 0x2e06 <_hal_led_task+0x76>
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	88 23       	and	r24, r24
    2df2:	31 f0       	breq	.+12     	; 0x2e00 <_hal_led_task+0x70>
    2df4:	81 2f       	mov	r24, r17
    2df6:	9e df       	rcall	.-196    	; 0x2d34 <_turn_on>
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	81 50       	subi	r24, 0x01	; 1
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <_hal_led_task+0x76>
    2e00:	0c 83       	std	Y+4, r16	; 0x04
    2e02:	81 2f       	mov	r24, r17
    2e04:	69 df       	rcall	.-302    	; 0x2cd8 <_turn_off>
    2e06:	1f 5f       	subi	r17, 0xFF	; 255
    2e08:	26 96       	adiw	r28, 0x06	; 6
    2e0a:	14 30       	cpi	r17, 0x04	; 4
    2e0c:	79 f6       	brne	.-98     	; 0x2dac <_hal_led_task+0x1c>
    2e0e:	85 e0       	ldi	r24, 0x05	; 5
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <vTaskDelay>
    2e16:	c7 cf       	rjmp	.-114    	; 0x2da6 <_hal_led_task+0x16>

00002e18 <led_create>:
    2e18:	cf 92       	push	r12
    2e1a:	df 92       	push	r13
    2e1c:	ef 92       	push	r14
    2e1e:	ff 92       	push	r15
    2e20:	0f 93       	push	r16
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	06 2f       	mov	r16, r22
    2e2a:	0f 2e       	mov	r0, r31
    2e2c:	fb ed       	ldi	r31, 0xDB	; 219
    2e2e:	ef 2e       	mov	r14, r31
    2e30:	f9 e0       	ldi	r31, 0x09	; 9
    2e32:	ff 2e       	mov	r15, r31
    2e34:	f0 2d       	mov	r31, r0
    2e36:	d7 01       	movw	r26, r14
    2e38:	18 96       	adiw	r26, 0x08	; 8
    2e3a:	ed 91       	ld	r30, X+
    2e3c:	fc 91       	ld	r31, X
    2e3e:	19 97       	sbiw	r26, 0x09	; 9
    2e40:	66 e0       	ldi	r22, 0x06	; 6
    2e42:	87 e2       	ldi	r24, 0x27	; 39
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	19 95       	eicall
    2e48:	c3 e7       	ldi	r28, 0x73	; 115
    2e4a:	d8 e0       	ldi	r29, 0x08	; 8
    2e4c:	0f 2e       	mov	r0, r31
    2e4e:	f8 e2       	ldi	r31, 0x28	; 40
    2e50:	cf 2e       	mov	r12, r31
    2e52:	d1 2c       	mov	r13, r1
    2e54:	f0 2d       	mov	r31, r0
    2e56:	d9 82       	std	Y+1, r13	; 0x01
    2e58:	c8 82       	st	Y, r12
    2e5a:	86 e0       	ldi	r24, 0x06	; 6
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	1b 82       	std	Y+3, r1	; 0x03
    2e60:	14 e0       	ldi	r17, 0x04	; 4
    2e62:	1c 83       	std	Y+4, r17	; 0x04
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	38 df       	rcall	.-400    	; 0x2cd8 <_turn_off>
    2e68:	d7 01       	movw	r26, r14
    2e6a:	18 96       	adiw	r26, 0x08	; 8
    2e6c:	ed 91       	ld	r30, X+
    2e6e:	fc 91       	ld	r31, X
    2e70:	19 97       	sbiw	r26, 0x09	; 9
    2e72:	67 e0       	ldi	r22, 0x07	; 7
    2e74:	87 e2       	ldi	r24, 0x27	; 39
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	19 95       	eicall
    2e7a:	df 82       	std	Y+7, r13	; 0x07
    2e7c:	ce 82       	std	Y+6, r12	; 0x06
    2e7e:	87 e0       	ldi	r24, 0x07	; 7
    2e80:	88 87       	std	Y+8, r24	; 0x08
    2e82:	19 86       	std	Y+9, r1	; 0x09
    2e84:	1a 87       	std	Y+10, r17	; 0x0a
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	27 df       	rcall	.-434    	; 0x2cd8 <_turn_off>
    2e8a:	d7 01       	movw	r26, r14
    2e8c:	18 96       	adiw	r26, 0x08	; 8
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	19 97       	sbiw	r26, 0x09	; 9
    2e94:	65 e0       	ldi	r22, 0x05	; 5
    2e96:	83 e3       	ldi	r24, 0x33	; 51
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	19 95       	eicall
    2e9c:	d7 01       	movw	r26, r14
    2e9e:	18 96       	adiw	r26, 0x08	; 8
    2ea0:	ed 91       	ld	r30, X+
    2ea2:	fc 91       	ld	r31, X
    2ea4:	19 97       	sbiw	r26, 0x09	; 9
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	84 e3       	ldi	r24, 0x34	; 52
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	19 95       	eicall
    2eae:	84 e3       	ldi	r24, 0x34	; 52
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9d 87       	std	Y+13, r25	; 0x0d
    2eb4:	8c 87       	std	Y+12, r24	; 0x0c
    2eb6:	85 e0       	ldi	r24, 0x05	; 5
    2eb8:	8e 87       	std	Y+14, r24	; 0x0e
    2eba:	1f 86       	std	Y+15, r1	; 0x0f
    2ebc:	18 8b       	std	Y+16, r17	; 0x10
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	0b df       	rcall	.-490    	; 0x2cd8 <_turn_off>
    2ec2:	d7 01       	movw	r26, r14
    2ec4:	18 96       	adiw	r26, 0x08	; 8
    2ec6:	ed 91       	ld	r30, X+
    2ec8:	fc 91       	ld	r31, X
    2eca:	19 97       	sbiw	r26, 0x09	; 9
    2ecc:	64 e0       	ldi	r22, 0x04	; 4
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	19 95       	eicall
    2ed4:	d7 01       	movw	r26, r14
    2ed6:	18 96       	adiw	r26, 0x08	; 8
    2ed8:	ed 91       	ld	r30, X+
    2eda:	fc 91       	ld	r31, X
    2edc:	19 97       	sbiw	r26, 0x09	; 9
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	82 e0       	ldi	r24, 0x02	; 2
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	19 95       	eicall
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	91 e0       	ldi	r25, 0x01	; 1
    2eea:	9b 8b       	std	Y+19, r25	; 0x13
    2eec:	8a 8b       	std	Y+18, r24	; 0x12
    2eee:	1c 8b       	std	Y+20, r17	; 0x14
    2ef0:	1d 8a       	std	Y+21, r1	; 0x15
    2ef2:	1e 8b       	std	Y+22, r17	; 0x16
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	f0 de       	rcall	.-544    	; 0x2cd8 <_turn_off>
    2ef8:	e1 2c       	mov	r14, r1
    2efa:	f1 2c       	mov	r15, r1
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 ec       	ldi	r20, 0xC0	; 192
    2f02:	50 e0       	ldi	r21, 0x00	; 0
    2f04:	66 eb       	ldi	r22, 0xB6	; 182
    2f06:	74 e0       	ldi	r23, 0x04	; 4
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	96 e1       	ldi	r25, 0x16	; 22
    2f0c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <xTaskCreate>
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	08 95       	ret

00002f22 <led_slow_blink>:
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	c8 2f       	mov	r28, r24
    2f2c:	d0 e0       	ldi	r29, 0x00	; 0
    2f2e:	8e 01       	movw	r16, r28
    2f30:	00 0f       	add	r16, r16
    2f32:	11 1f       	adc	r17, r17
    2f34:	d8 01       	movw	r26, r16
    2f36:	ac 0f       	add	r26, r28
    2f38:	bd 1f       	adc	r27, r29
    2f3a:	aa 0f       	add	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	ad 58       	subi	r26, 0x8D	; 141
    2f40:	b7 4f       	sbci	r27, 0xF7	; 247
    2f42:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <register_access+0xc>
    2f46:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <register_access+0xd>
    2f4a:	12 96       	adiw	r26, 0x02	; 2
    2f4c:	6c 91       	ld	r22, X
    2f4e:	12 97       	sbiw	r26, 0x02	; 2
    2f50:	8d 91       	ld	r24, X+
    2f52:	9c 91       	ld	r25, X
    2f54:	19 95       	eicall
    2f56:	c0 0f       	add	r28, r16
    2f58:	d1 1f       	adc	r29, r17
    2f5a:	cc 0f       	add	r28, r28
    2f5c:	dd 1f       	adc	r29, r29
    2f5e:	cd 58       	subi	r28, 0x8D	; 141
    2f60:	d7 4f       	sbci	r29, 0xF7	; 247
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	8c 83       	std	Y+4, r24	; 0x04
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	08 95       	ret

00002f70 <led_fast_blink>:
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	c8 2f       	mov	r28, r24
    2f7a:	d0 e0       	ldi	r29, 0x00	; 0
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	00 0f       	add	r16, r16
    2f80:	11 1f       	adc	r17, r17
    2f82:	d8 01       	movw	r26, r16
    2f84:	ac 0f       	add	r26, r28
    2f86:	bd 1f       	adc	r27, r29
    2f88:	aa 0f       	add	r26, r26
    2f8a:	bb 1f       	adc	r27, r27
    2f8c:	ad 58       	subi	r26, 0x8D	; 141
    2f8e:	b7 4f       	sbci	r27, 0xF7	; 247
    2f90:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <register_access+0xc>
    2f94:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <register_access+0xd>
    2f98:	12 96       	adiw	r26, 0x02	; 2
    2f9a:	6c 91       	ld	r22, X
    2f9c:	12 97       	sbiw	r26, 0x02	; 2
    2f9e:	8d 91       	ld	r24, X+
    2fa0:	9c 91       	ld	r25, X
    2fa2:	19 95       	eicall
    2fa4:	c0 0f       	add	r28, r16
    2fa6:	d1 1f       	adc	r29, r17
    2fa8:	cc 0f       	add	r28, r28
    2faa:	dd 1f       	adc	r29, r29
    2fac:	cd 58       	subi	r28, 0x8D	; 141
    2fae:	d7 4f       	sbci	r29, 0xF7	; 247
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	8c 83       	std	Y+4, r24	; 0x04
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	08 95       	ret

00002fbe <led_led_on>:
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	ee 0f       	add	r30, r30
    2fc6:	ff 1f       	adc	r31, r31
    2fc8:	e2 0f       	add	r30, r18
    2fca:	f3 1f       	adc	r31, r19
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31
    2fd0:	ed 58       	subi	r30, 0x8D	; 141
    2fd2:	f7 4f       	sbci	r31, 0xF7	; 247
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	94 83       	std	Z+4, r25	; 0x04
    2fd8:	ad ce       	rjmp	.-678    	; 0x2d34 <_turn_on>
    2fda:	08 95       	ret

00002fdc <led_led_off>:
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	f9 01       	movw	r30, r18
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	e2 0f       	add	r30, r18
    2fe8:	f3 1f       	adc	r31, r19
    2fea:	ee 0f       	add	r30, r30
    2fec:	ff 1f       	adc	r31, r31
    2fee:	ed 58       	subi	r30, 0x8D	; 141
    2ff0:	f7 4f       	sbci	r31, 0xF7	; 247
    2ff2:	94 e0       	ldi	r25, 0x04	; 4
    2ff4:	94 83       	std	Z+4, r25	; 0x04
    2ff6:	70 ce       	rjmp	.-800    	; 0x2cd8 <_turn_off>
    2ff8:	08 95       	ret

00002ffa <led_long_puls>:
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	df 01       	movw	r26, r30
    3004:	a8 0f       	add	r26, r24
    3006:	b9 1f       	adc	r27, r25
    3008:	aa 0f       	add	r26, r26
    300a:	bb 1f       	adc	r27, r27
    300c:	ad 58       	subi	r26, 0x8D	; 141
    300e:	b7 4f       	sbci	r27, 0xF7	; 247
    3010:	24 e0       	ldi	r18, 0x04	; 4
    3012:	15 96       	adiw	r26, 0x05	; 5
    3014:	2c 93       	st	X, r18
    3016:	15 97       	sbiw	r26, 0x05	; 5
    3018:	fd 01       	movw	r30, r26
    301a:	14 82       	std	Z+4, r1	; 0x04
    301c:	08 95       	ret

0000301e <led_short_puls>:
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	fc 01       	movw	r30, r24
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	df 01       	movw	r26, r30
    3028:	a8 0f       	add	r26, r24
    302a:	b9 1f       	adc	r27, r25
    302c:	aa 0f       	add	r26, r26
    302e:	bb 1f       	adc	r27, r27
    3030:	ad 58       	subi	r26, 0x8D	; 141
    3032:	b7 4f       	sbci	r27, 0xF7	; 247
    3034:	21 e0       	ldi	r18, 0x01	; 1
    3036:	15 96       	adiw	r26, 0x05	; 5
    3038:	2c 93       	st	X, r18
    303a:	15 97       	sbiw	r26, 0x05	; 5
    303c:	fd 01       	movw	r30, r26
    303e:	14 82       	std	Z+4, r1	; 0x04
    3040:	08 95       	ret

00003042 <_serial_call_back>:
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	1f 92       	push	r1
    304c:	1f 92       	push	r1
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	8c 01       	movw	r16, r24
    3054:	19 82       	std	Y+1, r1	; 0x01
    3056:	2d c0       	rjmp	.+90     	; 0x30b2 <_serial_call_back+0x70>
    3058:	e0 91 ef 08 	lds	r30, 0x08EF	; 0x8008ef <rec_buf_inp.2926>
    305c:	ec 32       	cpi	r30, 0x2C	; 44
    305e:	50 f4       	brcc	.+20     	; 0x3074 <_serial_call_back+0x32>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	8e 0f       	add	r24, r30
    3064:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <rec_buf_inp.2926>
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	e1 5e       	subi	r30, 0xE1	; 225
    306c:	f6 4f       	sbci	r31, 0xF6	; 246
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	80 83       	st	Z, r24
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <_serial_call_back+0x36>
    3074:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <rec_buf_inp.2926>
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	8a 30       	cpi	r24, 0x0A	; 10
    307c:	d1 f4       	brne	.+52     	; 0x30b2 <_serial_call_back+0x70>
    307e:	40 91 ef 08 	lds	r20, 0x08EF	; 0x8008ef <rec_buf_inp.2926>
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	fa 01       	movw	r30, r20
    3086:	e3 5e       	subi	r30, 0xE3	; 227
    3088:	f6 4f       	sbci	r31, 0xF6	; 246
    308a:	10 82       	st	Z, r1
    308c:	41 50       	subi	r20, 0x01	; 1
    308e:	51 09       	sbc	r21, r1
    3090:	9e 01       	movw	r18, r28
    3092:	2f 5f       	subi	r18, 0xFF	; 255
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	6f e1       	ldi	r22, 0x1F	; 31
    3098:	79 e0       	ldi	r23, 0x09	; 9
    309a:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    309e:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    30a2:	0e 94 3c 09 	call	0x1278	; 0x1278 <xStreamBufferSendFromISR>
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	81 11       	cpse	r24, r1
    30aa:	0e 94 99 03 	call	0x732	; 0x732 <vPortYield>
    30ae:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <rec_buf_inp.2926>
    30b2:	be 01       	movw	r22, r28
    30b4:	6e 5f       	subi	r22, 0xFE	; 254
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	c8 01       	movw	r24, r16
    30ba:	b3 d5       	rcall	.+2918   	; 0x3c22 <serial_get_byte>
    30bc:	88 23       	and	r24, r24
    30be:	61 f2       	breq	.-104    	; 0x3058 <_serial_call_back+0x16>
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	08 95       	ret

000030ce <_upload_message>:
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	8c 01       	movw	r16, r24
    30d8:	eb 01       	movw	r28, r22
    30da:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    30de:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    30e2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <xStreamBufferReset>
    30e6:	b8 01       	movw	r22, r16
    30e8:	8b e8       	ldi	r24, 0x8B	; 139
    30ea:	98 e0       	ldi	r25, 0x08	; 8
    30ec:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <strcpy>
    30f0:	20 97       	sbiw	r28, 0x00	; 0
    30f2:	79 f0       	breq	.+30     	; 0x3112 <_upload_message+0x44>
    30f4:	eb e8       	ldi	r30, 0x8B	; 139
    30f6:	f8 e0       	ldi	r31, 0x08	; 8
    30f8:	01 90       	ld	r0, Z+
    30fa:	00 20       	and	r0, r0
    30fc:	e9 f7       	brne	.-6      	; 0x30f8 <_upload_message+0x2a>
    30fe:	31 97       	sbiw	r30, 0x01	; 1
    3100:	80 e2       	ldi	r24, 0x20	; 32
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    3108:	be 01       	movw	r22, r28
    310a:	8b e8       	ldi	r24, 0x8B	; 139
    310c:	98 e0       	ldi	r25, 0x08	; 8
    310e:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <strcat>
    3112:	eb e8       	ldi	r30, 0x8B	; 139
    3114:	f8 e0       	ldi	r31, 0x08	; 8
    3116:	df 01       	movw	r26, r30
    3118:	0d 90       	ld	r0, X+
    311a:	00 20       	and	r0, r0
    311c:	e9 f7       	brne	.-6      	; 0x3118 <_upload_message+0x4a>
    311e:	11 97       	sbiw	r26, 0x01	; 1
    3120:	8d e0       	ldi	r24, 0x0D	; 13
    3122:	9a e0       	ldi	r25, 0x0A	; 10
    3124:	11 96       	adiw	r26, 0x01	; 1
    3126:	9c 93       	st	X, r25
    3128:	8e 93       	st	-X, r24
    312a:	12 96       	adiw	r26, 0x02	; 2
    312c:	1c 92       	st	X, r1
    312e:	01 90       	ld	r0, Z+
    3130:	00 20       	and	r0, r0
    3132:	e9 f7       	brne	.-6      	; 0x312e <_upload_message+0x60>
    3134:	31 97       	sbiw	r30, 0x01	; 1
    3136:	eb 58       	subi	r30, 0x8B	; 139
    3138:	f8 40       	sbci	r31, 0x08	; 8
    313a:	ae 2f       	mov	r26, r30
    313c:	8b e8       	ldi	r24, 0x8B	; 139
    313e:	98 e0       	ldi	r25, 0x08	; 8
    3140:	ac 01       	movw	r20, r24
    3142:	6a 2f       	mov	r22, r26
    3144:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <_rn2483_serial>
    3148:	90 91 f3 08 	lds	r25, 0x08F3	; 0x8008f3 <_rn2483_serial+0x1>
    314c:	1a d5       	rcall	.+2612   	; 0x3b82 <serial_send_bytes>
    314e:	81 11       	cpse	r24, r1
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <_upload_message+0xa2>
    3152:	28 e2       	ldi	r18, 0x28	; 40
    3154:	35 e0       	ldi	r19, 0x05	; 5
    3156:	4d e2       	ldi	r20, 0x2D	; 45
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	69 e7       	ldi	r22, 0x79	; 121
    315c:	79 e0       	ldi	r23, 0x09	; 9
    315e:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    3162:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    3166:	0e 94 7e 09 	call	0x12fc	; 0x12fc <xStreamBufferReceive>
    316a:	89 e7       	ldi	r24, 0x79	; 121
    316c:	99 e0       	ldi	r25, 0x09	; 9
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <_upload_message+0xa6>
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	08 95       	ret

0000317e <_reply2return_code>:
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	6c 01       	movw	r12, r24
    3194:	fc 01       	movw	r30, r24
    3196:	01 90       	ld	r0, Z+
    3198:	00 20       	and	r0, r0
    319a:	e9 f7       	brne	.-6      	; 0x3196 <_reply2return_code+0x18>
    319c:	31 97       	sbiw	r30, 0x01	; 1
    319e:	7f 01       	movw	r14, r30
    31a0:	e8 1a       	sub	r14, r24
    31a2:	f9 0a       	sbc	r15, r25
    31a4:	02 e4       	ldi	r16, 0x42	; 66
    31a6:	17 e0       	ldi	r17, 0x07	; 7
    31a8:	c0 e0       	ldi	r28, 0x00	; 0
    31aa:	d0 e0       	ldi	r29, 0x00	; 0
    31ac:	f8 01       	movw	r30, r16
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	a7 01       	movw	r20, r14
    31b4:	c6 01       	movw	r24, r12
    31b6:	0e 94 00 26 	call	0x4c00	; 0x4c00 <strncasecmp>
    31ba:	89 2b       	or	r24, r25
    31bc:	49 f4       	brne	.+18     	; 0x31d0 <_reply2return_code+0x52>
    31be:	fe 01       	movw	r30, r28
    31c0:	ee 0f       	add	r30, r30
    31c2:	ff 1f       	adc	r31, r31
    31c4:	ec 0f       	add	r30, r28
    31c6:	fd 1f       	adc	r31, r29
    31c8:	ef 5b       	subi	r30, 0xBF	; 191
    31ca:	f8 4f       	sbci	r31, 0xF8	; 248
    31cc:	80 81       	ld	r24, Z
    31ce:	07 c0       	rjmp	.+14     	; 0x31de <_reply2return_code+0x60>
    31d0:	21 96       	adiw	r28, 0x01	; 1
    31d2:	0d 5f       	subi	r16, 0xFD	; 253
    31d4:	1f 4f       	sbci	r17, 0xFF	; 255
    31d6:	c1 31       	cpi	r28, 0x11	; 17
    31d8:	d1 05       	cpc	r29, r1
    31da:	41 f7       	brne	.-48     	; 0x31ac <_reply2return_code+0x2e>
    31dc:	80 e1       	ldi	r24, 0x10	; 16
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	df 90       	pop	r13
    31ec:	cf 90       	pop	r12
    31ee:	bf 90       	pop	r11
    31f0:	af 90       	pop	r10
    31f2:	08 95       	ret

000031f4 <_upload_message_rc>:
    31f4:	6c df       	rcall	.-296    	; 0x30ce <_upload_message>
    31f6:	c3 cf       	rjmp	.-122    	; 0x317e <_reply2return_code>
    31f8:	08 95       	ret

000031fa <lora_driver_flush_buffers>:
    31fa:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    31fe:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    3202:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <xStreamBufferReset>
    3206:	08 95       	ret

00003208 <lora_driver_create>:
    3208:	8f 92       	push	r8
    320a:	9f 92       	push	r9
    320c:	af 92       	push	r10
    320e:	cf 92       	push	r12
    3210:	ef 92       	push	r14
    3212:	0f 93       	push	r16
    3214:	cf 93       	push	r28
    3216:	c8 2f       	mov	r28, r24
    3218:	41 e0       	ldi	r20, 0x01	; 1
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	88 ec       	ldi	r24, 0xC8	; 200
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <xStreamBufferGenericCreate>
    3226:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <_reply_buffer_handle+0x1>
    322a:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <_reply_buffer_handle>
    322e:	0f 2e       	mov	r0, r31
    3230:	f1 e2       	ldi	r31, 0x21	; 33
    3232:	8f 2e       	mov	r8, r31
    3234:	f8 e1       	ldi	r31, 0x18	; 24
    3236:	9f 2e       	mov	r9, r31
    3238:	f0 2d       	mov	r31, r0
    323a:	68 94       	set
    323c:	aa 24       	eor	r10, r10
    323e:	a6 f8       	bld	r10, 6
    3240:	68 94       	set
    3242:	cc 24       	eor	r12, r12
    3244:	c6 f8       	bld	r12, 6
    3246:	e1 2c       	mov	r14, r1
    3248:	00 e0       	ldi	r16, 0x00	; 0
    324a:	23 e0       	ldi	r18, 0x03	; 3
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	51 ee       	ldi	r21, 0xE1	; 225
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	8c 2f       	mov	r24, r28
    3256:	da d3       	rcall	.+1972   	; 0x3a0c <serial_new_instance>
    3258:	90 93 f3 08 	sts	0x08F3, r25	; 0x8008f3 <_rn2483_serial+0x1>
    325c:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <_rn2483_serial>
    3260:	e0 91 e3 09 	lds	r30, 0x09E3	; 0x8009e3 <register_access+0x8>
    3264:	f0 91 e4 09 	lds	r31, 0x09E4	; 0x8009e4 <register_access+0x9>
    3268:	64 e0       	ldi	r22, 0x04	; 4
    326a:	87 e0       	ldi	r24, 0x07	; 7
    326c:	91 e0       	ldi	r25, 0x01	; 1
    326e:	19 95       	eicall
    3270:	cf 91       	pop	r28
    3272:	0f 91       	pop	r16
    3274:	ef 90       	pop	r14
    3276:	cf 90       	pop	r12
    3278:	af 90       	pop	r10
    327a:	9f 90       	pop	r9
    327c:	8f 90       	pop	r8
    327e:	08 95       	ret

00003280 <lora_driver_reset_rn2483>:
    3280:	88 23       	and	r24, r24
    3282:	49 f0       	breq	.+18     	; 0x3296 <lora_driver_reset_rn2483+0x16>
    3284:	e0 91 ed 09 	lds	r30, 0x09ED	; 0x8009ed <register_access+0x12>
    3288:	f0 91 ee 09 	lds	r31, 0x09EE	; 0x8009ee <register_access+0x13>
    328c:	64 e0       	ldi	r22, 0x04	; 4
    328e:	88 e0       	ldi	r24, 0x08	; 8
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	19 95       	eicall
    3294:	08 95       	ret
    3296:	e0 91 e3 09 	lds	r30, 0x09E3	; 0x8009e3 <register_access+0x8>
    329a:	f0 91 e4 09 	lds	r31, 0x09E4	; 0x8009e4 <register_access+0x9>
    329e:	64 e0       	ldi	r22, 0x04	; 4
    32a0:	88 e0       	ldi	r24, 0x08	; 8
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	19 95       	eicall
    32a6:	08 95       	ret

000032a8 <lora_driver_rn2483_factory_reset>:
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	8d ed       	ldi	r24, 0xDD	; 221
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e df       	rcall	.-484    	; 0x30ce <_upload_message>
    32b2:	e9 e7       	ldi	r30, 0x79	; 121
    32b4:	f9 e0       	ldi	r31, 0x09	; 9
    32b6:	01 90       	ld	r0, Z+
    32b8:	00 20       	and	r0, r0
    32ba:	e9 f7       	brne	.-6      	; 0x32b6 <lora_driver_rn2483_factory_reset+0xe>
    32bc:	31 97       	sbiw	r30, 0x01	; 1
    32be:	e9 57       	subi	r30, 0x79	; 121
    32c0:	f9 40       	sbci	r31, 0x09	; 9
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	75 97       	sbiw	r30, 0x15	; 21
    32c6:	08 f0       	brcs	.+2      	; 0x32ca <lora_driver_rn2483_factory_reset+0x22>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	08 95       	ret

000032cc <lora_driver_get_rn2483_hweui>:
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	ec 01       	movw	r28, r24
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	8e ee       	ldi	r24, 0xEE	; 238
    32d8:	94 e0       	ldi	r25, 0x04	; 4
    32da:	f9 de       	rcall	.-526    	; 0x30ce <_upload_message>
    32dc:	e9 e7       	ldi	r30, 0x79	; 121
    32de:	f9 e0       	ldi	r31, 0x09	; 9
    32e0:	01 90       	ld	r0, Z+
    32e2:	00 20       	and	r0, r0
    32e4:	e9 f7       	brne	.-6      	; 0x32e0 <lora_driver_get_rn2483_hweui+0x14>
    32e6:	ea 58       	subi	r30, 0x8A	; 138
    32e8:	f9 40       	sbci	r31, 0x09	; 9
    32ea:	39 f4       	brne	.+14     	; 0x32fa <lora_driver_get_rn2483_hweui+0x2e>
    32ec:	69 e7       	ldi	r22, 0x79	; 121
    32ee:	79 e0       	ldi	r23, 0x09	; 9
    32f0:	ce 01       	movw	r24, r28
    32f2:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <strcpy>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <lora_driver_get_rn2483_hweui+0x32>
    32fa:	18 82       	st	Y, r1
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

00003304 <lora_driver_set_device_identifier>:
    3304:	fc 01       	movw	r30, r24
    3306:	01 90       	ld	r0, Z+
    3308:	00 20       	and	r0, r0
    330a:	e9 f7       	brne	.-6      	; 0x3306 <lora_driver_set_device_identifier+0x2>
    330c:	9f 01       	movw	r18, r30
    330e:	21 51       	subi	r18, 0x11	; 17
    3310:	31 09       	sbc	r19, r1
    3312:	28 17       	cp	r18, r24
    3314:	39 07       	cpc	r19, r25
    3316:	29 f4       	brne	.+10     	; 0x3322 <lora_driver_set_device_identifier+0x1e>
    3318:	bc 01       	movw	r22, r24
    331a:	8c e1       	ldi	r24, 0x1C	; 28
    331c:	95 e0       	ldi	r25, 0x05	; 5
    331e:	6a cf       	rjmp	.-300    	; 0x31f4 <_upload_message_rc>
    3320:	08 95       	ret
    3322:	89 e0       	ldi	r24, 0x09	; 9
    3324:	08 95       	ret

00003326 <lora_driver_set_application_identifier>:
    3326:	fc 01       	movw	r30, r24
    3328:	01 90       	ld	r0, Z+
    332a:	00 20       	and	r0, r0
    332c:	e9 f7       	brne	.-6      	; 0x3328 <lora_driver_set_application_identifier+0x2>
    332e:	9f 01       	movw	r18, r30
    3330:	21 51       	subi	r18, 0x11	; 17
    3332:	31 09       	sbc	r19, r1
    3334:	28 17       	cp	r18, r24
    3336:	39 07       	cpc	r19, r25
    3338:	29 f4       	brne	.+10     	; 0x3344 <lora_driver_set_application_identifier+0x1e>
    333a:	bc 01       	movw	r22, r24
    333c:	8b e2       	ldi	r24, 0x2B	; 43
    333e:	95 e0       	ldi	r25, 0x05	; 5
    3340:	59 cf       	rjmp	.-334    	; 0x31f4 <_upload_message_rc>
    3342:	08 95       	ret
    3344:	89 e0       	ldi	r24, 0x09	; 9
    3346:	08 95       	ret

00003348 <lora_driver_set_application_key>:
    3348:	fc 01       	movw	r30, r24
    334a:	01 90       	ld	r0, Z+
    334c:	00 20       	and	r0, r0
    334e:	e9 f7       	brne	.-6      	; 0x334a <lora_driver_set_application_key+0x2>
    3350:	9f 01       	movw	r18, r30
    3352:	21 52       	subi	r18, 0x21	; 33
    3354:	31 09       	sbc	r19, r1
    3356:	28 17       	cp	r18, r24
    3358:	39 07       	cpc	r19, r25
    335a:	29 f4       	brne	.+10     	; 0x3366 <lora_driver_set_application_key+0x1e>
    335c:	bc 01       	movw	r22, r24
    335e:	8a e3       	ldi	r24, 0x3A	; 58
    3360:	95 e0       	ldi	r25, 0x05	; 5
    3362:	48 cf       	rjmp	.-368    	; 0x31f4 <_upload_message_rc>
    3364:	08 95       	ret
    3366:	89 e0       	ldi	r24, 0x09	; 9
    3368:	08 95       	ret

0000336a <lora_driver_save_mac>:
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	89 e7       	ldi	r24, 0x79	; 121
    3370:	95 e0       	ldi	r25, 0x05	; 5
    3372:	40 cf       	rjmp	.-384    	; 0x31f4 <_upload_message_rc>
    3374:	08 95       	ret

00003376 <lora_driver_join>:
    3376:	e8 2f       	mov	r30, r24
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	ee 0f       	add	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	e3 5c       	subi	r30, 0xC3	; 195
    3380:	f8 4f       	sbci	r31, 0xF8	; 248
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 e8       	ldi	r24, 0x82	; 130
    3388:	95 e0       	ldi	r25, 0x05	; 5
    338a:	34 df       	rcall	.-408    	; 0x31f4 <_upload_message_rc>
    338c:	81 11       	cpse	r24, r1
    338e:	12 c0       	rjmp	.+36     	; 0x33b4 <lora_driver_join+0x3e>
    3390:	28 e2       	ldi	r18, 0x28	; 40
    3392:	35 e0       	ldi	r19, 0x05	; 5
    3394:	4d e2       	ldi	r20, 0x2D	; 45
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	69 e7       	ldi	r22, 0x79	; 121
    339a:	79 e0       	ldi	r23, 0x09	; 9
    339c:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    33a0:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    33a4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <xStreamBufferReceive>
    33a8:	88 23       	and	r24, r24
    33aa:	21 f0       	breq	.+8      	; 0x33b4 <lora_driver_join+0x3e>
    33ac:	89 e7       	ldi	r24, 0x79	; 121
    33ae:	99 e0       	ldi	r25, 0x09	; 9
    33b0:	e6 ce       	rjmp	.-564    	; 0x317e <_reply2return_code>
    33b2:	08 95       	ret
    33b4:	89 e7       	ldi	r24, 0x79	; 121
    33b6:	99 e0       	ldi	r25, 0x09	; 9
    33b8:	e2 ce       	rjmp	.-572    	; 0x317e <_reply2return_code>
    33ba:	08 95       	ret

000033bc <lora_driver_sent_upload_message>:
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	1f 92       	push	r1
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	db 01       	movw	r26, r22
    33c8:	11 96       	adiw	r26, 0x01	; 1
    33ca:	9c 91       	ld	r25, X
    33cc:	11 97       	sbiw	r26, 0x01	; 1
    33ce:	95 31       	cpi	r25, 0x15	; 21
    33d0:	08 f0       	brcs	.+2      	; 0x33d4 <lora_driver_sent_upload_message+0x18>
    33d2:	87 c0       	rjmp	.+270    	; 0x34e2 <lora_driver_sent_upload_message+0x126>
    33d4:	99 23       	and	r25, r25
    33d6:	81 f1       	breq	.+96     	; 0x3438 <lora_driver_sent_upload_message+0x7c>
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	27 2f       	mov	r18, r23
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	46 2f       	mov	r20, r22
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	fd 01       	movw	r30, r26
    33e6:	e4 0f       	add	r30, r20
    33e8:	f5 1f       	adc	r31, r21
    33ea:	92 81       	ldd	r25, Z+2	; 0x02
    33ec:	92 95       	swap	r25
    33ee:	9f 70       	andi	r25, 0x0F	; 15
    33f0:	9a 30       	cpi	r25, 0x0A	; 10
    33f2:	10 f0       	brcs	.+4      	; 0x33f8 <lora_driver_sent_upload_message+0x3c>
    33f4:	99 5c       	subi	r25, 0xC9	; 201
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <lora_driver_sent_upload_message+0x3e>
    33f8:	90 5d       	subi	r25, 0xD0	; 208
    33fa:	f9 01       	movw	r30, r18
    33fc:	e6 5f       	subi	r30, 0xF6	; 246
    33fe:	f6 4f       	sbci	r31, 0xF6	; 246
    3400:	90 83       	st	Z, r25
    3402:	2f 5f       	subi	r18, 0xFF	; 255
    3404:	3f 4f       	sbci	r19, 0xFF	; 255
    3406:	fd 01       	movw	r30, r26
    3408:	e4 0f       	add	r30, r20
    340a:	f5 1f       	adc	r31, r21
    340c:	92 81       	ldd	r25, Z+2	; 0x02
    340e:	9f 70       	andi	r25, 0x0F	; 15
    3410:	49 2f       	mov	r20, r25
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	4a 30       	cpi	r20, 0x0A	; 10
    3416:	51 05       	cpc	r21, r1
    3418:	14 f0       	brlt	.+4      	; 0x341e <lora_driver_sent_upload_message+0x62>
    341a:	99 5c       	subi	r25, 0xC9	; 201
    341c:	01 c0       	rjmp	.+2      	; 0x3420 <lora_driver_sent_upload_message+0x64>
    341e:	90 5d       	subi	r25, 0xD0	; 208
    3420:	f9 01       	movw	r30, r18
    3422:	e6 5f       	subi	r30, 0xF6	; 246
    3424:	f6 4f       	sbci	r31, 0xF6	; 246
    3426:	90 83       	st	Z, r25
    3428:	7e 5f       	subi	r23, 0xFE	; 254
    342a:	6f 5f       	subi	r22, 0xFF	; 255
    342c:	11 96       	adiw	r26, 0x01	; 1
    342e:	9c 91       	ld	r25, X
    3430:	11 97       	sbiw	r26, 0x01	; 1
    3432:	69 17       	cp	r22, r25
    3434:	98 f2       	brcs	.-90     	; 0x33dc <lora_driver_sent_upload_message+0x20>
    3436:	01 c0       	rjmp	.+2      	; 0x343a <lora_driver_sent_upload_message+0x7e>
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	e7 2f       	mov	r30, r23
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	e6 5f       	subi	r30, 0xF6	; 246
    3440:	f6 4f       	sbci	r31, 0xF6	; 246
    3442:	10 82       	st	Z, r1
    3444:	4c 91       	ld	r20, X
    3446:	81 11       	cpse	r24, r1
    3448:	03 c0       	rjmp	.+6      	; 0x3450 <lora_driver_sent_upload_message+0x94>
    344a:	8b e8       	ldi	r24, 0x8B	; 139
    344c:	95 e0       	ldi	r25, 0x05	; 5
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <lora_driver_sent_upload_message+0x98>
    3450:	8d e8       	ldi	r24, 0x8D	; 141
    3452:	95 e0       	ldi	r25, 0x05	; 5
    3454:	2a e0       	ldi	r18, 0x0A	; 10
    3456:	39 e0       	ldi	r19, 0x09	; 9
    3458:	3f 93       	push	r19
    345a:	2f 93       	push	r18
    345c:	1f 92       	push	r1
    345e:	4f 93       	push	r20
    3460:	9f 93       	push	r25
    3462:	8f 93       	push	r24
    3464:	81 e9       	ldi	r24, 0x91	; 145
    3466:	95 e0       	ldi	r25, 0x05	; 5
    3468:	9f 93       	push	r25
    346a:	8f 93       	push	r24
    346c:	8c e4       	ldi	r24, 0x4C	; 76
    346e:	99 e0       	ldi	r25, 0x09	; 9
    3470:	9f 93       	push	r25
    3472:	8f 93       	push	r24
    3474:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <sprintf>
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	70 e0       	ldi	r23, 0x00	; 0
    347c:	8c e4       	ldi	r24, 0x4C	; 76
    347e:	99 e0       	ldi	r25, 0x09	; 9
    3480:	b9 de       	rcall	.-654    	; 0x31f4 <_upload_message_rc>
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	8e 30       	cpi	r24, 0x0E	; 14
    348e:	51 f5       	brne	.+84     	; 0x34e4 <lora_driver_sent_upload_message+0x128>
    3490:	87 e0       	ldi	r24, 0x07	; 7
    3492:	89 83       	std	Y+1, r24	; 0x01
    3494:	be 01       	movw	r22, r28
    3496:	6f 5f       	subi	r22, 0xFF	; 255
    3498:	7f 4f       	sbci	r23, 0xFF	; 255
    349a:	89 e7       	ldi	r24, 0x79	; 121
    349c:	99 e0       	ldi	r25, 0x09	; 9
    349e:	3c d1       	rcall	.+632    	; 0x3718 <decode_port_no>
    34a0:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <_downlink_payload>
    34a4:	e9 81       	ldd	r30, Y+1	; 0x01
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	e7 58       	subi	r30, 0x87	; 135
    34aa:	f6 4f       	sbci	r31, 0xF6	; 246
    34ac:	df 01       	movw	r26, r30
    34ae:	0d 90       	ld	r0, X+
    34b0:	00 20       	and	r0, r0
    34b2:	e9 f7       	brne	.-6      	; 0x34ae <lora_driver_sent_upload_message+0xf2>
    34b4:	11 97       	sbiw	r26, 0x01	; 1
    34b6:	ae 1b       	sub	r26, r30
    34b8:	bf 0b       	sbc	r27, r31
    34ba:	aa 23       	and	r26, r26
    34bc:	81 f0       	breq	.+32     	; 0x34de <lora_driver_sent_upload_message+0x122>
    34be:	bb 27       	eor	r27, r27
    34c0:	11 97       	sbiw	r26, 0x01	; 1
    34c2:	cd 01       	movw	r24, r26
    34c4:	0a f4       	brpl	.+2      	; 0x34c8 <lora_driver_sent_upload_message+0x10c>
    34c6:	01 96       	adiw	r24, 0x01	; 1
    34c8:	95 95       	asr	r25
    34ca:	87 95       	ror	r24
    34cc:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <_downlink_payload+0x1>
    34d0:	af 01       	movw	r20, r30
    34d2:	4f 5f       	subi	r20, 0xFF	; 255
    34d4:	5f 4f       	sbci	r21, 0xFF	; 255
    34d6:	64 e1       	ldi	r22, 0x14	; 20
    34d8:	86 ef       	ldi	r24, 0xF6	; 246
    34da:	98 e0       	ldi	r25, 0x08	; 8
    34dc:	49 d1       	rcall	.+658    	; 0x3770 <decode_hexadecimal_string_bytes>
    34de:	8e e0       	ldi	r24, 0x0E	; 14
    34e0:	01 c0       	rjmp	.+2      	; 0x34e4 <lora_driver_sent_upload_message+0x128>
    34e2:	84 e1       	ldi	r24, 0x14	; 20
    34e4:	0f 90       	pop	r0
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	08 95       	ret

000034ec <lora_driver_set_adaptive_data_rate>:
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <lora_driver_set_adaptive_data_rate+0xa>
    34f0:	61 ea       	ldi	r22, 0xA1	; 161
    34f2:	75 e0       	ldi	r23, 0x05	; 5
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <lora_driver_set_adaptive_data_rate+0xe>
    34f6:	61 e6       	ldi	r22, 0x61	; 97
    34f8:	76 e0       	ldi	r23, 0x06	; 6
    34fa:	85 ea       	ldi	r24, 0xA5	; 165
    34fc:	95 e0       	ldi	r25, 0x05	; 5
    34fe:	7a ce       	rjmp	.-780    	; 0x31f4 <_upload_message_rc>
    3500:	08 95       	ret

00003502 <lora_driver_configure_to_eu868>:
    3502:	2f 92       	push	r2
    3504:	3f 92       	push	r3
    3506:	4f 92       	push	r4
    3508:	5f 92       	push	r5
    350a:	6f 92       	push	r6
    350c:	7f 92       	push	r7
    350e:	8f 92       	push	r8
    3510:	9f 92       	push	r9
    3512:	af 92       	push	r10
    3514:	bf 92       	push	r11
    3516:	cf 92       	push	r12
    3518:	df 92       	push	r13
    351a:	ef 92       	push	r14
    351c:	ff 92       	push	r15
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	a0 97       	sbiw	r28, 0x20	; 32
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	f8 94       	cli
    3530:	de bf       	out	0x3e, r29	; 62
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	6a ee       	ldi	r22, 0xEA	; 234
    3538:	75 e0       	ldi	r23, 0x05	; 5
    353a:	86 ef       	ldi	r24, 0xF6	; 246
    353c:	95 e0       	ldi	r25, 0x05	; 5
    353e:	c7 dd       	rcall	.-1138   	; 0x30ce <_upload_message>
    3540:	1e de       	rcall	.-964    	; 0x317e <_reply2return_code>
    3542:	81 11       	cpse	r24, r1
    3544:	a3 c0       	rjmp	.+326    	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    3546:	80 e2       	ldi	r24, 0x20	; 32
    3548:	e1 e2       	ldi	r30, 0x21	; 33
    354a:	f2 e0       	ldi	r31, 0x02	; 2
    354c:	de 01       	movw	r26, r28
    354e:	11 96       	adiw	r26, 0x01	; 1
    3550:	01 90       	ld	r0, Z+
    3552:	0d 92       	st	X+, r0
    3554:	8a 95       	dec	r24
    3556:	e1 f7       	brne	.-8      	; 0x3550 <lora_driver_configure_to_eu868+0x4e>
    3558:	9e 01       	movw	r18, r28
    355a:	2f 5f       	subi	r18, 0xFF	; 255
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	69 01       	movw	r12, r18
    3560:	e1 2c       	mov	r14, r1
    3562:	f1 2c       	mov	r15, r1
    3564:	0f 2e       	mov	r0, r31
    3566:	f2 e0       	ldi	r31, 0x02	; 2
    3568:	af 2e       	mov	r10, r31
    356a:	f6 e0       	ldi	r31, 0x06	; 6
    356c:	bf 2e       	mov	r11, r31
    356e:	f0 2d       	mov	r31, r0
    3570:	0c e4       	ldi	r16, 0x4C	; 76
    3572:	19 e0       	ldi	r17, 0x09	; 9
    3574:	0f 2e       	mov	r0, r31
    3576:	fb e1       	ldi	r31, 0x1B	; 27
    3578:	4f 2e       	mov	r4, r31
    357a:	f6 e0       	ldi	r31, 0x06	; 6
    357c:	5f 2e       	mov	r5, r31
    357e:	f0 2d       	mov	r31, r0
    3580:	0f 2e       	mov	r0, r31
    3582:	f2 e3       	ldi	r31, 0x32	; 50
    3584:	8f 2e       	mov	r8, r31
    3586:	f6 e0       	ldi	r31, 0x06	; 6
    3588:	9f 2e       	mov	r9, r31
    358a:	f0 2d       	mov	r31, r0
    358c:	0f 2e       	mov	r0, r31
    358e:	fc e4       	ldi	r31, 0x4C	; 76
    3590:	6f 2e       	mov	r6, r31
    3592:	f6 e0       	ldi	r31, 0x06	; 6
    3594:	7f 2e       	mov	r7, r31
    3596:	f0 2d       	mov	r31, r0
    3598:	3e 2c       	mov	r3, r14
    359a:	2f 2c       	mov	r2, r15
    359c:	ff 92       	push	r15
    359e:	ef 92       	push	r14
    35a0:	bf 92       	push	r11
    35a2:	af 92       	push	r10
    35a4:	1f 93       	push	r17
    35a6:	0f 93       	push	r16
    35a8:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <sprintf>
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	c8 01       	movw	r24, r16
    35b2:	8d dd       	rcall	.-1254   	; 0x30ce <_upload_message>
    35b4:	e4 dd       	rcall	.-1080   	; 0x317e <_reply2return_code>
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	81 11       	cpse	r24, r1
    35c4:	63 c0       	rjmp	.+198    	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    35c6:	32 e0       	ldi	r19, 0x02	; 2
    35c8:	3e 15       	cp	r19, r14
    35ca:	e8 f4       	brcc	.+58     	; 0x3606 <lora_driver_configure_to_eu868+0x104>
    35cc:	f6 01       	movw	r30, r12
    35ce:	83 81       	ldd	r24, Z+3	; 0x03
    35d0:	8f 93       	push	r24
    35d2:	82 81       	ldd	r24, Z+2	; 0x02
    35d4:	8f 93       	push	r24
    35d6:	81 81       	ldd	r24, Z+1	; 0x01
    35d8:	8f 93       	push	r24
    35da:	80 81       	ld	r24, Z
    35dc:	8f 93       	push	r24
    35de:	ff 92       	push	r15
    35e0:	ef 92       	push	r14
    35e2:	5f 92       	push	r5
    35e4:	4f 92       	push	r4
    35e6:	1f 93       	push	r17
    35e8:	0f 93       	push	r16
    35ea:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <sprintf>
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	c8 01       	movw	r24, r16
    35f4:	6c dd       	rcall	.-1320   	; 0x30ce <_upload_message>
    35f6:	c3 dd       	rcall	.-1146   	; 0x317e <_reply2return_code>
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	81 11       	cpse	r24, r1
    3604:	43 c0       	rjmp	.+134    	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    3606:	2f 92       	push	r2
    3608:	3f 92       	push	r3
    360a:	9f 92       	push	r9
    360c:	8f 92       	push	r8
    360e:	1f 93       	push	r17
    3610:	0f 93       	push	r16
    3612:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <sprintf>
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	c8 01       	movw	r24, r16
    361c:	58 dd       	rcall	.-1360   	; 0x30ce <_upload_message>
    361e:	af dd       	rcall	.-1186   	; 0x317e <_reply2return_code>
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	81 11       	cpse	r24, r1
    362e:	2e c0       	rjmp	.+92     	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    3630:	2f 92       	push	r2
    3632:	3f 92       	push	r3
    3634:	7f 92       	push	r7
    3636:	6f 92       	push	r6
    3638:	1f 93       	push	r17
    363a:	0f 93       	push	r16
    363c:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <sprintf>
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	c8 01       	movw	r24, r16
    3646:	43 dd       	rcall	.-1402   	; 0x30ce <_upload_message>
    3648:	9a dd       	rcall	.-1228   	; 0x317e <_reply2return_code>
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	81 11       	cpse	r24, r1
    3658:	19 c0       	rjmp	.+50     	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	e3 1a       	sub	r14, r19
    365e:	f3 0a       	sbc	r15, r19
    3660:	84 e0       	ldi	r24, 0x04	; 4
    3662:	c8 0e       	add	r12, r24
    3664:	d1 1c       	adc	r13, r1
    3666:	98 e0       	ldi	r25, 0x08	; 8
    3668:	e9 16       	cp	r14, r25
    366a:	f1 04       	cpc	r15, r1
    366c:	09 f0       	breq	.+2      	; 0x3670 <lora_driver_configure_to_eu868+0x16e>
    366e:	94 cf       	rjmp	.-216    	; 0x3598 <lora_driver_configure_to_eu868+0x96>
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	84 e6       	ldi	r24, 0x64	; 100
    3676:	96 e0       	ldi	r25, 0x06	; 6
    3678:	2a dd       	rcall	.-1452   	; 0x30ce <_upload_message>
    367a:	81 dd       	rcall	.-1278   	; 0x317e <_reply2return_code>
    367c:	81 11       	cpse	r24, r1
    367e:	06 c0       	rjmp	.+12     	; 0x368c <lora_driver_configure_to_eu868+0x18a>
    3680:	60 e0       	ldi	r22, 0x00	; 0
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	85 e7       	ldi	r24, 0x75	; 117
    3686:	96 e0       	ldi	r25, 0x06	; 6
    3688:	22 dd       	rcall	.-1468   	; 0x30ce <_upload_message>
    368a:	79 dd       	rcall	.-1294   	; 0x317e <_reply2return_code>
    368c:	a0 96       	adiw	r28, 0x20	; 32
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	9f 90       	pop	r9
    36ae:	8f 90       	pop	r8
    36b0:	7f 90       	pop	r7
    36b2:	6f 90       	pop	r6
    36b4:	5f 90       	pop	r5
    36b6:	4f 90       	pop	r4
    36b8:	3f 90       	pop	r3
    36ba:	2f 90       	pop	r2
    36bc:	08 95       	ret

000036be <lora_driver_set_otaa_identity>:
    36be:	ef 92       	push	r14
    36c0:	ff 92       	push	r15
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
    36cc:	8b 01       	movw	r16, r22
    36ce:	7a 01       	movw	r14, r20
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	0c df       	rcall	.-488    	; 0x34ec <lora_driver_set_adaptive_data_rate>
    36d4:	81 11       	cpse	r24, r1
    36d6:	0d c0       	rjmp	.+26     	; 0x36f2 <lora_driver_set_otaa_identity+0x34>
    36d8:	ce 01       	movw	r24, r28
    36da:	25 de       	rcall	.-950    	; 0x3326 <lora_driver_set_application_identifier>
    36dc:	81 11       	cpse	r24, r1
    36de:	09 c0       	rjmp	.+18     	; 0x36f2 <lora_driver_set_otaa_identity+0x34>
    36e0:	c8 01       	movw	r24, r16
    36e2:	32 de       	rcall	.-924    	; 0x3348 <lora_driver_set_application_key>
    36e4:	81 11       	cpse	r24, r1
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <lora_driver_set_otaa_identity+0x34>
    36e8:	c7 01       	movw	r24, r14
    36ea:	0c de       	rcall	.-1000   	; 0x3304 <lora_driver_set_device_identifier>
    36ec:	81 11       	cpse	r24, r1
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <lora_driver_set_otaa_identity+0x34>
    36f0:	3c de       	rcall	.-904    	; 0x336a <lora_driver_save_mac>
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	1f 91       	pop	r17
    36f8:	0f 91       	pop	r16
    36fa:	ff 90       	pop	r15
    36fc:	ef 90       	pop	r14
    36fe:	08 95       	ret

00003700 <lora_driver_map_return_code_to_text>:
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	fc 01       	movw	r30, r24
    3704:	ee 0f       	add	r30, r30
    3706:	ff 1f       	adc	r31, r31
    3708:	8e 0f       	add	r24, r30
    370a:	9f 1f       	adc	r25, r31
    370c:	fc 01       	movw	r30, r24
    370e:	ef 5b       	subi	r30, 0xBF	; 191
    3710:	f8 4f       	sbci	r31, 0xF8	; 248
    3712:	81 81       	ldd	r24, Z+1	; 0x01
    3714:	92 81       	ldd	r25, Z+2	; 0x02
    3716:	08 95       	ret

00003718 <decode_port_no>:
    3718:	dc 01       	movw	r26, r24
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	29 f1       	breq	.+74     	; 0x3768 <decode_port_no+0x50>
    371e:	fb 01       	movw	r30, r22
    3720:	20 81       	ld	r18, Z
    3722:	fc 01       	movw	r30, r24
    3724:	01 90       	ld	r0, Z+
    3726:	00 20       	and	r0, r0
    3728:	e9 f7       	brne	.-6      	; 0x3724 <decode_port_no+0xc>
    372a:	31 97       	sbiw	r30, 0x01	; 1
    372c:	e8 1b       	sub	r30, r24
    372e:	f9 0b       	sbc	r31, r25
    3730:	82 2f       	mov	r24, r18
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	e8 17       	cp	r30, r24
    3736:	f9 07       	cpc	r31, r25
    3738:	c8 f0       	brcs	.+50     	; 0x376c <decode_port_no+0x54>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	08 c0       	rjmp	.+16     	; 0x374e <decode_port_no+0x36>
    373e:	88 0f       	add	r24, r24
    3740:	38 2f       	mov	r19, r24
    3742:	33 0f       	add	r19, r19
    3744:	33 0f       	add	r19, r19
    3746:	83 0f       	add	r24, r19
    3748:	80 53       	subi	r24, 0x30	; 48
    374a:	89 0f       	add	r24, r25
    374c:	2f 5f       	subi	r18, 0xFF	; 255
    374e:	fd 01       	movw	r30, r26
    3750:	e2 0f       	add	r30, r18
    3752:	f1 1d       	adc	r31, r1
    3754:	90 81       	ld	r25, Z
    3756:	30 ed       	ldi	r19, 0xD0	; 208
    3758:	39 0f       	add	r19, r25
    375a:	3a 30       	cpi	r19, 0x0A	; 10
    375c:	10 f4       	brcc	.+4      	; 0x3762 <decode_port_no+0x4a>
    375e:	91 11       	cpse	r25, r1
    3760:	ee cf       	rjmp	.-36     	; 0x373e <decode_port_no+0x26>
    3762:	fb 01       	movw	r30, r22
    3764:	20 83       	st	Z, r18
    3766:	08 95       	ret
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	08 95       	ret
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	08 95       	ret

00003770 <decode_hexadecimal_string_bytes>:
    3770:	0f 93       	push	r16
    3772:	1f 93       	push	r17
    3774:	cf 93       	push	r28
    3776:	df 93       	push	r29
    3778:	dc 01       	movw	r26, r24
    377a:	ea 01       	movw	r28, r20
    377c:	20 97       	sbiw	r28, 0x00	; 0
    377e:	e1 f1       	breq	.+120    	; 0x37f8 <decode_hexadecimal_string_bytes+0x88>
    3780:	fa 01       	movw	r30, r20
    3782:	01 90       	ld	r0, Z+
    3784:	00 20       	and	r0, r0
    3786:	e9 f7       	brne	.-6      	; 0x3782 <decode_hexadecimal_string_bytes+0x12>
    3788:	31 97       	sbiw	r30, 0x01	; 1
    378a:	e4 1b       	sub	r30, r20
    378c:	f5 0b       	sbc	r31, r21
    378e:	32 97       	sbiw	r30, 0x02	; 2
    3790:	10 f5       	brcc	.+68     	; 0x37d6 <decode_hexadecimal_string_bytes+0x66>
    3792:	32 c0       	rjmp	.+100    	; 0x37f8 <decode_hexadecimal_string_bytes+0x88>
    3794:	8d 01       	movw	r16, r26
    3796:	04 0f       	add	r16, r20
    3798:	15 1f       	adc	r17, r21
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	ae 01       	movw	r20, r28
    379e:	42 0f       	add	r20, r18
    37a0:	53 1f       	adc	r21, r19
    37a2:	fa 01       	movw	r30, r20
    37a4:	90 81       	ld	r25, Z
    37a6:	91 34       	cpi	r25, 0x41	; 65
    37a8:	28 f0       	brcs	.+10     	; 0x37b4 <decode_hexadecimal_string_bytes+0x44>
    37aa:	97 53       	subi	r25, 0x37	; 55
    37ac:	59 2f       	mov	r21, r25
    37ae:	52 95       	swap	r21
    37b0:	50 7f       	andi	r21, 0xF0	; 240
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <decode_hexadecimal_string_bytes+0x4a>
    37b4:	59 2f       	mov	r21, r25
    37b6:	52 95       	swap	r21
    37b8:	50 7f       	andi	r21, 0xF0	; 240
    37ba:	2c 0f       	add	r18, r28
    37bc:	3d 1f       	adc	r19, r29
    37be:	f9 01       	movw	r30, r18
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	91 34       	cpi	r25, 0x41	; 65
    37c4:	10 f0       	brcs	.+4      	; 0x37ca <decode_hexadecimal_string_bytes+0x5a>
    37c6:	97 53       	subi	r25, 0x37	; 55
    37c8:	01 c0       	rjmp	.+2      	; 0x37cc <decode_hexadecimal_string_bytes+0x5c>
    37ca:	90 53       	subi	r25, 0x30	; 48
    37cc:	95 0f       	add	r25, r21
    37ce:	f8 01       	movw	r30, r16
    37d0:	90 83       	st	Z, r25
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <decode_hexadecimal_string_bytes+0x68>
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	28 2f       	mov	r18, r24
    37da:	22 0f       	add	r18, r18
    37dc:	48 2f       	mov	r20, r24
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	fe 01       	movw	r30, r28
    37e2:	01 90       	ld	r0, Z+
    37e4:	00 20       	and	r0, r0
    37e6:	e9 f7       	brne	.-6      	; 0x37e2 <decode_hexadecimal_string_bytes+0x72>
    37e8:	31 97       	sbiw	r30, 0x01	; 1
    37ea:	ec 1b       	sub	r30, r28
    37ec:	fd 0b       	sbc	r31, r29
    37ee:	4e 17       	cp	r20, r30
    37f0:	5f 07       	cpc	r21, r31
    37f2:	10 f4       	brcc	.+4      	; 0x37f8 <decode_hexadecimal_string_bytes+0x88>
    37f4:	86 13       	cpse	r24, r22
    37f6:	ce cf       	rjmp	.-100    	; 0x3794 <decode_hexadecimal_string_bytes+0x24>
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
    3800:	08 95       	ret

00003802 <reg_read_register>:
    3802:	fc 01       	movw	r30, r24
    3804:	80 81       	ld	r24, Z
    3806:	08 95       	ret

00003808 <reg_read_bit>:
    3808:	fc 01       	movw	r30, r24
    380a:	20 81       	ld	r18, Z
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <reg_read_bit+0xe>
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	6a 95       	dec	r22
    3818:	e2 f7       	brpl	.-8      	; 0x3812 <reg_read_bit+0xa>
    381a:	82 23       	and	r24, r18
    381c:	08 95       	ret

0000381e <reg_read_bits>:
    381e:	fc 01       	movw	r30, r24
    3820:	80 81       	ld	r24, Z
    3822:	86 23       	and	r24, r22
    3824:	08 95       	ret

00003826 <reg_set_register>:
    3826:	fc 01       	movw	r30, r24
    3828:	60 83       	st	Z, r22
    382a:	08 95       	ret

0000382c <reg_clear_register>:
    382c:	fc 01       	movw	r30, r24
    382e:	10 82       	st	Z, r1
    3830:	08 95       	ret

00003832 <reg_set_bit>:
    3832:	fc 01       	movw	r30, r24
    3834:	40 81       	ld	r20, Z
    3836:	21 e0       	ldi	r18, 0x01	; 1
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <reg_set_bit+0xe>
    383c:	22 0f       	add	r18, r18
    383e:	33 1f       	adc	r19, r19
    3840:	6a 95       	dec	r22
    3842:	e2 f7       	brpl	.-8      	; 0x383c <reg_set_bit+0xa>
    3844:	24 2b       	or	r18, r20
    3846:	20 83       	st	Z, r18
    3848:	08 95       	ret

0000384a <reg_set_bits>:
    384a:	fc 01       	movw	r30, r24
    384c:	20 81       	ld	r18, Z
    384e:	62 2b       	or	r22, r18
    3850:	60 83       	st	Z, r22
    3852:	08 95       	ret

00003854 <reg_toggle_bit>:
    3854:	fc 01       	movw	r30, r24
    3856:	40 81       	ld	r20, Z
    3858:	21 e0       	ldi	r18, 0x01	; 1
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <reg_toggle_bit+0xe>
    385e:	22 0f       	add	r18, r18
    3860:	33 1f       	adc	r19, r19
    3862:	6a 95       	dec	r22
    3864:	e2 f7       	brpl	.-8      	; 0x385e <reg_toggle_bit+0xa>
    3866:	24 27       	eor	r18, r20
    3868:	20 83       	st	Z, r18
    386a:	08 95       	ret

0000386c <reg_toggle_bits>:
    386c:	fc 01       	movw	r30, r24
    386e:	20 81       	ld	r18, Z
    3870:	62 27       	eor	r22, r18
    3872:	60 83       	st	Z, r22
    3874:	08 95       	ret

00003876 <reg_clear_bit>:
    3876:	fc 01       	movw	r30, r24
    3878:	90 81       	ld	r25, Z
    387a:	21 e0       	ldi	r18, 0x01	; 1
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <reg_clear_bit+0xe>
    3880:	22 0f       	add	r18, r18
    3882:	33 1f       	adc	r19, r19
    3884:	6a 95       	dec	r22
    3886:	e2 f7       	brpl	.-8      	; 0x3880 <reg_clear_bit+0xa>
    3888:	20 95       	com	r18
    388a:	29 23       	and	r18, r25
    388c:	20 83       	st	Z, r18
    388e:	08 95       	ret

00003890 <reg_clear_bits>:
    3890:	fc 01       	movw	r30, r24
    3892:	90 81       	ld	r25, Z
    3894:	60 95       	com	r22
    3896:	69 23       	and	r22, r25
    3898:	60 83       	st	Z, r22
    389a:	08 95       	ret

0000389c <_serial_call_back>:
    389c:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <crc_sum.1941>
    38a0:	86 0f       	add	r24, r22
    38a2:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <crc_sum.1941>
    38a6:	90 91 ac 09 	lds	r25, 0x09AC	; 0x8009ac <_mh_state>
    38aa:	91 30       	cpi	r25, 0x01	; 1
    38ac:	79 f0       	breq	.+30     	; 0x38cc <_serial_call_back+0x30>
    38ae:	28 f0       	brcs	.+10     	; 0x38ba <_serial_call_back+0x1e>
    38b0:	92 30       	cpi	r25, 0x02	; 2
    38b2:	a9 f0       	breq	.+42     	; 0x38de <_serial_call_back+0x42>
    38b4:	93 30       	cpi	r25, 0x03	; 3
    38b6:	19 f1       	breq	.+70     	; 0x38fe <_serial_call_back+0x62>
    38b8:	08 95       	ret
    38ba:	6f 3f       	cpi	r22, 0xFF	; 255
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <_serial_call_back+0x24>
    38be:	48 c0       	rjmp	.+144    	; 0x3950 <_serial_call_back+0xb4>
    38c0:	10 92 a9 09 	sts	0x09A9, r1	; 0x8009a9 <crc_sum.1941>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    38ca:	08 95       	ret
    38cc:	66 38       	cpi	r22, 0x86	; 134
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <_serial_call_back+0x36>
    38d0:	3f c0       	rjmp	.+126    	; 0x3950 <_serial_call_back+0xb4>
    38d2:	10 92 a8 09 	sts	0x09A8, r1	; 0x8009a8 <inDex.1939>
    38d6:	82 e0       	ldi	r24, 0x02	; 2
    38d8:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    38dc:	08 95       	ret
    38de:	e0 91 a8 09 	lds	r30, 0x09A8	; 0x8009a8 <inDex.1939>
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	8e 0f       	add	r24, r30
    38e6:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <inDex.1939>
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	ea 55       	subi	r30, 0x5A	; 90
    38ee:	f6 4f       	sbci	r31, 0xF6	; 246
    38f0:	60 83       	st	Z, r22
    38f2:	82 30       	cpi	r24, 0x02	; 2
    38f4:	69 f5       	brne	.+90     	; 0x3950 <_serial_call_back+0xb4>
    38f6:	83 e0       	ldi	r24, 0x03	; 3
    38f8:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    38fc:	08 95       	ret
    38fe:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <inDex.1939>
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	29 0f       	add	r18, r25
    3906:	20 93 a8 09 	sts	0x09A8, r18	; 0x8009a8 <inDex.1939>
    390a:	96 30       	cpi	r25, 0x06	; 6
    390c:	09 f5       	brne	.+66     	; 0x3950 <_serial_call_back+0xb4>
    390e:	81 11       	cpse	r24, r1
    3910:	0e c0       	rjmp	.+28     	; 0x392e <_serial_call_back+0x92>
    3912:	e6 ea       	ldi	r30, 0xA6	; 166
    3914:	f9 e0       	ldi	r31, 0x09	; 9
    3916:	80 81       	ld	r24, Z
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	98 2f       	mov	r25, r24
    391c:	88 27       	eor	r24, r24
    391e:	21 81       	ldd	r18, Z+1	; 0x01
    3920:	82 0f       	add	r24, r18
    3922:	91 1d       	adc	r25, r1
    3924:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <_ppm+0x1>
    3928:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_ppm>
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <_serial_call_back+0x9a>
    392e:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_ppm+0x1>
    3932:	10 92 ad 09 	sts	0x09AD, r1	; 0x8009ad <_ppm>
    3936:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <_mh_state>
    393a:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <_app_call_back>
    393e:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <_app_call_back+0x1>
    3942:	30 97       	sbiw	r30, 0x00	; 0
    3944:	29 f0       	breq	.+10     	; 0x3950 <_serial_call_back+0xb4>
    3946:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <_ppm>
    394a:	90 91 ae 09 	lds	r25, 0x09AE	; 0x8009ae <_ppm+0x1>
    394e:	19 95       	eicall
    3950:	08 95       	ret

00003952 <mh_z19_create>:
    3952:	8f 92       	push	r8
    3954:	9f 92       	push	r9
    3956:	af 92       	push	r10
    3958:	cf 92       	push	r12
    395a:	ef 92       	push	r14
    395c:	0f 93       	push	r16
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	eb 01       	movw	r28, r22
    3964:	0f 2e       	mov	r0, r31
    3966:	fe e4       	ldi	r31, 0x4E	; 78
    3968:	8f 2e       	mov	r8, r31
    396a:	fc e1       	ldi	r31, 0x1C	; 28
    396c:	9f 2e       	mov	r9, r31
    396e:	f0 2d       	mov	r31, r0
    3970:	68 94       	set
    3972:	aa 24       	eor	r10, r10
    3974:	a4 f8       	bld	r10, 4
    3976:	68 94       	set
    3978:	cc 24       	eor	r12, r12
    397a:	c4 f8       	bld	r12, 4
    397c:	e1 2c       	mov	r14, r1
    397e:	00 e0       	ldi	r16, 0x00	; 0
    3980:	23 e0       	ldi	r18, 0x03	; 3
    3982:	40 e8       	ldi	r20, 0x80	; 128
    3984:	55 e2       	ldi	r21, 0x25	; 37
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
    398a:	40 d0       	rcall	.+128    	; 0x3a0c <serial_new_instance>
    398c:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <_serial+0x1>
    3990:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <_serial>
    3994:	d0 93 ab 09 	sts	0x09AB, r29	; 0x8009ab <_app_call_back+0x1>
    3998:	c0 93 aa 09 	sts	0x09AA, r28	; 0x8009aa <_app_call_back>
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	0f 91       	pop	r16
    39a2:	ef 90       	pop	r14
    39a4:	cf 90       	pop	r12
    39a6:	af 90       	pop	r10
    39a8:	9f 90       	pop	r9
    39aa:	8f 90       	pop	r8
    39ac:	08 95       	ret

000039ae <mh_z19_take_meassuring>:
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	29 97       	sbiw	r28, 0x09	; 9
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	de bf       	out	0x3e, r29	; 62
    39be:	0f be       	out	0x3f, r0	; 63
    39c0:	cd bf       	out	0x3d, r28	; 61
    39c2:	89 e0       	ldi	r24, 0x09	; 9
    39c4:	e1 e4       	ldi	r30, 0x41	; 65
    39c6:	f2 e0       	ldi	r31, 0x02	; 2
    39c8:	9e 01       	movw	r18, r28
    39ca:	2f 5f       	subi	r18, 0xFF	; 255
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	d9 01       	movw	r26, r18
    39d0:	01 90       	ld	r0, Z+
    39d2:	0d 92       	st	X+, r0
    39d4:	8a 95       	dec	r24
    39d6:	e1 f7       	brne	.-8      	; 0x39d0 <mh_z19_take_meassuring+0x22>
    39d8:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_ppm+0x1>
    39dc:	10 92 ad 09 	sts	0x09AD, r1	; 0x8009ad <_ppm>
    39e0:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <_serial>
    39e4:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <_serial+0x1>
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	31 f0       	breq	.+12     	; 0x39f8 <mh_z19_take_meassuring+0x4a>
    39ec:	42 2f       	mov	r20, r18
    39ee:	53 2f       	mov	r21, r19
    39f0:	69 e0       	ldi	r22, 0x09	; 9
    39f2:	c7 d0       	rcall	.+398    	; 0x3b82 <serial_send_bytes>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	01 c0       	rjmp	.+2      	; 0x39fa <mh_z19_take_meassuring+0x4c>
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	29 96       	adiw	r28, 0x09	; 9
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	08 95       	ret

00003a0c <serial_new_instance>:
    3a0c:	2f 92       	push	r2
    3a0e:	3f 92       	push	r3
    3a10:	4f 92       	push	r4
    3a12:	5f 92       	push	r5
    3a14:	6f 92       	push	r6
    3a16:	7f 92       	push	r7
    3a18:	8f 92       	push	r8
    3a1a:	9f 92       	push	r9
    3a1c:	af 92       	push	r10
    3a1e:	cf 92       	push	r12
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	f8 2e       	mov	r15, r24
    3a32:	2a 01       	movw	r4, r20
    3a34:	3b 01       	movw	r6, r22
    3a36:	88 e0       	ldi	r24, 0x08	; 8
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	9b d7       	rcall	.+3894   	; 0x4972 <malloc>
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	8f 2d       	mov	r24, r15
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	fc 01       	movw	r30, r24
    3a48:	ef 54       	subi	r30, 0x4F	; 79
    3a4a:	f6 4f       	sbci	r31, 0xF6	; 246
    3a4c:	11 83       	std	Z+1, r17	; 0x01
    3a4e:	00 83       	st	Z, r16
    3a50:	fc 01       	movw	r30, r24
    3a52:	e6 5f       	subi	r30, 0xF6	; 246
    3a54:	fd 4f       	sbci	r31, 0xFD	; 253
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	d8 01       	movw	r26, r16
    3a5c:	8d 93       	st	X+, r24
    3a5e:	9c 93       	st	X, r25
    3a60:	6c 2d       	mov	r22, r12
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	84 e0       	ldi	r24, 0x04	; 4
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	6a d7       	rcall	.+3796   	; 0x493e <calloc>
    3a6a:	1c 01       	movw	r2, r24
    3a6c:	61 e0       	ldi	r22, 0x01	; 1
    3a6e:	70 e0       	ldi	r23, 0x00	; 0
    3a70:	86 e0       	ldi	r24, 0x06	; 6
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	64 d7       	rcall	.+3784   	; 0x493e <calloc>
    3a76:	7c 01       	movw	r14, r24
    3a78:	4c 2d       	mov	r20, r12
    3a7a:	b1 01       	movw	r22, r2
    3a7c:	2b d5       	rcall	.+2646   	; 0x44d4 <fifo_init>
    3a7e:	f8 01       	movw	r30, r16
    3a80:	f5 82       	std	Z+5, r15	; 0x05
    3a82:	e4 82       	std	Z+4, r14	; 0x04
    3a84:	6a 2d       	mov	r22, r10
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	84 e0       	ldi	r24, 0x04	; 4
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	58 d7       	rcall	.+3760   	; 0x493e <calloc>
    3a8e:	1c 01       	movw	r2, r24
    3a90:	61 e0       	ldi	r22, 0x01	; 1
    3a92:	70 e0       	ldi	r23, 0x00	; 0
    3a94:	86 e0       	ldi	r24, 0x06	; 6
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	52 d7       	rcall	.+3748   	; 0x493e <calloc>
    3a9a:	7c 01       	movw	r14, r24
    3a9c:	4a 2d       	mov	r20, r10
    3a9e:	b1 01       	movw	r22, r2
    3aa0:	19 d5       	rcall	.+2610   	; 0x44d4 <fifo_init>
    3aa2:	d8 01       	movw	r26, r16
    3aa4:	13 96       	adiw	r26, 0x03	; 3
    3aa6:	fc 92       	st	X, r15
    3aa8:	ee 92       	st	-X, r14
    3aaa:	12 97       	sbiw	r26, 0x02	; 2
    3aac:	17 96       	adiw	r26, 0x07	; 7
    3aae:	9c 92       	st	X, r9
    3ab0:	8e 92       	st	-X, r8
    3ab2:	16 97       	sbiw	r26, 0x06	; 6
    3ab4:	ff b6       	in	r15, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	ed 91       	ld	r30, X+
    3aba:	fc 91       	ld	r31, X
    3abc:	11 97       	sbiw	r26, 0x01	; 1
    3abe:	36 97       	sbiw	r30, 0x06	; 6
    3ac0:	80 81       	ld	r24, Z
    3ac2:	82 60       	ori	r24, 0x02	; 2
    3ac4:	80 83       	st	Z, r24
    3ac6:	8d 90       	ld	r8, X+
    3ac8:	9c 90       	ld	r9, X
    3aca:	c3 01       	movw	r24, r6
    3acc:	b2 01       	movw	r22, r4
    3ace:	1c d6       	rcall	.+3128   	; 0x4708 <__floatunsisf>
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	51 e4       	ldi	r21, 0x41	; 65
    3ad8:	a5 d6       	rcall	.+3402   	; 0x4824 <__mulsf3>
    3ada:	9b 01       	movw	r18, r22
    3adc:	ac 01       	movw	r20, r24
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	74 e2       	ldi	r23, 0x24	; 36
    3ae2:	84 e7       	ldi	r24, 0x74	; 116
    3ae4:	9b e4       	ldi	r25, 0x4B	; 75
    3ae6:	77 d5       	rcall	.+2798   	; 0x45d6 <__divsf3>
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	0d d5       	rcall	.+2586   	; 0x450c <__subsf3>
    3af2:	de d5       	rcall	.+3004   	; 0x46b0 <__fixunssfsi>
    3af4:	f4 01       	movw	r30, r8
    3af6:	32 97       	sbiw	r30, 0x02	; 2
    3af8:	60 83       	st	Z, r22
    3afa:	d8 01       	movw	r26, r16
    3afc:	ed 91       	ld	r30, X+
    3afe:	fc 91       	ld	r31, X
    3b00:	11 97       	sbiw	r26, 0x01	; 1
    3b02:	35 97       	sbiw	r30, 0x05	; 5
    3b04:	88 e9       	ldi	r24, 0x98	; 152
    3b06:	80 83       	st	Z, r24
    3b08:	ed 91       	ld	r30, X+
    3b0a:	fc 91       	ld	r31, X
    3b0c:	34 97       	sbiw	r30, 0x04	; 4
    3b0e:	86 e0       	ldi	r24, 0x06	; 6
    3b10:	80 83       	st	Z, r24
    3b12:	ff be       	out	0x3f, r15	; 63
    3b14:	c8 01       	movw	r24, r16
    3b16:	df 91       	pop	r29
    3b18:	cf 91       	pop	r28
    3b1a:	1f 91       	pop	r17
    3b1c:	0f 91       	pop	r16
    3b1e:	ff 90       	pop	r15
    3b20:	ef 90       	pop	r14
    3b22:	cf 90       	pop	r12
    3b24:	af 90       	pop	r10
    3b26:	9f 90       	pop	r9
    3b28:	8f 90       	pop	r8
    3b2a:	7f 90       	pop	r7
    3b2c:	6f 90       	pop	r6
    3b2e:	5f 90       	pop	r5
    3b30:	4f 90       	pop	r4
    3b32:	3f 90       	pop	r3
    3b34:	2f 90       	pop	r2
    3b36:	08 95       	ret

00003b38 <serial_send_byte>:
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
    3b3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3b40:	fb 81       	ldd	r31, Y+3	; 0x03
    3b42:	93 81       	ldd	r25, Z+3	; 0x03
    3b44:	82 81       	ldd	r24, Z+2	; 0x02
    3b46:	25 81       	ldd	r18, Z+5	; 0x05
    3b48:	98 1b       	sub	r25, r24
    3b4a:	92 23       	and	r25, r18
    3b4c:	84 81       	ldd	r24, Z+4	; 0x04
    3b4e:	98 17       	cp	r25, r24
    3b50:	a1 f0       	breq	.+40     	; 0x3b7a <serial_send_byte+0x42>
    3b52:	93 81       	ldd	r25, Z+3	; 0x03
    3b54:	26 95       	lsr	r18
    3b56:	29 23       	and	r18, r25
    3b58:	a0 81       	ld	r26, Z
    3b5a:	b1 81       	ldd	r27, Z+1	; 0x01
    3b5c:	a2 0f       	add	r26, r18
    3b5e:	b1 1d       	adc	r27, r1
    3b60:	6c 93       	st	X, r22
    3b62:	9f 5f       	subi	r25, 0xFF	; 255
    3b64:	25 81       	ldd	r18, Z+5	; 0x05
    3b66:	92 23       	and	r25, r18
    3b68:	93 83       	std	Z+3, r25	; 0x03
    3b6a:	e8 81       	ld	r30, Y
    3b6c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b6e:	35 97       	sbiw	r30, 0x05	; 5
    3b70:	80 81       	ld	r24, Z
    3b72:	80 62       	ori	r24, 0x20	; 32
    3b74:	80 83       	st	Z, r24
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	01 c0       	rjmp	.+2      	; 0x3b7c <serial_send_byte+0x44>
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	08 95       	ret

00003b82 <serial_send_bytes>:
    3b82:	ef 92       	push	r14
    3b84:	ff 92       	push	r15
    3b86:	0f 93       	push	r16
    3b88:	1f 93       	push	r17
    3b8a:	cf 93       	push	r28
    3b8c:	df 93       	push	r29
    3b8e:	7c 01       	movw	r14, r24
    3b90:	dc 01       	movw	r26, r24
    3b92:	12 96       	adiw	r26, 0x02	; 2
    3b94:	ed 91       	ld	r30, X+
    3b96:	fc 91       	ld	r31, X
    3b98:	13 97       	sbiw	r26, 0x03	; 3
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	98 1b       	sub	r25, r24
    3ba0:	85 81       	ldd	r24, Z+5	; 0x05
    3ba2:	98 23       	and	r25, r24
    3ba4:	84 81       	ldd	r24, Z+4	; 0x04
    3ba6:	89 1b       	sub	r24, r25
    3ba8:	86 17       	cp	r24, r22
    3baa:	98 f1       	brcs	.+102    	; 0x3c12 <serial_send_bytes+0x90>
    3bac:	66 23       	and	r22, r22
    3bae:	41 f1       	breq	.+80     	; 0x3c00 <serial_send_bytes+0x7e>
    3bb0:	84 2f       	mov	r24, r20
    3bb2:	95 2f       	mov	r25, r21
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	61 50       	subi	r22, 0x01	; 1
    3bb8:	46 2f       	mov	r20, r22
    3bba:	50 e0       	ldi	r21, 0x00	; 0
    3bbc:	4f 5f       	subi	r20, 0xFF	; 255
    3bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc0:	48 0f       	add	r20, r24
    3bc2:	59 1f       	adc	r21, r25
    3bc4:	e7 01       	movw	r28, r14
    3bc6:	ea 81       	ldd	r30, Y+2	; 0x02
    3bc8:	fb 81       	ldd	r31, Y+3	; 0x03
    3bca:	93 81       	ldd	r25, Z+3	; 0x03
    3bcc:	82 81       	ldd	r24, Z+2	; 0x02
    3bce:	25 81       	ldd	r18, Z+5	; 0x05
    3bd0:	98 1b       	sub	r25, r24
    3bd2:	92 23       	and	r25, r18
    3bd4:	84 81       	ldd	r24, Z+4	; 0x04
    3bd6:	98 17       	cp	r25, r24
    3bd8:	79 f0       	breq	.+30     	; 0x3bf8 <serial_send_bytes+0x76>
    3bda:	8c 91       	ld	r24, X
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	26 95       	lsr	r18
    3be0:	29 23       	and	r18, r25
    3be2:	60 81       	ld	r22, Z
    3be4:	71 81       	ldd	r23, Z+1	; 0x01
    3be6:	8b 01       	movw	r16, r22
    3be8:	02 0f       	add	r16, r18
    3bea:	11 1d       	adc	r17, r1
    3bec:	e8 01       	movw	r28, r16
    3bee:	88 83       	st	Y, r24
    3bf0:	9f 5f       	subi	r25, 0xFF	; 255
    3bf2:	85 81       	ldd	r24, Z+5	; 0x05
    3bf4:	98 23       	and	r25, r24
    3bf6:	93 83       	std	Z+3, r25	; 0x03
    3bf8:	11 96       	adiw	r26, 0x01	; 1
    3bfa:	a4 17       	cp	r26, r20
    3bfc:	b5 07       	cpc	r27, r21
    3bfe:	11 f7       	brne	.-60     	; 0x3bc4 <serial_send_bytes+0x42>
    3c00:	d7 01       	movw	r26, r14
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	35 97       	sbiw	r30, 0x05	; 5
    3c08:	80 81       	ld	r24, Z
    3c0a:	80 62       	ori	r24, 0x20	; 32
    3c0c:	80 83       	st	Z, r24
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	01 c0       	rjmp	.+2      	; 0x3c14 <serial_send_bytes+0x92>
    3c12:	82 e0       	ldi	r24, 0x02	; 2
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	ff 90       	pop	r15
    3c1e:	ef 90       	pop	r14
    3c20:	08 95       	ret

00003c22 <serial_get_byte>:
    3c22:	dc 01       	movw	r26, r24
    3c24:	14 96       	adiw	r26, 0x04	; 4
    3c26:	ed 91       	ld	r30, X+
    3c28:	fc 91       	ld	r31, X
    3c2a:	15 97       	sbiw	r26, 0x05	; 5
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	98 17       	cp	r25, r24
    3c32:	89 f0       	breq	.+34     	; 0x3c56 <serial_get_byte+0x34>
    3c34:	92 81       	ldd	r25, Z+2	; 0x02
    3c36:	85 81       	ldd	r24, Z+5	; 0x05
    3c38:	86 95       	lsr	r24
    3c3a:	89 23       	and	r24, r25
    3c3c:	a0 81       	ld	r26, Z
    3c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c40:	a8 0f       	add	r26, r24
    3c42:	b1 1d       	adc	r27, r1
    3c44:	8c 91       	ld	r24, X
    3c46:	db 01       	movw	r26, r22
    3c48:	8c 93       	st	X, r24
    3c4a:	9f 5f       	subi	r25, 0xFF	; 255
    3c4c:	85 81       	ldd	r24, Z+5	; 0x05
    3c4e:	98 23       	and	r25, r24
    3c50:	92 83       	std	Z+2, r25	; 0x02
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	08 95       	ret
    3c56:	83 e0       	ldi	r24, 0x03	; 3
    3c58:	08 95       	ret

00003c5a <__vector_25>:
    3c5a:	1f 92       	push	r1
    3c5c:	0f 92       	push	r0
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	0f 92       	push	r0
    3c62:	11 24       	eor	r1, r1
    3c64:	0b b6       	in	r0, 0x3b	; 59
    3c66:	0f 92       	push	r0
    3c68:	2f 93       	push	r18
    3c6a:	3f 93       	push	r19
    3c6c:	4f 93       	push	r20
    3c6e:	5f 93       	push	r21
    3c70:	6f 93       	push	r22
    3c72:	7f 93       	push	r23
    3c74:	8f 93       	push	r24
    3c76:	9f 93       	push	r25
    3c78:	af 93       	push	r26
    3c7a:	bf 93       	push	r27
    3c7c:	cf 93       	push	r28
    3c7e:	df 93       	push	r29
    3c80:	ef 93       	push	r30
    3c82:	ff 93       	push	r31
    3c84:	a0 91 b1 09 	lds	r26, 0x09B1	; 0x8009b1 <_ser_handle>
    3c88:	b0 91 b2 09 	lds	r27, 0x09B2	; 0x8009b2 <_ser_handle+0x1>
    3c8c:	10 97       	sbiw	r26, 0x00	; 0
    3c8e:	11 f1       	breq	.+68     	; 0x3cd4 <__vector_25+0x7a>
    3c90:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3c94:	14 96       	adiw	r26, 0x04	; 4
    3c96:	ed 91       	ld	r30, X+
    3c98:	fc 91       	ld	r31, X
    3c9a:	15 97       	sbiw	r26, 0x05	; 5
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	25 81       	ldd	r18, Z+5	; 0x05
    3ca2:	98 1b       	sub	r25, r24
    3ca4:	92 23       	and	r25, r18
    3ca6:	84 81       	ldd	r24, Z+4	; 0x04
    3ca8:	98 17       	cp	r25, r24
    3caa:	61 f0       	breq	.+24     	; 0x3cc4 <__vector_25+0x6a>
    3cac:	83 81       	ldd	r24, Z+3	; 0x03
    3cae:	26 95       	lsr	r18
    3cb0:	28 23       	and	r18, r24
    3cb2:	c0 81       	ld	r28, Z
    3cb4:	d1 81       	ldd	r29, Z+1	; 0x01
    3cb6:	c2 0f       	add	r28, r18
    3cb8:	d1 1d       	adc	r29, r1
    3cba:	68 83       	st	Y, r22
    3cbc:	8f 5f       	subi	r24, 0xFF	; 255
    3cbe:	95 81       	ldd	r25, Z+5	; 0x05
    3cc0:	89 23       	and	r24, r25
    3cc2:	83 83       	std	Z+3, r24	; 0x03
    3cc4:	16 96       	adiw	r26, 0x06	; 6
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	17 97       	sbiw	r26, 0x07	; 7
    3ccc:	30 97       	sbiw	r30, 0x00	; 0
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <__vector_25+0x7a>
    3cd0:	cd 01       	movw	r24, r26
    3cd2:	19 95       	eicall
    3cd4:	ff 91       	pop	r31
    3cd6:	ef 91       	pop	r30
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	bf 91       	pop	r27
    3cde:	af 91       	pop	r26
    3ce0:	9f 91       	pop	r25
    3ce2:	8f 91       	pop	r24
    3ce4:	7f 91       	pop	r23
    3ce6:	6f 91       	pop	r22
    3ce8:	5f 91       	pop	r21
    3cea:	4f 91       	pop	r20
    3cec:	3f 91       	pop	r19
    3cee:	2f 91       	pop	r18
    3cf0:	0f 90       	pop	r0
    3cf2:	0b be       	out	0x3b, r0	; 59
    3cf4:	0f 90       	pop	r0
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	0f 90       	pop	r0
    3cfa:	1f 90       	pop	r1
    3cfc:	18 95       	reti

00003cfe <__vector_26>:
    3cfe:	1f 92       	push	r1
    3d00:	0f 92       	push	r0
    3d02:	0f b6       	in	r0, 0x3f	; 63
    3d04:	0f 92       	push	r0
    3d06:	11 24       	eor	r1, r1
    3d08:	0b b6       	in	r0, 0x3b	; 59
    3d0a:	0f 92       	push	r0
    3d0c:	2f 93       	push	r18
    3d0e:	8f 93       	push	r24
    3d10:	9f 93       	push	r25
    3d12:	af 93       	push	r26
    3d14:	bf 93       	push	r27
    3d16:	ef 93       	push	r30
    3d18:	ff 93       	push	r31
    3d1a:	e0 91 b1 09 	lds	r30, 0x09B1	; 0x8009b1 <_ser_handle>
    3d1e:	f0 91 b2 09 	lds	r31, 0x09B2	; 0x8009b2 <_ser_handle+0x1>
    3d22:	30 97       	sbiw	r30, 0x00	; 0
    3d24:	b9 f0       	breq	.+46     	; 0x3d54 <__vector_26+0x56>
    3d26:	02 80       	ldd	r0, Z+2	; 0x02
    3d28:	f3 81       	ldd	r31, Z+3	; 0x03
    3d2a:	e0 2d       	mov	r30, r0
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	82 81       	ldd	r24, Z+2	; 0x02
    3d30:	98 17       	cp	r25, r24
    3d32:	b1 f0       	breq	.+44     	; 0x3d60 <__vector_26+0x62>
    3d34:	92 81       	ldd	r25, Z+2	; 0x02
    3d36:	85 81       	ldd	r24, Z+5	; 0x05
    3d38:	28 2f       	mov	r18, r24
    3d3a:	26 95       	lsr	r18
    3d3c:	29 23       	and	r18, r25
    3d3e:	a0 81       	ld	r26, Z
    3d40:	b1 81       	ldd	r27, Z+1	; 0x01
    3d42:	a2 0f       	add	r26, r18
    3d44:	b1 1d       	adc	r27, r1
    3d46:	2c 91       	ld	r18, X
    3d48:	9f 5f       	subi	r25, 0xFF	; 255
    3d4a:	89 23       	and	r24, r25
    3d4c:	82 83       	std	Z+2, r24	; 0x02
    3d4e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3d52:	0b c0       	rjmp	.+22     	; 0x3d6a <__vector_26+0x6c>
    3d54:	e1 ec       	ldi	r30, 0xC1	; 193
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	80 81       	ld	r24, Z
    3d5a:	8f 7d       	andi	r24, 0xDF	; 223
    3d5c:	80 83       	st	Z, r24
    3d5e:	05 c0       	rjmp	.+10     	; 0x3d6a <__vector_26+0x6c>
    3d60:	e1 ec       	ldi	r30, 0xC1	; 193
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	8f 7d       	andi	r24, 0xDF	; 223
    3d68:	80 83       	st	Z, r24
    3d6a:	ff 91       	pop	r31
    3d6c:	ef 91       	pop	r30
    3d6e:	bf 91       	pop	r27
    3d70:	af 91       	pop	r26
    3d72:	9f 91       	pop	r25
    3d74:	8f 91       	pop	r24
    3d76:	2f 91       	pop	r18
    3d78:	0f 90       	pop	r0
    3d7a:	0b be       	out	0x3b, r0	; 59
    3d7c:	0f 90       	pop	r0
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	0f 90       	pop	r0
    3d82:	1f 90       	pop	r1
    3d84:	18 95       	reti

00003d86 <__vector_36>:
    3d86:	1f 92       	push	r1
    3d88:	0f 92       	push	r0
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	0f 92       	push	r0
    3d8e:	11 24       	eor	r1, r1
    3d90:	0b b6       	in	r0, 0x3b	; 59
    3d92:	0f 92       	push	r0
    3d94:	2f 93       	push	r18
    3d96:	3f 93       	push	r19
    3d98:	4f 93       	push	r20
    3d9a:	5f 93       	push	r21
    3d9c:	6f 93       	push	r22
    3d9e:	7f 93       	push	r23
    3da0:	8f 93       	push	r24
    3da2:	9f 93       	push	r25
    3da4:	af 93       	push	r26
    3da6:	bf 93       	push	r27
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	ef 93       	push	r30
    3dae:	ff 93       	push	r31
    3db0:	a0 91 b3 09 	lds	r26, 0x09B3	; 0x8009b3 <_ser_handle+0x2>
    3db4:	b0 91 b4 09 	lds	r27, 0x09B4	; 0x8009b4 <_ser_handle+0x3>
    3db8:	10 97       	sbiw	r26, 0x00	; 0
    3dba:	11 f1       	breq	.+68     	; 0x3e00 <__vector_36+0x7a>
    3dbc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3dc0:	14 96       	adiw	r26, 0x04	; 4
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	15 97       	sbiw	r26, 0x05	; 5
    3dc8:	93 81       	ldd	r25, Z+3	; 0x03
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	25 81       	ldd	r18, Z+5	; 0x05
    3dce:	98 1b       	sub	r25, r24
    3dd0:	92 23       	and	r25, r18
    3dd2:	84 81       	ldd	r24, Z+4	; 0x04
    3dd4:	98 17       	cp	r25, r24
    3dd6:	61 f0       	breq	.+24     	; 0x3df0 <__vector_36+0x6a>
    3dd8:	83 81       	ldd	r24, Z+3	; 0x03
    3dda:	26 95       	lsr	r18
    3ddc:	28 23       	and	r18, r24
    3dde:	c0 81       	ld	r28, Z
    3de0:	d1 81       	ldd	r29, Z+1	; 0x01
    3de2:	c2 0f       	add	r28, r18
    3de4:	d1 1d       	adc	r29, r1
    3de6:	68 83       	st	Y, r22
    3de8:	8f 5f       	subi	r24, 0xFF	; 255
    3dea:	95 81       	ldd	r25, Z+5	; 0x05
    3dec:	89 23       	and	r24, r25
    3dee:	83 83       	std	Z+3, r24	; 0x03
    3df0:	16 96       	adiw	r26, 0x06	; 6
    3df2:	ed 91       	ld	r30, X+
    3df4:	fc 91       	ld	r31, X
    3df6:	17 97       	sbiw	r26, 0x07	; 7
    3df8:	30 97       	sbiw	r30, 0x00	; 0
    3dfa:	11 f0       	breq	.+4      	; 0x3e00 <__vector_36+0x7a>
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	19 95       	eicall
    3e00:	ff 91       	pop	r31
    3e02:	ef 91       	pop	r30
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	bf 91       	pop	r27
    3e0a:	af 91       	pop	r26
    3e0c:	9f 91       	pop	r25
    3e0e:	8f 91       	pop	r24
    3e10:	7f 91       	pop	r23
    3e12:	6f 91       	pop	r22
    3e14:	5f 91       	pop	r21
    3e16:	4f 91       	pop	r20
    3e18:	3f 91       	pop	r19
    3e1a:	2f 91       	pop	r18
    3e1c:	0f 90       	pop	r0
    3e1e:	0b be       	out	0x3b, r0	; 59
    3e20:	0f 90       	pop	r0
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	0f 90       	pop	r0
    3e26:	1f 90       	pop	r1
    3e28:	18 95       	reti

00003e2a <__vector_37>:
    3e2a:	1f 92       	push	r1
    3e2c:	0f 92       	push	r0
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	0f 92       	push	r0
    3e32:	11 24       	eor	r1, r1
    3e34:	0b b6       	in	r0, 0x3b	; 59
    3e36:	0f 92       	push	r0
    3e38:	2f 93       	push	r18
    3e3a:	8f 93       	push	r24
    3e3c:	9f 93       	push	r25
    3e3e:	af 93       	push	r26
    3e40:	bf 93       	push	r27
    3e42:	ef 93       	push	r30
    3e44:	ff 93       	push	r31
    3e46:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <_ser_handle+0x2>
    3e4a:	f0 91 b4 09 	lds	r31, 0x09B4	; 0x8009b4 <_ser_handle+0x3>
    3e4e:	30 97       	sbiw	r30, 0x00	; 0
    3e50:	b9 f0       	breq	.+46     	; 0x3e80 <__vector_37+0x56>
    3e52:	02 80       	ldd	r0, Z+2	; 0x02
    3e54:	f3 81       	ldd	r31, Z+3	; 0x03
    3e56:	e0 2d       	mov	r30, r0
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	82 81       	ldd	r24, Z+2	; 0x02
    3e5c:	98 17       	cp	r25, r24
    3e5e:	b1 f0       	breq	.+44     	; 0x3e8c <__vector_37+0x62>
    3e60:	92 81       	ldd	r25, Z+2	; 0x02
    3e62:	85 81       	ldd	r24, Z+5	; 0x05
    3e64:	28 2f       	mov	r18, r24
    3e66:	26 95       	lsr	r18
    3e68:	29 23       	and	r18, r25
    3e6a:	a0 81       	ld	r26, Z
    3e6c:	b1 81       	ldd	r27, Z+1	; 0x01
    3e6e:	a2 0f       	add	r26, r18
    3e70:	b1 1d       	adc	r27, r1
    3e72:	2c 91       	ld	r18, X
    3e74:	9f 5f       	subi	r25, 0xFF	; 255
    3e76:	89 23       	and	r24, r25
    3e78:	82 83       	std	Z+2, r24	; 0x02
    3e7a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e7e:	0b c0       	rjmp	.+22     	; 0x3e96 <__vector_37+0x6c>
    3e80:	e9 ec       	ldi	r30, 0xC9	; 201
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	8f 7d       	andi	r24, 0xDF	; 223
    3e88:	80 83       	st	Z, r24
    3e8a:	05 c0       	rjmp	.+10     	; 0x3e96 <__vector_37+0x6c>
    3e8c:	e9 ec       	ldi	r30, 0xC9	; 201
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	8f 7d       	andi	r24, 0xDF	; 223
    3e94:	80 83       	st	Z, r24
    3e96:	ff 91       	pop	r31
    3e98:	ef 91       	pop	r30
    3e9a:	bf 91       	pop	r27
    3e9c:	af 91       	pop	r26
    3e9e:	9f 91       	pop	r25
    3ea0:	8f 91       	pop	r24
    3ea2:	2f 91       	pop	r18
    3ea4:	0f 90       	pop	r0
    3ea6:	0b be       	out	0x3b, r0	; 59
    3ea8:	0f 90       	pop	r0
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	0f 90       	pop	r0
    3eae:	1f 90       	pop	r1
    3eb0:	18 95       	reti

00003eb2 <__vector_51>:
    3eb2:	1f 92       	push	r1
    3eb4:	0f 92       	push	r0
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	0f 92       	push	r0
    3eba:	11 24       	eor	r1, r1
    3ebc:	0b b6       	in	r0, 0x3b	; 59
    3ebe:	0f 92       	push	r0
    3ec0:	2f 93       	push	r18
    3ec2:	3f 93       	push	r19
    3ec4:	4f 93       	push	r20
    3ec6:	5f 93       	push	r21
    3ec8:	6f 93       	push	r22
    3eca:	7f 93       	push	r23
    3ecc:	8f 93       	push	r24
    3ece:	9f 93       	push	r25
    3ed0:	af 93       	push	r26
    3ed2:	bf 93       	push	r27
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	ef 93       	push	r30
    3eda:	ff 93       	push	r31
    3edc:	a0 91 b5 09 	lds	r26, 0x09B5	; 0x8009b5 <_ser_handle+0x4>
    3ee0:	b0 91 b6 09 	lds	r27, 0x09B6	; 0x8009b6 <_ser_handle+0x5>
    3ee4:	10 97       	sbiw	r26, 0x00	; 0
    3ee6:	11 f1       	breq	.+68     	; 0x3f2c <__vector_51+0x7a>
    3ee8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3eec:	14 96       	adiw	r26, 0x04	; 4
    3eee:	ed 91       	ld	r30, X+
    3ef0:	fc 91       	ld	r31, X
    3ef2:	15 97       	sbiw	r26, 0x05	; 5
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	25 81       	ldd	r18, Z+5	; 0x05
    3efa:	98 1b       	sub	r25, r24
    3efc:	92 23       	and	r25, r18
    3efe:	84 81       	ldd	r24, Z+4	; 0x04
    3f00:	98 17       	cp	r25, r24
    3f02:	61 f0       	breq	.+24     	; 0x3f1c <__vector_51+0x6a>
    3f04:	83 81       	ldd	r24, Z+3	; 0x03
    3f06:	26 95       	lsr	r18
    3f08:	28 23       	and	r18, r24
    3f0a:	c0 81       	ld	r28, Z
    3f0c:	d1 81       	ldd	r29, Z+1	; 0x01
    3f0e:	c2 0f       	add	r28, r18
    3f10:	d1 1d       	adc	r29, r1
    3f12:	68 83       	st	Y, r22
    3f14:	8f 5f       	subi	r24, 0xFF	; 255
    3f16:	95 81       	ldd	r25, Z+5	; 0x05
    3f18:	89 23       	and	r24, r25
    3f1a:	83 83       	std	Z+3, r24	; 0x03
    3f1c:	16 96       	adiw	r26, 0x06	; 6
    3f1e:	ed 91       	ld	r30, X+
    3f20:	fc 91       	ld	r31, X
    3f22:	17 97       	sbiw	r26, 0x07	; 7
    3f24:	30 97       	sbiw	r30, 0x00	; 0
    3f26:	11 f0       	breq	.+4      	; 0x3f2c <__vector_51+0x7a>
    3f28:	cd 01       	movw	r24, r26
    3f2a:	19 95       	eicall
    3f2c:	ff 91       	pop	r31
    3f2e:	ef 91       	pop	r30
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	bf 91       	pop	r27
    3f36:	af 91       	pop	r26
    3f38:	9f 91       	pop	r25
    3f3a:	8f 91       	pop	r24
    3f3c:	7f 91       	pop	r23
    3f3e:	6f 91       	pop	r22
    3f40:	5f 91       	pop	r21
    3f42:	4f 91       	pop	r20
    3f44:	3f 91       	pop	r19
    3f46:	2f 91       	pop	r18
    3f48:	0f 90       	pop	r0
    3f4a:	0b be       	out	0x3b, r0	; 59
    3f4c:	0f 90       	pop	r0
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	0f 90       	pop	r0
    3f52:	1f 90       	pop	r1
    3f54:	18 95       	reti

00003f56 <__vector_52>:
    3f56:	1f 92       	push	r1
    3f58:	0f 92       	push	r0
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	0f 92       	push	r0
    3f5e:	11 24       	eor	r1, r1
    3f60:	0b b6       	in	r0, 0x3b	; 59
    3f62:	0f 92       	push	r0
    3f64:	2f 93       	push	r18
    3f66:	8f 93       	push	r24
    3f68:	9f 93       	push	r25
    3f6a:	af 93       	push	r26
    3f6c:	bf 93       	push	r27
    3f6e:	ef 93       	push	r30
    3f70:	ff 93       	push	r31
    3f72:	e0 91 b5 09 	lds	r30, 0x09B5	; 0x8009b5 <_ser_handle+0x4>
    3f76:	f0 91 b6 09 	lds	r31, 0x09B6	; 0x8009b6 <_ser_handle+0x5>
    3f7a:	30 97       	sbiw	r30, 0x00	; 0
    3f7c:	b9 f0       	breq	.+46     	; 0x3fac <__vector_52+0x56>
    3f7e:	02 80       	ldd	r0, Z+2	; 0x02
    3f80:	f3 81       	ldd	r31, Z+3	; 0x03
    3f82:	e0 2d       	mov	r30, r0
    3f84:	93 81       	ldd	r25, Z+3	; 0x03
    3f86:	82 81       	ldd	r24, Z+2	; 0x02
    3f88:	98 17       	cp	r25, r24
    3f8a:	b1 f0       	breq	.+44     	; 0x3fb8 <__vector_52+0x62>
    3f8c:	92 81       	ldd	r25, Z+2	; 0x02
    3f8e:	85 81       	ldd	r24, Z+5	; 0x05
    3f90:	28 2f       	mov	r18, r24
    3f92:	26 95       	lsr	r18
    3f94:	29 23       	and	r18, r25
    3f96:	a0 81       	ld	r26, Z
    3f98:	b1 81       	ldd	r27, Z+1	; 0x01
    3f9a:	a2 0f       	add	r26, r18
    3f9c:	b1 1d       	adc	r27, r1
    3f9e:	2c 91       	ld	r18, X
    3fa0:	9f 5f       	subi	r25, 0xFF	; 255
    3fa2:	89 23       	and	r24, r25
    3fa4:	82 83       	std	Z+2, r24	; 0x02
    3fa6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3faa:	0b c0       	rjmp	.+22     	; 0x3fc2 <__vector_52+0x6c>
    3fac:	e1 ed       	ldi	r30, 0xD1	; 209
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8f 7d       	andi	r24, 0xDF	; 223
    3fb4:	80 83       	st	Z, r24
    3fb6:	05 c0       	rjmp	.+10     	; 0x3fc2 <__vector_52+0x6c>
    3fb8:	e1 ed       	ldi	r30, 0xD1	; 209
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8f 7d       	andi	r24, 0xDF	; 223
    3fc0:	80 83       	st	Z, r24
    3fc2:	ff 91       	pop	r31
    3fc4:	ef 91       	pop	r30
    3fc6:	bf 91       	pop	r27
    3fc8:	af 91       	pop	r26
    3fca:	9f 91       	pop	r25
    3fcc:	8f 91       	pop	r24
    3fce:	2f 91       	pop	r18
    3fd0:	0f 90       	pop	r0
    3fd2:	0b be       	out	0x3b, r0	; 59
    3fd4:	0f 90       	pop	r0
    3fd6:	0f be       	out	0x3f, r0	; 63
    3fd8:	0f 90       	pop	r0
    3fda:	1f 90       	pop	r1
    3fdc:	18 95       	reti

00003fde <__vector_54>:
    3fde:	1f 92       	push	r1
    3fe0:	0f 92       	push	r0
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	0f 92       	push	r0
    3fe6:	11 24       	eor	r1, r1
    3fe8:	0b b6       	in	r0, 0x3b	; 59
    3fea:	0f 92       	push	r0
    3fec:	2f 93       	push	r18
    3fee:	3f 93       	push	r19
    3ff0:	4f 93       	push	r20
    3ff2:	5f 93       	push	r21
    3ff4:	6f 93       	push	r22
    3ff6:	7f 93       	push	r23
    3ff8:	8f 93       	push	r24
    3ffa:	9f 93       	push	r25
    3ffc:	af 93       	push	r26
    3ffe:	bf 93       	push	r27
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	ef 93       	push	r30
    4006:	ff 93       	push	r31
    4008:	a0 91 b7 09 	lds	r26, 0x09B7	; 0x8009b7 <_ser_handle+0x6>
    400c:	b0 91 b8 09 	lds	r27, 0x09B8	; 0x8009b8 <_ser_handle+0x7>
    4010:	10 97       	sbiw	r26, 0x00	; 0
    4012:	11 f1       	breq	.+68     	; 0x4058 <__vector_54+0x7a>
    4014:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4018:	14 96       	adiw	r26, 0x04	; 4
    401a:	ed 91       	ld	r30, X+
    401c:	fc 91       	ld	r31, X
    401e:	15 97       	sbiw	r26, 0x05	; 5
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	25 81       	ldd	r18, Z+5	; 0x05
    4026:	98 1b       	sub	r25, r24
    4028:	92 23       	and	r25, r18
    402a:	84 81       	ldd	r24, Z+4	; 0x04
    402c:	98 17       	cp	r25, r24
    402e:	61 f0       	breq	.+24     	; 0x4048 <__vector_54+0x6a>
    4030:	83 81       	ldd	r24, Z+3	; 0x03
    4032:	26 95       	lsr	r18
    4034:	28 23       	and	r18, r24
    4036:	c0 81       	ld	r28, Z
    4038:	d1 81       	ldd	r29, Z+1	; 0x01
    403a:	c2 0f       	add	r28, r18
    403c:	d1 1d       	adc	r29, r1
    403e:	68 83       	st	Y, r22
    4040:	8f 5f       	subi	r24, 0xFF	; 255
    4042:	95 81       	ldd	r25, Z+5	; 0x05
    4044:	89 23       	and	r24, r25
    4046:	83 83       	std	Z+3, r24	; 0x03
    4048:	16 96       	adiw	r26, 0x06	; 6
    404a:	ed 91       	ld	r30, X+
    404c:	fc 91       	ld	r31, X
    404e:	17 97       	sbiw	r26, 0x07	; 7
    4050:	30 97       	sbiw	r30, 0x00	; 0
    4052:	11 f0       	breq	.+4      	; 0x4058 <__vector_54+0x7a>
    4054:	cd 01       	movw	r24, r26
    4056:	19 95       	eicall
    4058:	ff 91       	pop	r31
    405a:	ef 91       	pop	r30
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	bf 91       	pop	r27
    4062:	af 91       	pop	r26
    4064:	9f 91       	pop	r25
    4066:	8f 91       	pop	r24
    4068:	7f 91       	pop	r23
    406a:	6f 91       	pop	r22
    406c:	5f 91       	pop	r21
    406e:	4f 91       	pop	r20
    4070:	3f 91       	pop	r19
    4072:	2f 91       	pop	r18
    4074:	0f 90       	pop	r0
    4076:	0b be       	out	0x3b, r0	; 59
    4078:	0f 90       	pop	r0
    407a:	0f be       	out	0x3f, r0	; 63
    407c:	0f 90       	pop	r0
    407e:	1f 90       	pop	r1
    4080:	18 95       	reti

00004082 <__vector_55>:
    4082:	1f 92       	push	r1
    4084:	0f 92       	push	r0
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	0f 92       	push	r0
    408a:	11 24       	eor	r1, r1
    408c:	0b b6       	in	r0, 0x3b	; 59
    408e:	0f 92       	push	r0
    4090:	2f 93       	push	r18
    4092:	8f 93       	push	r24
    4094:	9f 93       	push	r25
    4096:	af 93       	push	r26
    4098:	bf 93       	push	r27
    409a:	ef 93       	push	r30
    409c:	ff 93       	push	r31
    409e:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <_ser_handle+0x6>
    40a2:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <_ser_handle+0x7>
    40a6:	30 97       	sbiw	r30, 0x00	; 0
    40a8:	b9 f0       	breq	.+46     	; 0x40d8 <__vector_55+0x56>
    40aa:	02 80       	ldd	r0, Z+2	; 0x02
    40ac:	f3 81       	ldd	r31, Z+3	; 0x03
    40ae:	e0 2d       	mov	r30, r0
    40b0:	93 81       	ldd	r25, Z+3	; 0x03
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	98 17       	cp	r25, r24
    40b6:	b1 f0       	breq	.+44     	; 0x40e4 <__vector_55+0x62>
    40b8:	92 81       	ldd	r25, Z+2	; 0x02
    40ba:	85 81       	ldd	r24, Z+5	; 0x05
    40bc:	28 2f       	mov	r18, r24
    40be:	26 95       	lsr	r18
    40c0:	29 23       	and	r18, r25
    40c2:	a0 81       	ld	r26, Z
    40c4:	b1 81       	ldd	r27, Z+1	; 0x01
    40c6:	a2 0f       	add	r26, r18
    40c8:	b1 1d       	adc	r27, r1
    40ca:	2c 91       	ld	r18, X
    40cc:	9f 5f       	subi	r25, 0xFF	; 255
    40ce:	89 23       	and	r24, r25
    40d0:	82 83       	std	Z+2, r24	; 0x02
    40d2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    40d6:	0b c0       	rjmp	.+22     	; 0x40ee <__vector_55+0x6c>
    40d8:	e1 e3       	ldi	r30, 0x31	; 49
    40da:	f1 e0       	ldi	r31, 0x01	; 1
    40dc:	80 81       	ld	r24, Z
    40de:	8f 7d       	andi	r24, 0xDF	; 223
    40e0:	80 83       	st	Z, r24
    40e2:	05 c0       	rjmp	.+10     	; 0x40ee <__vector_55+0x6c>
    40e4:	e1 e3       	ldi	r30, 0x31	; 49
    40e6:	f1 e0       	ldi	r31, 0x01	; 1
    40e8:	80 81       	ld	r24, Z
    40ea:	8f 7d       	andi	r24, 0xDF	; 223
    40ec:	80 83       	st	Z, r24
    40ee:	ff 91       	pop	r31
    40f0:	ef 91       	pop	r30
    40f2:	bf 91       	pop	r27
    40f4:	af 91       	pop	r26
    40f6:	9f 91       	pop	r25
    40f8:	8f 91       	pop	r24
    40fa:	2f 91       	pop	r18
    40fc:	0f 90       	pop	r0
    40fe:	0b be       	out	0x3b, r0	; 59
    4100:	0f 90       	pop	r0
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	0f 90       	pop	r0
    4106:	1f 90       	pop	r1
    4108:	18 95       	reti

0000410a <usart_getchar>:
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	1f 92       	push	r1
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
    4114:	be 01       	movw	r22, r28
    4116:	6f 5f       	subi	r22, 0xFF	; 255
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <_com_serial_instance>
    411e:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <_com_serial_instance+0x1>
    4122:	7f dd       	rcall	.-1282   	; 0x3c22 <serial_get_byte>
    4124:	81 11       	cpse	r24, r1
    4126:	f6 cf       	rjmp	.-20     	; 0x4114 <usart_getchar+0xa>
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0f 90       	pop	r0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	08 95       	ret

00004134 <usart_putchar>:
    4134:	68 2f       	mov	r22, r24
    4136:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <_com_serial_instance>
    413a:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <_com_serial_instance+0x1>
    413e:	fc dc       	rcall	.-1544   	; 0x3b38 <serial_send_byte>
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	08 95       	ret

00004146 <stdioCreate>:
    4146:	8f 92       	push	r8
    4148:	9f 92       	push	r9
    414a:	af 92       	push	r10
    414c:	cf 92       	push	r12
    414e:	ef 92       	push	r14
    4150:	0f 93       	push	r16
    4152:	81 2c       	mov	r8, r1
    4154:	91 2c       	mov	r9, r1
    4156:	68 94       	set
    4158:	aa 24       	eor	r10, r10
    415a:	a7 f8       	bld	r10, 7
    415c:	68 94       	set
    415e:	cc 24       	eor	r12, r12
    4160:	c7 f8       	bld	r12, 7
    4162:	e1 2c       	mov	r14, r1
    4164:	00 e0       	ldi	r16, 0x00	; 0
    4166:	23 e0       	ldi	r18, 0x03	; 3
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	51 ee       	ldi	r21, 0xE1	; 225
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	4d dc       	rcall	.-1894   	; 0x3a0c <serial_new_instance>
    4172:	90 93 ba 09 	sts	0x09BA, r25	; 0x8009ba <_com_serial_instance+0x1>
    4176:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_com_serial_instance>
    417a:	e5 ef       	ldi	r30, 0xF5	; 245
    417c:	f9 e0       	ldi	r31, 0x09	; 9
    417e:	82 e1       	ldi	r24, 0x12	; 18
    4180:	92 e0       	ldi	r25, 0x02	; 2
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	80 83       	st	Z, r24
    4186:	93 83       	std	Z+3, r25	; 0x03
    4188:	82 83       	std	Z+2, r24	; 0x02
    418a:	0f 91       	pop	r16
    418c:	ef 90       	pop	r14
    418e:	cf 90       	pop	r12
    4190:	af 90       	pop	r10
    4192:	9f 90       	pop	r9
    4194:	8f 90       	pop	r8
    4196:	08 95       	ret

00004198 <_initTwiInterface>:
    4198:	80 91 c9 09 	lds	r24, 0x09C9	; 0x8009c9 <_twiIsInitiated>
    419c:	81 11       	cpse	r24, r1
    419e:	0c c0       	rjmp	.+24     	; 0x41b8 <_initTwiInterface+0x20>
    41a0:	8c e0       	ldi	r24, 0x0C	; 12
    41a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    41a6:	8f ef       	ldi	r24, 0xFF	; 255
    41a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    41ac:	84 e0       	ldi	r24, 0x04	; 4
    41ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	80 93 c9 09 	sts	0x09C9, r24	; 0x8009c9 <_twiIsInitiated>
    41b8:	08 95       	ret

000041ba <twiCreate>:
    41ba:	af 92       	push	r10
    41bc:	bf 92       	push	r11
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	a8 2e       	mov	r10, r24
    41d0:	b6 2e       	mov	r11, r22
    41d2:	69 01       	movw	r12, r18
    41d4:	7a 01       	movw	r14, r20
    41d6:	84 e0       	ldi	r24, 0x04	; 4
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	cb d3       	rcall	.+1942   	; 0x4972 <malloc>
    41dc:	ec 01       	movw	r28, r24
    41de:	89 2b       	or	r24, r25
    41e0:	61 f1       	breq	.+88     	; 0x423a <twiCreate+0x80>
    41e2:	a8 82       	st	Y, r10
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	b8 12       	cpse	r11, r24
    41e8:	12 c0       	rjmp	.+36     	; 0x420e <twiCreate+0x54>
    41ea:	c7 01       	movw	r24, r14
    41ec:	b6 01       	movw	r22, r12
    41ee:	20 ea       	ldi	r18, 0xA0	; 160
    41f0:	36 e8       	ldi	r19, 0x86	; 134
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	79 d3       	rcall	.+1778   	; 0x48ea <__udivmodsi4>
    41f8:	da 01       	movw	r26, r20
    41fa:	c9 01       	movw	r24, r18
    41fc:	40 97       	sbiw	r24, 0x10	; 16
    41fe:	a1 09       	sbc	r26, r1
    4200:	b1 09       	sbc	r27, r1
    4202:	b6 95       	lsr	r27
    4204:	a7 95       	ror	r26
    4206:	97 95       	ror	r25
    4208:	87 95       	ror	r24
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	11 c0       	rjmp	.+34     	; 0x4230 <twiCreate+0x76>
    420e:	c7 01       	movw	r24, r14
    4210:	b6 01       	movw	r22, r12
    4212:	20 e8       	ldi	r18, 0x80	; 128
    4214:	3a e1       	ldi	r19, 0x1A	; 26
    4216:	46 e0       	ldi	r20, 0x06	; 6
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	67 d3       	rcall	.+1742   	; 0x48ea <__udivmodsi4>
    421c:	da 01       	movw	r26, r20
    421e:	c9 01       	movw	r24, r18
    4220:	40 97       	sbiw	r24, 0x10	; 16
    4222:	a1 09       	sbc	r26, r1
    4224:	b1 09       	sbc	r27, r1
    4226:	b6 95       	lsr	r27
    4228:	a7 95       	ror	r26
    422a:	97 95       	ror	r25
    422c:	87 95       	ror	r24
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	1b 83       	std	Y+3, r17	; 0x03
    4232:	0a 83       	std	Y+2, r16	; 0x02
    4234:	8c 2f       	mov	r24, r28
    4236:	9d 2f       	mov	r25, r29
    4238:	02 c0       	rjmp	.+4      	; 0x423e <twiCreate+0x84>
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	ff 90       	pop	r15
    4248:	ef 90       	pop	r14
    424a:	df 90       	pop	r13
    424c:	cf 90       	pop	r12
    424e:	bf 90       	pop	r11
    4250:	af 90       	pop	r10
    4252:	08 95       	ret

00004254 <twiIsBusy>:
    4254:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4258:	81 70       	andi	r24, 0x01	; 1
    425a:	08 95       	ret

0000425c <twiTransmit>:
    425c:	ff 92       	push	r15
    425e:	0f 93       	push	r16
    4260:	1f 93       	push	r17
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	d1 f1       	breq	.+116    	; 0x42de <twiTransmit+0x82>
    426a:	4a 30       	cpi	r20, 0x0A	; 10
    426c:	d0 f5       	brcc	.+116    	; 0x42e2 <twiTransmit+0x86>
    426e:	f4 2e       	mov	r15, r20
    4270:	8b 01       	movw	r16, r22
    4272:	ec 01       	movw	r28, r24
    4274:	ef df       	rcall	.-34     	; 0x4254 <twiIsBusy>
    4276:	81 11       	cpse	r24, r1
    4278:	36 c0       	rjmp	.+108    	; 0x42e6 <twiTransmit+0x8a>
    427a:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiCurrentHandler>
    427e:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <_twiCurrentHandler+0x1>
    4282:	c8 17       	cp	r28, r24
    4284:	d9 07       	cpc	r29, r25
    4286:	41 f0       	breq	.+16     	; 0x4298 <twiTransmit+0x3c>
    4288:	87 df       	rcall	.-242    	; 0x4198 <_initTwiInterface>
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4290:	d0 93 bd 09 	sts	0x09BD, r29	; 0x8009bd <_twiCurrentHandler+0x1>
    4294:	c0 93 bc 09 	sts	0x09BC, r28	; 0x8009bc <_twiCurrentHandler>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	8f 0d       	add	r24, r15
    429c:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <_twiMessageLen>
    42a0:	88 81       	ld	r24, Y
    42a2:	88 0f       	add	r24, r24
    42a4:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <_twiMessageBuffer>
    42a8:	ff 20       	and	r15, r15
    42aa:	89 f0       	breq	.+34     	; 0x42ce <twiTransmit+0x72>
    42ac:	f8 01       	movw	r30, r16
    42ae:	a0 ec       	ldi	r26, 0xC0	; 192
    42b0:	b9 e0       	ldi	r27, 0x09	; 9
    42b2:	4f ef       	ldi	r20, 0xFF	; 255
    42b4:	4f 0d       	add	r20, r15
    42b6:	64 2f       	mov	r22, r20
    42b8:	70 e0       	ldi	r23, 0x00	; 0
    42ba:	cb 01       	movw	r24, r22
    42bc:	01 96       	adiw	r24, 0x01	; 1
    42be:	b8 01       	movw	r22, r16
    42c0:	68 0f       	add	r22, r24
    42c2:	79 1f       	adc	r23, r25
    42c4:	81 91       	ld	r24, Z+
    42c6:	8d 93       	st	X+, r24
    42c8:	e6 17       	cp	r30, r22
    42ca:	f7 07       	cpc	r31, r23
    42cc:	d9 f7       	brne	.-10     	; 0x42c4 <twiTransmit+0x68>
    42ce:	88 ef       	ldi	r24, 0xF8	; 248
    42d0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    42d4:	85 ea       	ldi	r24, 0xA5	; 165
    42d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42da:	84 e0       	ldi	r24, 0x04	; 4
    42dc:	05 c0       	rjmp	.+10     	; 0x42e8 <twiTransmit+0x8c>
    42de:	86 e0       	ldi	r24, 0x06	; 6
    42e0:	03 c0       	rjmp	.+6      	; 0x42e8 <twiTransmit+0x8c>
    42e2:	87 e0       	ldi	r24, 0x07	; 7
    42e4:	01 c0       	rjmp	.+2      	; 0x42e8 <twiTransmit+0x8c>
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	1f 91       	pop	r17
    42ee:	0f 91       	pop	r16
    42f0:	ff 90       	pop	r15
    42f2:	08 95       	ret

000042f4 <twiReceive>:
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	29 f1       	breq	.+74     	; 0x4348 <twiReceive+0x54>
    42fe:	6b 30       	cpi	r22, 0x0B	; 11
    4300:	28 f5       	brcc	.+74     	; 0x434c <twiReceive+0x58>
    4302:	16 2f       	mov	r17, r22
    4304:	ec 01       	movw	r28, r24
    4306:	a6 df       	rcall	.-180    	; 0x4254 <twiIsBusy>
    4308:	81 11       	cpse	r24, r1
    430a:	22 c0       	rjmp	.+68     	; 0x4350 <twiReceive+0x5c>
    430c:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiCurrentHandler>
    4310:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <_twiCurrentHandler+0x1>
    4314:	c8 17       	cp	r28, r24
    4316:	d9 07       	cpc	r29, r25
    4318:	41 f0       	breq	.+16     	; 0x432a <twiReceive+0x36>
    431a:	3e df       	rcall	.-388    	; 0x4198 <_initTwiInterface>
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4322:	d0 93 bd 09 	sts	0x09BD, r29	; 0x8009bd <_twiCurrentHandler+0x1>
    4326:	c0 93 bc 09 	sts	0x09BC, r28	; 0x8009bc <_twiCurrentHandler>
    432a:	10 93 be 09 	sts	0x09BE, r17	; 0x8009be <_twiMessageLen>
    432e:	88 81       	ld	r24, Y
    4330:	88 0f       	add	r24, r24
    4332:	81 60       	ori	r24, 0x01	; 1
    4334:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <_twiMessageBuffer>
    4338:	88 ef       	ldi	r24, 0xF8	; 248
    433a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    433e:	85 ea       	ldi	r24, 0xA5	; 165
    4340:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4344:	85 e0       	ldi	r24, 0x05	; 5
    4346:	05 c0       	rjmp	.+10     	; 0x4352 <twiReceive+0x5e>
    4348:	86 e0       	ldi	r24, 0x06	; 6
    434a:	03 c0       	rjmp	.+6      	; 0x4352 <twiReceive+0x5e>
    434c:	87 e0       	ldi	r24, 0x07	; 7
    434e:	01 c0       	rjmp	.+2      	; 0x4352 <twiReceive+0x5e>
    4350:	82 e0       	ldi	r24, 0x02	; 2
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	1f 91       	pop	r17
    4358:	08 95       	ret

0000435a <__vector_39>:
    435a:	1f 92       	push	r1
    435c:	0f 92       	push	r0
    435e:	0f b6       	in	r0, 0x3f	; 63
    4360:	0f 92       	push	r0
    4362:	11 24       	eor	r1, r1
    4364:	0b b6       	in	r0, 0x3b	; 59
    4366:	0f 92       	push	r0
    4368:	2f 93       	push	r18
    436a:	3f 93       	push	r19
    436c:	4f 93       	push	r20
    436e:	5f 93       	push	r21
    4370:	6f 93       	push	r22
    4372:	7f 93       	push	r23
    4374:	8f 93       	push	r24
    4376:	9f 93       	push	r25
    4378:	af 93       	push	r26
    437a:	bf 93       	push	r27
    437c:	ef 93       	push	r30
    437e:	ff 93       	push	r31
    4380:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4384:	8e 2f       	mov	r24, r30
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	fc 01       	movw	r30, r24
    438a:	38 97       	sbiw	r30, 0x08	; 8
    438c:	e1 35       	cpi	r30, 0x51	; 81
    438e:	f1 05       	cpc	r31, r1
    4390:	08 f0       	brcs	.+2      	; 0x4394 <__vector_39+0x3a>
    4392:	75 c0       	rjmp	.+234    	; 0x447e <__vector_39+0x124>
    4394:	88 27       	eor	r24, r24
    4396:	e4 58       	subi	r30, 0x84	; 132
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	8f 4f       	sbci	r24, 0xFF	; 255
    439c:	c8 c2       	rjmp	.+1424   	; 0x492e <__tablejump2__>
    439e:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <_index.1885>
    43a2:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <_index.1885>
    43a6:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiMessageLen>
    43aa:	e8 17       	cp	r30, r24
    43ac:	70 f4       	brcc	.+28     	; 0x43ca <__vector_39+0x70>
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	8e 0f       	add	r24, r30
    43b2:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <_index.1885>
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	e1 54       	subi	r30, 0x41	; 65
    43ba:	f6 4f       	sbci	r31, 0xF6	; 246
    43bc:	80 81       	ld	r24, Z
    43be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    43c2:	85 e8       	ldi	r24, 0x85	; 133
    43c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43c8:	72 c0       	rjmp	.+228    	; 0x44ae <__vector_39+0x154>
    43ca:	84 e9       	ldi	r24, 0x94	; 148
    43cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43d0:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiCurrentHandler>
    43d4:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <_twiCurrentHandler+0x1>
    43d8:	dc 01       	movw	r26, r24
    43da:	12 96       	adiw	r26, 0x02	; 2
    43dc:	ed 91       	ld	r30, X+
    43de:	fc 91       	ld	r31, X
    43e0:	13 97       	sbiw	r26, 0x03	; 3
    43e2:	30 97       	sbiw	r30, 0x00	; 0
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <__vector_39+0x8e>
    43e6:	63 c0       	rjmp	.+198    	; 0x44ae <__vector_39+0x154>
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	64 e0       	ldi	r22, 0x04	; 4
    43f0:	19 95       	eicall
    43f2:	5d c0       	rjmp	.+186    	; 0x44ae <__vector_39+0x154>
    43f4:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <_index.1885>
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	8e 0f       	add	r24, r30
    43fc:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <_index.1885>
    4400:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	e1 54       	subi	r30, 0x41	; 65
    4408:	f6 4f       	sbci	r31, 0xF6	; 246
    440a:	80 83       	st	Z, r24
    440c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4410:	80 34       	cpi	r24, 0x40	; 64
    4412:	11 f4       	brne	.+4      	; 0x4418 <__vector_39+0xbe>
    4414:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <_index.1885>
    4418:	20 91 bb 09 	lds	r18, 0x09BB	; 0x8009bb <_index.1885>
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiMessageLen>
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	28 17       	cp	r18, r24
    4428:	39 07       	cpc	r19, r25
    442a:	24 f4       	brge	.+8      	; 0x4434 <__vector_39+0xda>
    442c:	85 ec       	ldi	r24, 0xC5	; 197
    442e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4432:	3d c0       	rjmp	.+122    	; 0x44ae <__vector_39+0x154>
    4434:	85 e8       	ldi	r24, 0x85	; 133
    4436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    443a:	39 c0       	rjmp	.+114    	; 0x44ae <__vector_39+0x154>
    443c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4440:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <_index.1885>
    4444:	f0 e0       	ldi	r31, 0x00	; 0
    4446:	e1 54       	subi	r30, 0x41	; 65
    4448:	f6 4f       	sbci	r31, 0xF6	; 246
    444a:	80 83       	st	Z, r24
    444c:	84 e9       	ldi	r24, 0x94	; 148
    444e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4452:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiCurrentHandler>
    4456:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <_twiCurrentHandler+0x1>
    445a:	dc 01       	movw	r26, r24
    445c:	12 96       	adiw	r26, 0x02	; 2
    445e:	ed 91       	ld	r30, X+
    4460:	fc 91       	ld	r31, X
    4462:	13 97       	sbiw	r26, 0x03	; 3
    4464:	30 97       	sbiw	r30, 0x00	; 0
    4466:	19 f1       	breq	.+70     	; 0x44ae <__vector_39+0x154>
    4468:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <_twiMessageLen>
    446c:	4f eb       	ldi	r20, 0xBF	; 191
    446e:	59 e0       	ldi	r21, 0x09	; 9
    4470:	65 e0       	ldi	r22, 0x05	; 5
    4472:	19 95       	eicall
    4474:	1c c0       	rjmp	.+56     	; 0x44ae <__vector_39+0x154>
    4476:	85 ea       	ldi	r24, 0xA5	; 165
    4478:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    447c:	18 c0       	rjmp	.+48     	; 0x44ae <__vector_39+0x154>
    447e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4482:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4486:	84 e0       	ldi	r24, 0x04	; 4
    4488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    448c:	80 91 bc 09 	lds	r24, 0x09BC	; 0x8009bc <_twiCurrentHandler>
    4490:	90 91 bd 09 	lds	r25, 0x09BD	; 0x8009bd <_twiCurrentHandler+0x1>
    4494:	dc 01       	movw	r26, r24
    4496:	12 96       	adiw	r26, 0x02	; 2
    4498:	ed 91       	ld	r30, X+
    449a:	fc 91       	ld	r31, X
    449c:	13 97       	sbiw	r26, 0x03	; 3
    449e:	30 97       	sbiw	r30, 0x00	; 0
    44a0:	31 f0       	breq	.+12     	; 0x44ae <__vector_39+0x154>
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	50 e0       	ldi	r21, 0x00	; 0
    44a8:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    44ac:	19 95       	eicall
    44ae:	ff 91       	pop	r31
    44b0:	ef 91       	pop	r30
    44b2:	bf 91       	pop	r27
    44b4:	af 91       	pop	r26
    44b6:	9f 91       	pop	r25
    44b8:	8f 91       	pop	r24
    44ba:	7f 91       	pop	r23
    44bc:	6f 91       	pop	r22
    44be:	5f 91       	pop	r21
    44c0:	4f 91       	pop	r20
    44c2:	3f 91       	pop	r19
    44c4:	2f 91       	pop	r18
    44c6:	0f 90       	pop	r0
    44c8:	0b be       	out	0x3b, r0	; 59
    44ca:	0f 90       	pop	r0
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	0f 90       	pop	r0
    44d0:	1f 90       	pop	r1
    44d2:	18 95       	reti

000044d4 <fifo_init>:
    44d4:	fc 01       	movw	r30, r24
    44d6:	41 11       	cpse	r20, r1
    44d8:	01 c0       	rjmp	.+2      	; 0x44dc <fifo_init+0x8>
    44da:	6c d3       	rcall	.+1752   	; 0x4bb4 <abort>
    44dc:	84 2f       	mov	r24, r20
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	9c 01       	movw	r18, r24
    44e2:	21 50       	subi	r18, 0x01	; 1
    44e4:	31 09       	sbc	r19, r1
    44e6:	82 23       	and	r24, r18
    44e8:	93 23       	and	r25, r19
    44ea:	89 2b       	or	r24, r25
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <fifo_init+0x1c>
    44ee:	62 d3       	rcall	.+1732   	; 0x4bb4 <abort>
    44f0:	41 38       	cpi	r20, 0x81	; 129
    44f2:	08 f0       	brcs	.+2      	; 0x44f6 <fifo_init+0x22>
    44f4:	5f d3       	rcall	.+1726   	; 0x4bb4 <abort>
    44f6:	12 82       	std	Z+2, r1	; 0x02
    44f8:	13 82       	std	Z+3, r1	; 0x03
    44fa:	44 83       	std	Z+4, r20	; 0x04
    44fc:	44 0f       	add	r20, r20
    44fe:	41 50       	subi	r20, 0x01	; 1
    4500:	45 83       	std	Z+5, r20	; 0x05
    4502:	71 83       	std	Z+1, r23	; 0x01
    4504:	60 83       	st	Z, r22
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	08 95       	ret

0000450c <__subsf3>:
    450c:	50 58       	subi	r21, 0x80	; 128

0000450e <__addsf3>:
    450e:	bb 27       	eor	r27, r27
    4510:	aa 27       	eor	r26, r26
    4512:	0e d0       	rcall	.+28     	; 0x4530 <__addsf3x>
    4514:	4d c1       	rjmp	.+666    	; 0x47b0 <__fp_round>
    4516:	3e d1       	rcall	.+636    	; 0x4794 <__fp_pscA>
    4518:	30 f0       	brcs	.+12     	; 0x4526 <__addsf3+0x18>
    451a:	43 d1       	rcall	.+646    	; 0x47a2 <__fp_pscB>
    451c:	20 f0       	brcs	.+8      	; 0x4526 <__addsf3+0x18>
    451e:	31 f4       	brne	.+12     	; 0x452c <__addsf3+0x1e>
    4520:	9f 3f       	cpi	r25, 0xFF	; 255
    4522:	11 f4       	brne	.+4      	; 0x4528 <__addsf3+0x1a>
    4524:	1e f4       	brtc	.+6      	; 0x452c <__addsf3+0x1e>
    4526:	33 c1       	rjmp	.+614    	; 0x478e <__fp_nan>
    4528:	0e f4       	brtc	.+2      	; 0x452c <__addsf3+0x1e>
    452a:	e0 95       	com	r30
    452c:	e7 fb       	bst	r30, 7
    452e:	29 c1       	rjmp	.+594    	; 0x4782 <__fp_inf>

00004530 <__addsf3x>:
    4530:	e9 2f       	mov	r30, r25
    4532:	4f d1       	rcall	.+670    	; 0x47d2 <__fp_split3>
    4534:	80 f3       	brcs	.-32     	; 0x4516 <__addsf3+0x8>
    4536:	ba 17       	cp	r27, r26
    4538:	62 07       	cpc	r22, r18
    453a:	73 07       	cpc	r23, r19
    453c:	84 07       	cpc	r24, r20
    453e:	95 07       	cpc	r25, r21
    4540:	18 f0       	brcs	.+6      	; 0x4548 <__addsf3x+0x18>
    4542:	71 f4       	brne	.+28     	; 0x4560 <__addsf3x+0x30>
    4544:	9e f5       	brtc	.+102    	; 0x45ac <__addsf3x+0x7c>
    4546:	67 c1       	rjmp	.+718    	; 0x4816 <__fp_zero>
    4548:	0e f4       	brtc	.+2      	; 0x454c <__addsf3x+0x1c>
    454a:	e0 95       	com	r30
    454c:	0b 2e       	mov	r0, r27
    454e:	ba 2f       	mov	r27, r26
    4550:	a0 2d       	mov	r26, r0
    4552:	0b 01       	movw	r0, r22
    4554:	b9 01       	movw	r22, r18
    4556:	90 01       	movw	r18, r0
    4558:	0c 01       	movw	r0, r24
    455a:	ca 01       	movw	r24, r20
    455c:	a0 01       	movw	r20, r0
    455e:	11 24       	eor	r1, r1
    4560:	ff 27       	eor	r31, r31
    4562:	59 1b       	sub	r21, r25
    4564:	99 f0       	breq	.+38     	; 0x458c <__addsf3x+0x5c>
    4566:	59 3f       	cpi	r21, 0xF9	; 249
    4568:	50 f4       	brcc	.+20     	; 0x457e <__addsf3x+0x4e>
    456a:	50 3e       	cpi	r21, 0xE0	; 224
    456c:	68 f1       	brcs	.+90     	; 0x45c8 <__addsf3x+0x98>
    456e:	1a 16       	cp	r1, r26
    4570:	f0 40       	sbci	r31, 0x00	; 0
    4572:	a2 2f       	mov	r26, r18
    4574:	23 2f       	mov	r18, r19
    4576:	34 2f       	mov	r19, r20
    4578:	44 27       	eor	r20, r20
    457a:	58 5f       	subi	r21, 0xF8	; 248
    457c:	f3 cf       	rjmp	.-26     	; 0x4564 <__addsf3x+0x34>
    457e:	46 95       	lsr	r20
    4580:	37 95       	ror	r19
    4582:	27 95       	ror	r18
    4584:	a7 95       	ror	r26
    4586:	f0 40       	sbci	r31, 0x00	; 0
    4588:	53 95       	inc	r21
    458a:	c9 f7       	brne	.-14     	; 0x457e <__addsf3x+0x4e>
    458c:	7e f4       	brtc	.+30     	; 0x45ac <__addsf3x+0x7c>
    458e:	1f 16       	cp	r1, r31
    4590:	ba 0b       	sbc	r27, r26
    4592:	62 0b       	sbc	r22, r18
    4594:	73 0b       	sbc	r23, r19
    4596:	84 0b       	sbc	r24, r20
    4598:	ba f0       	brmi	.+46     	; 0x45c8 <__addsf3x+0x98>
    459a:	91 50       	subi	r25, 0x01	; 1
    459c:	a1 f0       	breq	.+40     	; 0x45c6 <__addsf3x+0x96>
    459e:	ff 0f       	add	r31, r31
    45a0:	bb 1f       	adc	r27, r27
    45a2:	66 1f       	adc	r22, r22
    45a4:	77 1f       	adc	r23, r23
    45a6:	88 1f       	adc	r24, r24
    45a8:	c2 f7       	brpl	.-16     	; 0x459a <__addsf3x+0x6a>
    45aa:	0e c0       	rjmp	.+28     	; 0x45c8 <__addsf3x+0x98>
    45ac:	ba 0f       	add	r27, r26
    45ae:	62 1f       	adc	r22, r18
    45b0:	73 1f       	adc	r23, r19
    45b2:	84 1f       	adc	r24, r20
    45b4:	48 f4       	brcc	.+18     	; 0x45c8 <__addsf3x+0x98>
    45b6:	87 95       	ror	r24
    45b8:	77 95       	ror	r23
    45ba:	67 95       	ror	r22
    45bc:	b7 95       	ror	r27
    45be:	f7 95       	ror	r31
    45c0:	9e 3f       	cpi	r25, 0xFE	; 254
    45c2:	08 f0       	brcs	.+2      	; 0x45c6 <__addsf3x+0x96>
    45c4:	b3 cf       	rjmp	.-154    	; 0x452c <__addsf3+0x1e>
    45c6:	93 95       	inc	r25
    45c8:	88 0f       	add	r24, r24
    45ca:	08 f0       	brcs	.+2      	; 0x45ce <__addsf3x+0x9e>
    45cc:	99 27       	eor	r25, r25
    45ce:	ee 0f       	add	r30, r30
    45d0:	97 95       	ror	r25
    45d2:	87 95       	ror	r24
    45d4:	08 95       	ret

000045d6 <__divsf3>:
    45d6:	0c d0       	rcall	.+24     	; 0x45f0 <__divsf3x>
    45d8:	eb c0       	rjmp	.+470    	; 0x47b0 <__fp_round>
    45da:	e3 d0       	rcall	.+454    	; 0x47a2 <__fp_pscB>
    45dc:	40 f0       	brcs	.+16     	; 0x45ee <__divsf3+0x18>
    45de:	da d0       	rcall	.+436    	; 0x4794 <__fp_pscA>
    45e0:	30 f0       	brcs	.+12     	; 0x45ee <__divsf3+0x18>
    45e2:	21 f4       	brne	.+8      	; 0x45ec <__divsf3+0x16>
    45e4:	5f 3f       	cpi	r21, 0xFF	; 255
    45e6:	19 f0       	breq	.+6      	; 0x45ee <__divsf3+0x18>
    45e8:	cc c0       	rjmp	.+408    	; 0x4782 <__fp_inf>
    45ea:	51 11       	cpse	r21, r1
    45ec:	15 c1       	rjmp	.+554    	; 0x4818 <__fp_szero>
    45ee:	cf c0       	rjmp	.+414    	; 0x478e <__fp_nan>

000045f0 <__divsf3x>:
    45f0:	f0 d0       	rcall	.+480    	; 0x47d2 <__fp_split3>
    45f2:	98 f3       	brcs	.-26     	; 0x45da <__divsf3+0x4>

000045f4 <__divsf3_pse>:
    45f4:	99 23       	and	r25, r25
    45f6:	c9 f3       	breq	.-14     	; 0x45ea <__divsf3+0x14>
    45f8:	55 23       	and	r21, r21
    45fa:	b1 f3       	breq	.-20     	; 0x45e8 <__divsf3+0x12>
    45fc:	95 1b       	sub	r25, r21
    45fe:	55 0b       	sbc	r21, r21
    4600:	bb 27       	eor	r27, r27
    4602:	aa 27       	eor	r26, r26
    4604:	62 17       	cp	r22, r18
    4606:	73 07       	cpc	r23, r19
    4608:	84 07       	cpc	r24, r20
    460a:	38 f0       	brcs	.+14     	; 0x461a <__divsf3_pse+0x26>
    460c:	9f 5f       	subi	r25, 0xFF	; 255
    460e:	5f 4f       	sbci	r21, 0xFF	; 255
    4610:	22 0f       	add	r18, r18
    4612:	33 1f       	adc	r19, r19
    4614:	44 1f       	adc	r20, r20
    4616:	aa 1f       	adc	r26, r26
    4618:	a9 f3       	breq	.-22     	; 0x4604 <__divsf3_pse+0x10>
    461a:	33 d0       	rcall	.+102    	; 0x4682 <__divsf3_pse+0x8e>
    461c:	0e 2e       	mov	r0, r30
    461e:	3a f0       	brmi	.+14     	; 0x462e <__divsf3_pse+0x3a>
    4620:	e0 e8       	ldi	r30, 0x80	; 128
    4622:	30 d0       	rcall	.+96     	; 0x4684 <__divsf3_pse+0x90>
    4624:	91 50       	subi	r25, 0x01	; 1
    4626:	50 40       	sbci	r21, 0x00	; 0
    4628:	e6 95       	lsr	r30
    462a:	00 1c       	adc	r0, r0
    462c:	ca f7       	brpl	.-14     	; 0x4620 <__divsf3_pse+0x2c>
    462e:	29 d0       	rcall	.+82     	; 0x4682 <__divsf3_pse+0x8e>
    4630:	fe 2f       	mov	r31, r30
    4632:	27 d0       	rcall	.+78     	; 0x4682 <__divsf3_pse+0x8e>
    4634:	66 0f       	add	r22, r22
    4636:	77 1f       	adc	r23, r23
    4638:	88 1f       	adc	r24, r24
    463a:	bb 1f       	adc	r27, r27
    463c:	26 17       	cp	r18, r22
    463e:	37 07       	cpc	r19, r23
    4640:	48 07       	cpc	r20, r24
    4642:	ab 07       	cpc	r26, r27
    4644:	b0 e8       	ldi	r27, 0x80	; 128
    4646:	09 f0       	breq	.+2      	; 0x464a <__divsf3_pse+0x56>
    4648:	bb 0b       	sbc	r27, r27
    464a:	80 2d       	mov	r24, r0
    464c:	bf 01       	movw	r22, r30
    464e:	ff 27       	eor	r31, r31
    4650:	93 58       	subi	r25, 0x83	; 131
    4652:	5f 4f       	sbci	r21, 0xFF	; 255
    4654:	2a f0       	brmi	.+10     	; 0x4660 <__divsf3_pse+0x6c>
    4656:	9e 3f       	cpi	r25, 0xFE	; 254
    4658:	51 05       	cpc	r21, r1
    465a:	68 f0       	brcs	.+26     	; 0x4676 <__divsf3_pse+0x82>
    465c:	92 c0       	rjmp	.+292    	; 0x4782 <__fp_inf>
    465e:	dc c0       	rjmp	.+440    	; 0x4818 <__fp_szero>
    4660:	5f 3f       	cpi	r21, 0xFF	; 255
    4662:	ec f3       	brlt	.-6      	; 0x465e <__divsf3_pse+0x6a>
    4664:	98 3e       	cpi	r25, 0xE8	; 232
    4666:	dc f3       	brlt	.-10     	; 0x465e <__divsf3_pse+0x6a>
    4668:	86 95       	lsr	r24
    466a:	77 95       	ror	r23
    466c:	67 95       	ror	r22
    466e:	b7 95       	ror	r27
    4670:	f7 95       	ror	r31
    4672:	9f 5f       	subi	r25, 0xFF	; 255
    4674:	c9 f7       	brne	.-14     	; 0x4668 <__divsf3_pse+0x74>
    4676:	88 0f       	add	r24, r24
    4678:	91 1d       	adc	r25, r1
    467a:	96 95       	lsr	r25
    467c:	87 95       	ror	r24
    467e:	97 f9       	bld	r25, 7
    4680:	08 95       	ret
    4682:	e1 e0       	ldi	r30, 0x01	; 1
    4684:	66 0f       	add	r22, r22
    4686:	77 1f       	adc	r23, r23
    4688:	88 1f       	adc	r24, r24
    468a:	bb 1f       	adc	r27, r27
    468c:	62 17       	cp	r22, r18
    468e:	73 07       	cpc	r23, r19
    4690:	84 07       	cpc	r24, r20
    4692:	ba 07       	cpc	r27, r26
    4694:	20 f0       	brcs	.+8      	; 0x469e <__divsf3_pse+0xaa>
    4696:	62 1b       	sub	r22, r18
    4698:	73 0b       	sbc	r23, r19
    469a:	84 0b       	sbc	r24, r20
    469c:	ba 0b       	sbc	r27, r26
    469e:	ee 1f       	adc	r30, r30
    46a0:	88 f7       	brcc	.-30     	; 0x4684 <__divsf3_pse+0x90>
    46a2:	e0 95       	com	r30
    46a4:	08 95       	ret

000046a6 <__fixsfsi>:
    46a6:	04 d0       	rcall	.+8      	; 0x46b0 <__fixunssfsi>
    46a8:	68 94       	set
    46aa:	b1 11       	cpse	r27, r1
    46ac:	b5 c0       	rjmp	.+362    	; 0x4818 <__fp_szero>
    46ae:	08 95       	ret

000046b0 <__fixunssfsi>:
    46b0:	98 d0       	rcall	.+304    	; 0x47e2 <__fp_splitA>
    46b2:	88 f0       	brcs	.+34     	; 0x46d6 <__fixunssfsi+0x26>
    46b4:	9f 57       	subi	r25, 0x7F	; 127
    46b6:	90 f0       	brcs	.+36     	; 0x46dc <__fixunssfsi+0x2c>
    46b8:	b9 2f       	mov	r27, r25
    46ba:	99 27       	eor	r25, r25
    46bc:	b7 51       	subi	r27, 0x17	; 23
    46be:	a0 f0       	brcs	.+40     	; 0x46e8 <__fixunssfsi+0x38>
    46c0:	d1 f0       	breq	.+52     	; 0x46f6 <__fixunssfsi+0x46>
    46c2:	66 0f       	add	r22, r22
    46c4:	77 1f       	adc	r23, r23
    46c6:	88 1f       	adc	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	1a f0       	brmi	.+6      	; 0x46d2 <__fixunssfsi+0x22>
    46cc:	ba 95       	dec	r27
    46ce:	c9 f7       	brne	.-14     	; 0x46c2 <__fixunssfsi+0x12>
    46d0:	12 c0       	rjmp	.+36     	; 0x46f6 <__fixunssfsi+0x46>
    46d2:	b1 30       	cpi	r27, 0x01	; 1
    46d4:	81 f0       	breq	.+32     	; 0x46f6 <__fixunssfsi+0x46>
    46d6:	9f d0       	rcall	.+318    	; 0x4816 <__fp_zero>
    46d8:	b1 e0       	ldi	r27, 0x01	; 1
    46da:	08 95       	ret
    46dc:	9c c0       	rjmp	.+312    	; 0x4816 <__fp_zero>
    46de:	67 2f       	mov	r22, r23
    46e0:	78 2f       	mov	r23, r24
    46e2:	88 27       	eor	r24, r24
    46e4:	b8 5f       	subi	r27, 0xF8	; 248
    46e6:	39 f0       	breq	.+14     	; 0x46f6 <__fixunssfsi+0x46>
    46e8:	b9 3f       	cpi	r27, 0xF9	; 249
    46ea:	cc f3       	brlt	.-14     	; 0x46de <__fixunssfsi+0x2e>
    46ec:	86 95       	lsr	r24
    46ee:	77 95       	ror	r23
    46f0:	67 95       	ror	r22
    46f2:	b3 95       	inc	r27
    46f4:	d9 f7       	brne	.-10     	; 0x46ec <__fixunssfsi+0x3c>
    46f6:	3e f4       	brtc	.+14     	; 0x4706 <__fixunssfsi+0x56>
    46f8:	90 95       	com	r25
    46fa:	80 95       	com	r24
    46fc:	70 95       	com	r23
    46fe:	61 95       	neg	r22
    4700:	7f 4f       	sbci	r23, 0xFF	; 255
    4702:	8f 4f       	sbci	r24, 0xFF	; 255
    4704:	9f 4f       	sbci	r25, 0xFF	; 255
    4706:	08 95       	ret

00004708 <__floatunsisf>:
    4708:	e8 94       	clt
    470a:	09 c0       	rjmp	.+18     	; 0x471e <__floatsisf+0x12>

0000470c <__floatsisf>:
    470c:	97 fb       	bst	r25, 7
    470e:	3e f4       	brtc	.+14     	; 0x471e <__floatsisf+0x12>
    4710:	90 95       	com	r25
    4712:	80 95       	com	r24
    4714:	70 95       	com	r23
    4716:	61 95       	neg	r22
    4718:	7f 4f       	sbci	r23, 0xFF	; 255
    471a:	8f 4f       	sbci	r24, 0xFF	; 255
    471c:	9f 4f       	sbci	r25, 0xFF	; 255
    471e:	99 23       	and	r25, r25
    4720:	a9 f0       	breq	.+42     	; 0x474c <__floatsisf+0x40>
    4722:	f9 2f       	mov	r31, r25
    4724:	96 e9       	ldi	r25, 0x96	; 150
    4726:	bb 27       	eor	r27, r27
    4728:	93 95       	inc	r25
    472a:	f6 95       	lsr	r31
    472c:	87 95       	ror	r24
    472e:	77 95       	ror	r23
    4730:	67 95       	ror	r22
    4732:	b7 95       	ror	r27
    4734:	f1 11       	cpse	r31, r1
    4736:	f8 cf       	rjmp	.-16     	; 0x4728 <__floatsisf+0x1c>
    4738:	fa f4       	brpl	.+62     	; 0x4778 <__floatsisf+0x6c>
    473a:	bb 0f       	add	r27, r27
    473c:	11 f4       	brne	.+4      	; 0x4742 <__floatsisf+0x36>
    473e:	60 ff       	sbrs	r22, 0
    4740:	1b c0       	rjmp	.+54     	; 0x4778 <__floatsisf+0x6c>
    4742:	6f 5f       	subi	r22, 0xFF	; 255
    4744:	7f 4f       	sbci	r23, 0xFF	; 255
    4746:	8f 4f       	sbci	r24, 0xFF	; 255
    4748:	9f 4f       	sbci	r25, 0xFF	; 255
    474a:	16 c0       	rjmp	.+44     	; 0x4778 <__floatsisf+0x6c>
    474c:	88 23       	and	r24, r24
    474e:	11 f0       	breq	.+4      	; 0x4754 <__floatsisf+0x48>
    4750:	96 e9       	ldi	r25, 0x96	; 150
    4752:	11 c0       	rjmp	.+34     	; 0x4776 <__floatsisf+0x6a>
    4754:	77 23       	and	r23, r23
    4756:	21 f0       	breq	.+8      	; 0x4760 <__floatsisf+0x54>
    4758:	9e e8       	ldi	r25, 0x8E	; 142
    475a:	87 2f       	mov	r24, r23
    475c:	76 2f       	mov	r23, r22
    475e:	05 c0       	rjmp	.+10     	; 0x476a <__floatsisf+0x5e>
    4760:	66 23       	and	r22, r22
    4762:	71 f0       	breq	.+28     	; 0x4780 <__floatsisf+0x74>
    4764:	96 e8       	ldi	r25, 0x86	; 134
    4766:	86 2f       	mov	r24, r22
    4768:	70 e0       	ldi	r23, 0x00	; 0
    476a:	60 e0       	ldi	r22, 0x00	; 0
    476c:	2a f0       	brmi	.+10     	; 0x4778 <__floatsisf+0x6c>
    476e:	9a 95       	dec	r25
    4770:	66 0f       	add	r22, r22
    4772:	77 1f       	adc	r23, r23
    4774:	88 1f       	adc	r24, r24
    4776:	da f7       	brpl	.-10     	; 0x476e <__floatsisf+0x62>
    4778:	88 0f       	add	r24, r24
    477a:	96 95       	lsr	r25
    477c:	87 95       	ror	r24
    477e:	97 f9       	bld	r25, 7
    4780:	08 95       	ret

00004782 <__fp_inf>:
    4782:	97 f9       	bld	r25, 7
    4784:	9f 67       	ori	r25, 0x7F	; 127
    4786:	80 e8       	ldi	r24, 0x80	; 128
    4788:	70 e0       	ldi	r23, 0x00	; 0
    478a:	60 e0       	ldi	r22, 0x00	; 0
    478c:	08 95       	ret

0000478e <__fp_nan>:
    478e:	9f ef       	ldi	r25, 0xFF	; 255
    4790:	80 ec       	ldi	r24, 0xC0	; 192
    4792:	08 95       	ret

00004794 <__fp_pscA>:
    4794:	00 24       	eor	r0, r0
    4796:	0a 94       	dec	r0
    4798:	16 16       	cp	r1, r22
    479a:	17 06       	cpc	r1, r23
    479c:	18 06       	cpc	r1, r24
    479e:	09 06       	cpc	r0, r25
    47a0:	08 95       	ret

000047a2 <__fp_pscB>:
    47a2:	00 24       	eor	r0, r0
    47a4:	0a 94       	dec	r0
    47a6:	12 16       	cp	r1, r18
    47a8:	13 06       	cpc	r1, r19
    47aa:	14 06       	cpc	r1, r20
    47ac:	05 06       	cpc	r0, r21
    47ae:	08 95       	ret

000047b0 <__fp_round>:
    47b0:	09 2e       	mov	r0, r25
    47b2:	03 94       	inc	r0
    47b4:	00 0c       	add	r0, r0
    47b6:	11 f4       	brne	.+4      	; 0x47bc <__fp_round+0xc>
    47b8:	88 23       	and	r24, r24
    47ba:	52 f0       	brmi	.+20     	; 0x47d0 <__fp_round+0x20>
    47bc:	bb 0f       	add	r27, r27
    47be:	40 f4       	brcc	.+16     	; 0x47d0 <__fp_round+0x20>
    47c0:	bf 2b       	or	r27, r31
    47c2:	11 f4       	brne	.+4      	; 0x47c8 <__fp_round+0x18>
    47c4:	60 ff       	sbrs	r22, 0
    47c6:	04 c0       	rjmp	.+8      	; 0x47d0 <__fp_round+0x20>
    47c8:	6f 5f       	subi	r22, 0xFF	; 255
    47ca:	7f 4f       	sbci	r23, 0xFF	; 255
    47cc:	8f 4f       	sbci	r24, 0xFF	; 255
    47ce:	9f 4f       	sbci	r25, 0xFF	; 255
    47d0:	08 95       	ret

000047d2 <__fp_split3>:
    47d2:	57 fd       	sbrc	r21, 7
    47d4:	90 58       	subi	r25, 0x80	; 128
    47d6:	44 0f       	add	r20, r20
    47d8:	55 1f       	adc	r21, r21
    47da:	59 f0       	breq	.+22     	; 0x47f2 <__fp_splitA+0x10>
    47dc:	5f 3f       	cpi	r21, 0xFF	; 255
    47de:	71 f0       	breq	.+28     	; 0x47fc <__fp_splitA+0x1a>
    47e0:	47 95       	ror	r20

000047e2 <__fp_splitA>:
    47e2:	88 0f       	add	r24, r24
    47e4:	97 fb       	bst	r25, 7
    47e6:	99 1f       	adc	r25, r25
    47e8:	61 f0       	breq	.+24     	; 0x4802 <__fp_splitA+0x20>
    47ea:	9f 3f       	cpi	r25, 0xFF	; 255
    47ec:	79 f0       	breq	.+30     	; 0x480c <__fp_splitA+0x2a>
    47ee:	87 95       	ror	r24
    47f0:	08 95       	ret
    47f2:	12 16       	cp	r1, r18
    47f4:	13 06       	cpc	r1, r19
    47f6:	14 06       	cpc	r1, r20
    47f8:	55 1f       	adc	r21, r21
    47fa:	f2 cf       	rjmp	.-28     	; 0x47e0 <__fp_split3+0xe>
    47fc:	46 95       	lsr	r20
    47fe:	f1 df       	rcall	.-30     	; 0x47e2 <__fp_splitA>
    4800:	08 c0       	rjmp	.+16     	; 0x4812 <__fp_splitA+0x30>
    4802:	16 16       	cp	r1, r22
    4804:	17 06       	cpc	r1, r23
    4806:	18 06       	cpc	r1, r24
    4808:	99 1f       	adc	r25, r25
    480a:	f1 cf       	rjmp	.-30     	; 0x47ee <__fp_splitA+0xc>
    480c:	86 95       	lsr	r24
    480e:	71 05       	cpc	r23, r1
    4810:	61 05       	cpc	r22, r1
    4812:	08 94       	sec
    4814:	08 95       	ret

00004816 <__fp_zero>:
    4816:	e8 94       	clt

00004818 <__fp_szero>:
    4818:	bb 27       	eor	r27, r27
    481a:	66 27       	eor	r22, r22
    481c:	77 27       	eor	r23, r23
    481e:	cb 01       	movw	r24, r22
    4820:	97 f9       	bld	r25, 7
    4822:	08 95       	ret

00004824 <__mulsf3>:
    4824:	0b d0       	rcall	.+22     	; 0x483c <__mulsf3x>
    4826:	c4 cf       	rjmp	.-120    	; 0x47b0 <__fp_round>
    4828:	b5 df       	rcall	.-150    	; 0x4794 <__fp_pscA>
    482a:	28 f0       	brcs	.+10     	; 0x4836 <__mulsf3+0x12>
    482c:	ba df       	rcall	.-140    	; 0x47a2 <__fp_pscB>
    482e:	18 f0       	brcs	.+6      	; 0x4836 <__mulsf3+0x12>
    4830:	95 23       	and	r25, r21
    4832:	09 f0       	breq	.+2      	; 0x4836 <__mulsf3+0x12>
    4834:	a6 cf       	rjmp	.-180    	; 0x4782 <__fp_inf>
    4836:	ab cf       	rjmp	.-170    	; 0x478e <__fp_nan>
    4838:	11 24       	eor	r1, r1
    483a:	ee cf       	rjmp	.-36     	; 0x4818 <__fp_szero>

0000483c <__mulsf3x>:
    483c:	ca df       	rcall	.-108    	; 0x47d2 <__fp_split3>
    483e:	a0 f3       	brcs	.-24     	; 0x4828 <__mulsf3+0x4>

00004840 <__mulsf3_pse>:
    4840:	95 9f       	mul	r25, r21
    4842:	d1 f3       	breq	.-12     	; 0x4838 <__mulsf3+0x14>
    4844:	95 0f       	add	r25, r21
    4846:	50 e0       	ldi	r21, 0x00	; 0
    4848:	55 1f       	adc	r21, r21
    484a:	62 9f       	mul	r22, r18
    484c:	f0 01       	movw	r30, r0
    484e:	72 9f       	mul	r23, r18
    4850:	bb 27       	eor	r27, r27
    4852:	f0 0d       	add	r31, r0
    4854:	b1 1d       	adc	r27, r1
    4856:	63 9f       	mul	r22, r19
    4858:	aa 27       	eor	r26, r26
    485a:	f0 0d       	add	r31, r0
    485c:	b1 1d       	adc	r27, r1
    485e:	aa 1f       	adc	r26, r26
    4860:	64 9f       	mul	r22, r20
    4862:	66 27       	eor	r22, r22
    4864:	b0 0d       	add	r27, r0
    4866:	a1 1d       	adc	r26, r1
    4868:	66 1f       	adc	r22, r22
    486a:	82 9f       	mul	r24, r18
    486c:	22 27       	eor	r18, r18
    486e:	b0 0d       	add	r27, r0
    4870:	a1 1d       	adc	r26, r1
    4872:	62 1f       	adc	r22, r18
    4874:	73 9f       	mul	r23, r19
    4876:	b0 0d       	add	r27, r0
    4878:	a1 1d       	adc	r26, r1
    487a:	62 1f       	adc	r22, r18
    487c:	83 9f       	mul	r24, r19
    487e:	a0 0d       	add	r26, r0
    4880:	61 1d       	adc	r22, r1
    4882:	22 1f       	adc	r18, r18
    4884:	74 9f       	mul	r23, r20
    4886:	33 27       	eor	r19, r19
    4888:	a0 0d       	add	r26, r0
    488a:	61 1d       	adc	r22, r1
    488c:	23 1f       	adc	r18, r19
    488e:	84 9f       	mul	r24, r20
    4890:	60 0d       	add	r22, r0
    4892:	21 1d       	adc	r18, r1
    4894:	82 2f       	mov	r24, r18
    4896:	76 2f       	mov	r23, r22
    4898:	6a 2f       	mov	r22, r26
    489a:	11 24       	eor	r1, r1
    489c:	9f 57       	subi	r25, 0x7F	; 127
    489e:	50 40       	sbci	r21, 0x00	; 0
    48a0:	8a f0       	brmi	.+34     	; 0x48c4 <__mulsf3_pse+0x84>
    48a2:	e1 f0       	breq	.+56     	; 0x48dc <__mulsf3_pse+0x9c>
    48a4:	88 23       	and	r24, r24
    48a6:	4a f0       	brmi	.+18     	; 0x48ba <__mulsf3_pse+0x7a>
    48a8:	ee 0f       	add	r30, r30
    48aa:	ff 1f       	adc	r31, r31
    48ac:	bb 1f       	adc	r27, r27
    48ae:	66 1f       	adc	r22, r22
    48b0:	77 1f       	adc	r23, r23
    48b2:	88 1f       	adc	r24, r24
    48b4:	91 50       	subi	r25, 0x01	; 1
    48b6:	50 40       	sbci	r21, 0x00	; 0
    48b8:	a9 f7       	brne	.-22     	; 0x48a4 <__mulsf3_pse+0x64>
    48ba:	9e 3f       	cpi	r25, 0xFE	; 254
    48bc:	51 05       	cpc	r21, r1
    48be:	70 f0       	brcs	.+28     	; 0x48dc <__mulsf3_pse+0x9c>
    48c0:	60 cf       	rjmp	.-320    	; 0x4782 <__fp_inf>
    48c2:	aa cf       	rjmp	.-172    	; 0x4818 <__fp_szero>
    48c4:	5f 3f       	cpi	r21, 0xFF	; 255
    48c6:	ec f3       	brlt	.-6      	; 0x48c2 <__mulsf3_pse+0x82>
    48c8:	98 3e       	cpi	r25, 0xE8	; 232
    48ca:	dc f3       	brlt	.-10     	; 0x48c2 <__mulsf3_pse+0x82>
    48cc:	86 95       	lsr	r24
    48ce:	77 95       	ror	r23
    48d0:	67 95       	ror	r22
    48d2:	b7 95       	ror	r27
    48d4:	f7 95       	ror	r31
    48d6:	e7 95       	ror	r30
    48d8:	9f 5f       	subi	r25, 0xFF	; 255
    48da:	c1 f7       	brne	.-16     	; 0x48cc <__mulsf3_pse+0x8c>
    48dc:	fe 2b       	or	r31, r30
    48de:	88 0f       	add	r24, r24
    48e0:	91 1d       	adc	r25, r1
    48e2:	96 95       	lsr	r25
    48e4:	87 95       	ror	r24
    48e6:	97 f9       	bld	r25, 7
    48e8:	08 95       	ret

000048ea <__udivmodsi4>:
    48ea:	a1 e2       	ldi	r26, 0x21	; 33
    48ec:	1a 2e       	mov	r1, r26
    48ee:	aa 1b       	sub	r26, r26
    48f0:	bb 1b       	sub	r27, r27
    48f2:	fd 01       	movw	r30, r26
    48f4:	0d c0       	rjmp	.+26     	; 0x4910 <__udivmodsi4_ep>

000048f6 <__udivmodsi4_loop>:
    48f6:	aa 1f       	adc	r26, r26
    48f8:	bb 1f       	adc	r27, r27
    48fa:	ee 1f       	adc	r30, r30
    48fc:	ff 1f       	adc	r31, r31
    48fe:	a2 17       	cp	r26, r18
    4900:	b3 07       	cpc	r27, r19
    4902:	e4 07       	cpc	r30, r20
    4904:	f5 07       	cpc	r31, r21
    4906:	20 f0       	brcs	.+8      	; 0x4910 <__udivmodsi4_ep>
    4908:	a2 1b       	sub	r26, r18
    490a:	b3 0b       	sbc	r27, r19
    490c:	e4 0b       	sbc	r30, r20
    490e:	f5 0b       	sbc	r31, r21

00004910 <__udivmodsi4_ep>:
    4910:	66 1f       	adc	r22, r22
    4912:	77 1f       	adc	r23, r23
    4914:	88 1f       	adc	r24, r24
    4916:	99 1f       	adc	r25, r25
    4918:	1a 94       	dec	r1
    491a:	69 f7       	brne	.-38     	; 0x48f6 <__udivmodsi4_loop>
    491c:	60 95       	com	r22
    491e:	70 95       	com	r23
    4920:	80 95       	com	r24
    4922:	90 95       	com	r25
    4924:	9b 01       	movw	r18, r22
    4926:	ac 01       	movw	r20, r24
    4928:	bd 01       	movw	r22, r26
    492a:	cf 01       	movw	r24, r30
    492c:	08 95       	ret

0000492e <__tablejump2__>:
    492e:	ee 0f       	add	r30, r30
    4930:	ff 1f       	adc	r31, r31
    4932:	88 1f       	adc	r24, r24
    4934:	8b bf       	out	0x3b, r24	; 59
    4936:	07 90       	elpm	r0, Z+
    4938:	f6 91       	elpm	r31, Z
    493a:	e0 2d       	mov	r30, r0
    493c:	19 94       	eijmp

0000493e <calloc>:
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	cf 93       	push	r28
    4944:	df 93       	push	r29
    4946:	86 9f       	mul	r24, r22
    4948:	80 01       	movw	r16, r0
    494a:	87 9f       	mul	r24, r23
    494c:	10 0d       	add	r17, r0
    494e:	96 9f       	mul	r25, r22
    4950:	10 0d       	add	r17, r0
    4952:	11 24       	eor	r1, r1
    4954:	c8 01       	movw	r24, r16
    4956:	0d d0       	rcall	.+26     	; 0x4972 <malloc>
    4958:	ec 01       	movw	r28, r24
    495a:	00 97       	sbiw	r24, 0x00	; 0
    495c:	21 f0       	breq	.+8      	; 0x4966 <calloc+0x28>
    495e:	a8 01       	movw	r20, r16
    4960:	60 e0       	ldi	r22, 0x00	; 0
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	34 d1       	rcall	.+616    	; 0x4bce <memset>
    4966:	ce 01       	movw	r24, r28
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	08 95       	ret

00004972 <malloc>:
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	82 30       	cpi	r24, 0x02	; 2
    497c:	91 05       	cpc	r25, r1
    497e:	10 f4       	brcc	.+4      	; 0x4984 <malloc+0x12>
    4980:	82 e0       	ldi	r24, 0x02	; 2
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <__flp>
    4988:	f0 91 f4 09 	lds	r31, 0x09F4	; 0x8009f4 <__flp+0x1>
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	a0 e0       	ldi	r26, 0x00	; 0
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	30 97       	sbiw	r30, 0x00	; 0
    4996:	19 f1       	breq	.+70     	; 0x49de <malloc+0x6c>
    4998:	40 81       	ld	r20, Z
    499a:	51 81       	ldd	r21, Z+1	; 0x01
    499c:	02 81       	ldd	r16, Z+2	; 0x02
    499e:	13 81       	ldd	r17, Z+3	; 0x03
    49a0:	48 17       	cp	r20, r24
    49a2:	59 07       	cpc	r21, r25
    49a4:	c8 f0       	brcs	.+50     	; 0x49d8 <malloc+0x66>
    49a6:	84 17       	cp	r24, r20
    49a8:	95 07       	cpc	r25, r21
    49aa:	69 f4       	brne	.+26     	; 0x49c6 <malloc+0x54>
    49ac:	10 97       	sbiw	r26, 0x00	; 0
    49ae:	31 f0       	breq	.+12     	; 0x49bc <malloc+0x4a>
    49b0:	12 96       	adiw	r26, 0x02	; 2
    49b2:	0c 93       	st	X, r16
    49b4:	12 97       	sbiw	r26, 0x02	; 2
    49b6:	13 96       	adiw	r26, 0x03	; 3
    49b8:	1c 93       	st	X, r17
    49ba:	27 c0       	rjmp	.+78     	; 0x4a0a <malloc+0x98>
    49bc:	00 93 f3 09 	sts	0x09F3, r16	; 0x8009f3 <__flp>
    49c0:	10 93 f4 09 	sts	0x09F4, r17	; 0x8009f4 <__flp+0x1>
    49c4:	22 c0       	rjmp	.+68     	; 0x4a0a <malloc+0x98>
    49c6:	21 15       	cp	r18, r1
    49c8:	31 05       	cpc	r19, r1
    49ca:	19 f0       	breq	.+6      	; 0x49d2 <malloc+0x60>
    49cc:	42 17       	cp	r20, r18
    49ce:	53 07       	cpc	r21, r19
    49d0:	18 f4       	brcc	.+6      	; 0x49d8 <malloc+0x66>
    49d2:	9a 01       	movw	r18, r20
    49d4:	bd 01       	movw	r22, r26
    49d6:	ef 01       	movw	r28, r30
    49d8:	df 01       	movw	r26, r30
    49da:	f8 01       	movw	r30, r16
    49dc:	db cf       	rjmp	.-74     	; 0x4994 <malloc+0x22>
    49de:	21 15       	cp	r18, r1
    49e0:	31 05       	cpc	r19, r1
    49e2:	f9 f0       	breq	.+62     	; 0x4a22 <malloc+0xb0>
    49e4:	28 1b       	sub	r18, r24
    49e6:	39 0b       	sbc	r19, r25
    49e8:	24 30       	cpi	r18, 0x04	; 4
    49ea:	31 05       	cpc	r19, r1
    49ec:	80 f4       	brcc	.+32     	; 0x4a0e <malloc+0x9c>
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	9b 81       	ldd	r25, Y+3	; 0x03
    49f2:	61 15       	cp	r22, r1
    49f4:	71 05       	cpc	r23, r1
    49f6:	21 f0       	breq	.+8      	; 0x4a00 <malloc+0x8e>
    49f8:	fb 01       	movw	r30, r22
    49fa:	93 83       	std	Z+3, r25	; 0x03
    49fc:	82 83       	std	Z+2, r24	; 0x02
    49fe:	04 c0       	rjmp	.+8      	; 0x4a08 <malloc+0x96>
    4a00:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <__flp+0x1>
    4a04:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <__flp>
    4a08:	fe 01       	movw	r30, r28
    4a0a:	32 96       	adiw	r30, 0x02	; 2
    4a0c:	44 c0       	rjmp	.+136    	; 0x4a96 <malloc+0x124>
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e2 0f       	add	r30, r18
    4a12:	f3 1f       	adc	r31, r19
    4a14:	81 93       	st	Z+, r24
    4a16:	91 93       	st	Z+, r25
    4a18:	22 50       	subi	r18, 0x02	; 2
    4a1a:	31 09       	sbc	r19, r1
    4a1c:	39 83       	std	Y+1, r19	; 0x01
    4a1e:	28 83       	st	Y, r18
    4a20:	3a c0       	rjmp	.+116    	; 0x4a96 <malloc+0x124>
    4a22:	20 91 f1 09 	lds	r18, 0x09F1	; 0x8009f1 <__brkval>
    4a26:	30 91 f2 09 	lds	r19, 0x09F2	; 0x8009f2 <__brkval+0x1>
    4a2a:	23 2b       	or	r18, r19
    4a2c:	41 f4       	brne	.+16     	; 0x4a3e <malloc+0xcc>
    4a2e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4a32:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4a36:	30 93 f2 09 	sts	0x09F2, r19	; 0x8009f2 <__brkval+0x1>
    4a3a:	20 93 f1 09 	sts	0x09F1, r18	; 0x8009f1 <__brkval>
    4a3e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4a42:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4a46:	21 15       	cp	r18, r1
    4a48:	31 05       	cpc	r19, r1
    4a4a:	41 f4       	brne	.+16     	; 0x4a5c <malloc+0xea>
    4a4c:	2d b7       	in	r18, 0x3d	; 61
    4a4e:	3e b7       	in	r19, 0x3e	; 62
    4a50:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a54:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a58:	24 1b       	sub	r18, r20
    4a5a:	35 0b       	sbc	r19, r21
    4a5c:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <__brkval>
    4a60:	f0 91 f2 09 	lds	r31, 0x09F2	; 0x8009f2 <__brkval+0x1>
    4a64:	e2 17       	cp	r30, r18
    4a66:	f3 07       	cpc	r31, r19
    4a68:	a0 f4       	brcc	.+40     	; 0x4a92 <malloc+0x120>
    4a6a:	2e 1b       	sub	r18, r30
    4a6c:	3f 0b       	sbc	r19, r31
    4a6e:	28 17       	cp	r18, r24
    4a70:	39 07       	cpc	r19, r25
    4a72:	78 f0       	brcs	.+30     	; 0x4a92 <malloc+0x120>
    4a74:	ac 01       	movw	r20, r24
    4a76:	4e 5f       	subi	r20, 0xFE	; 254
    4a78:	5f 4f       	sbci	r21, 0xFF	; 255
    4a7a:	24 17       	cp	r18, r20
    4a7c:	35 07       	cpc	r19, r21
    4a7e:	48 f0       	brcs	.+18     	; 0x4a92 <malloc+0x120>
    4a80:	4e 0f       	add	r20, r30
    4a82:	5f 1f       	adc	r21, r31
    4a84:	50 93 f2 09 	sts	0x09F2, r21	; 0x8009f2 <__brkval+0x1>
    4a88:	40 93 f1 09 	sts	0x09F1, r20	; 0x8009f1 <__brkval>
    4a8c:	81 93       	st	Z+, r24
    4a8e:	91 93       	st	Z+, r25
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <malloc+0x124>
    4a92:	e0 e0       	ldi	r30, 0x00	; 0
    4a94:	f0 e0       	ldi	r31, 0x00	; 0
    4a96:	cf 01       	movw	r24, r30
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	08 95       	ret

00004aa2 <free>:
    4aa2:	cf 93       	push	r28
    4aa4:	df 93       	push	r29
    4aa6:	00 97       	sbiw	r24, 0x00	; 0
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <free+0xa>
    4aaa:	81 c0       	rjmp	.+258    	; 0x4bae <free+0x10c>
    4aac:	fc 01       	movw	r30, r24
    4aae:	32 97       	sbiw	r30, 0x02	; 2
    4ab0:	13 82       	std	Z+3, r1	; 0x03
    4ab2:	12 82       	std	Z+2, r1	; 0x02
    4ab4:	a0 91 f3 09 	lds	r26, 0x09F3	; 0x8009f3 <__flp>
    4ab8:	b0 91 f4 09 	lds	r27, 0x09F4	; 0x8009f4 <__flp+0x1>
    4abc:	10 97       	sbiw	r26, 0x00	; 0
    4abe:	81 f4       	brne	.+32     	; 0x4ae0 <free+0x3e>
    4ac0:	20 81       	ld	r18, Z
    4ac2:	31 81       	ldd	r19, Z+1	; 0x01
    4ac4:	82 0f       	add	r24, r18
    4ac6:	93 1f       	adc	r25, r19
    4ac8:	20 91 f1 09 	lds	r18, 0x09F1	; 0x8009f1 <__brkval>
    4acc:	30 91 f2 09 	lds	r19, 0x09F2	; 0x8009f2 <__brkval+0x1>
    4ad0:	28 17       	cp	r18, r24
    4ad2:	39 07       	cpc	r19, r25
    4ad4:	51 f5       	brne	.+84     	; 0x4b2a <free+0x88>
    4ad6:	f0 93 f2 09 	sts	0x09F2, r31	; 0x8009f2 <__brkval+0x1>
    4ada:	e0 93 f1 09 	sts	0x09F1, r30	; 0x8009f1 <__brkval>
    4ade:	67 c0       	rjmp	.+206    	; 0x4bae <free+0x10c>
    4ae0:	ed 01       	movw	r28, r26
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	ce 17       	cp	r28, r30
    4ae8:	df 07       	cpc	r29, r31
    4aea:	40 f4       	brcc	.+16     	; 0x4afc <free+0x5a>
    4aec:	4a 81       	ldd	r20, Y+2	; 0x02
    4aee:	5b 81       	ldd	r21, Y+3	; 0x03
    4af0:	9e 01       	movw	r18, r28
    4af2:	41 15       	cp	r20, r1
    4af4:	51 05       	cpc	r21, r1
    4af6:	f1 f0       	breq	.+60     	; 0x4b34 <free+0x92>
    4af8:	ea 01       	movw	r28, r20
    4afa:	f5 cf       	rjmp	.-22     	; 0x4ae6 <free+0x44>
    4afc:	d3 83       	std	Z+3, r29	; 0x03
    4afe:	c2 83       	std	Z+2, r28	; 0x02
    4b00:	40 81       	ld	r20, Z
    4b02:	51 81       	ldd	r21, Z+1	; 0x01
    4b04:	84 0f       	add	r24, r20
    4b06:	95 1f       	adc	r25, r21
    4b08:	c8 17       	cp	r28, r24
    4b0a:	d9 07       	cpc	r29, r25
    4b0c:	59 f4       	brne	.+22     	; 0x4b24 <free+0x82>
    4b0e:	88 81       	ld	r24, Y
    4b10:	99 81       	ldd	r25, Y+1	; 0x01
    4b12:	84 0f       	add	r24, r20
    4b14:	95 1f       	adc	r25, r21
    4b16:	02 96       	adiw	r24, 0x02	; 2
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	80 83       	st	Z, r24
    4b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b20:	93 83       	std	Z+3, r25	; 0x03
    4b22:	82 83       	std	Z+2, r24	; 0x02
    4b24:	21 15       	cp	r18, r1
    4b26:	31 05       	cpc	r19, r1
    4b28:	29 f4       	brne	.+10     	; 0x4b34 <free+0x92>
    4b2a:	f0 93 f4 09 	sts	0x09F4, r31	; 0x8009f4 <__flp+0x1>
    4b2e:	e0 93 f3 09 	sts	0x09F3, r30	; 0x8009f3 <__flp>
    4b32:	3d c0       	rjmp	.+122    	; 0x4bae <free+0x10c>
    4b34:	e9 01       	movw	r28, r18
    4b36:	fb 83       	std	Y+3, r31	; 0x03
    4b38:	ea 83       	std	Y+2, r30	; 0x02
    4b3a:	49 91       	ld	r20, Y+
    4b3c:	59 91       	ld	r21, Y+
    4b3e:	c4 0f       	add	r28, r20
    4b40:	d5 1f       	adc	r29, r21
    4b42:	ec 17       	cp	r30, r28
    4b44:	fd 07       	cpc	r31, r29
    4b46:	61 f4       	brne	.+24     	; 0x4b60 <free+0xbe>
    4b48:	80 81       	ld	r24, Z
    4b4a:	91 81       	ldd	r25, Z+1	; 0x01
    4b4c:	84 0f       	add	r24, r20
    4b4e:	95 1f       	adc	r25, r21
    4b50:	02 96       	adiw	r24, 0x02	; 2
    4b52:	e9 01       	movw	r28, r18
    4b54:	99 83       	std	Y+1, r25	; 0x01
    4b56:	88 83       	st	Y, r24
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	9b 83       	std	Y+3, r25	; 0x03
    4b5e:	8a 83       	std	Y+2, r24	; 0x02
    4b60:	e0 e0       	ldi	r30, 0x00	; 0
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	12 96       	adiw	r26, 0x02	; 2
    4b66:	8d 91       	ld	r24, X+
    4b68:	9c 91       	ld	r25, X
    4b6a:	13 97       	sbiw	r26, 0x03	; 3
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	19 f0       	breq	.+6      	; 0x4b76 <free+0xd4>
    4b70:	fd 01       	movw	r30, r26
    4b72:	dc 01       	movw	r26, r24
    4b74:	f7 cf       	rjmp	.-18     	; 0x4b64 <free+0xc2>
    4b76:	8d 91       	ld	r24, X+
    4b78:	9c 91       	ld	r25, X
    4b7a:	11 97       	sbiw	r26, 0x01	; 1
    4b7c:	9d 01       	movw	r18, r26
    4b7e:	2e 5f       	subi	r18, 0xFE	; 254
    4b80:	3f 4f       	sbci	r19, 0xFF	; 255
    4b82:	82 0f       	add	r24, r18
    4b84:	93 1f       	adc	r25, r19
    4b86:	20 91 f1 09 	lds	r18, 0x09F1	; 0x8009f1 <__brkval>
    4b8a:	30 91 f2 09 	lds	r19, 0x09F2	; 0x8009f2 <__brkval+0x1>
    4b8e:	28 17       	cp	r18, r24
    4b90:	39 07       	cpc	r19, r25
    4b92:	69 f4       	brne	.+26     	; 0x4bae <free+0x10c>
    4b94:	30 97       	sbiw	r30, 0x00	; 0
    4b96:	29 f4       	brne	.+10     	; 0x4ba2 <free+0x100>
    4b98:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <__flp+0x1>
    4b9c:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <__flp>
    4ba0:	02 c0       	rjmp	.+4      	; 0x4ba6 <free+0x104>
    4ba2:	13 82       	std	Z+3, r1	; 0x03
    4ba4:	12 82       	std	Z+2, r1	; 0x02
    4ba6:	b0 93 f2 09 	sts	0x09F2, r27	; 0x8009f2 <__brkval+0x1>
    4baa:	a0 93 f1 09 	sts	0x09F1, r26	; 0x8009f1 <__brkval>
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	08 95       	ret

00004bb4 <abort>:
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	f8 94       	cli
    4bba:	58 c3       	rjmp	.+1712   	; 0x526c <_exit>

00004bbc <memcpy>:
    4bbc:	fb 01       	movw	r30, r22
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <memcpy+0xa>
    4bc2:	01 90       	ld	r0, Z+
    4bc4:	0d 92       	st	X+, r0
    4bc6:	41 50       	subi	r20, 0x01	; 1
    4bc8:	50 40       	sbci	r21, 0x00	; 0
    4bca:	d8 f7       	brcc	.-10     	; 0x4bc2 <memcpy+0x6>
    4bcc:	08 95       	ret

00004bce <memset>:
    4bce:	dc 01       	movw	r26, r24
    4bd0:	01 c0       	rjmp	.+2      	; 0x4bd4 <memset+0x6>
    4bd2:	6d 93       	st	X+, r22
    4bd4:	41 50       	subi	r20, 0x01	; 1
    4bd6:	50 40       	sbci	r21, 0x00	; 0
    4bd8:	e0 f7       	brcc	.-8      	; 0x4bd2 <memset+0x4>
    4bda:	08 95       	ret

00004bdc <strcat>:
    4bdc:	fb 01       	movw	r30, r22
    4bde:	dc 01       	movw	r26, r24
    4be0:	0d 90       	ld	r0, X+
    4be2:	00 20       	and	r0, r0
    4be4:	e9 f7       	brne	.-6      	; 0x4be0 <strcat+0x4>
    4be6:	11 97       	sbiw	r26, 0x01	; 1
    4be8:	01 90       	ld	r0, Z+
    4bea:	0d 92       	st	X+, r0
    4bec:	00 20       	and	r0, r0
    4bee:	e1 f7       	brne	.-8      	; 0x4be8 <strcat+0xc>
    4bf0:	08 95       	ret

00004bf2 <strcpy>:
    4bf2:	fb 01       	movw	r30, r22
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	01 90       	ld	r0, Z+
    4bf8:	0d 92       	st	X+, r0
    4bfa:	00 20       	and	r0, r0
    4bfc:	e1 f7       	brne	.-8      	; 0x4bf6 <strcpy+0x4>
    4bfe:	08 95       	ret

00004c00 <strncasecmp>:
    4c00:	fb 01       	movw	r30, r22
    4c02:	dc 01       	movw	r26, r24
    4c04:	41 50       	subi	r20, 0x01	; 1
    4c06:	50 40       	sbci	r21, 0x00	; 0
    4c08:	88 f0       	brcs	.+34     	; 0x4c2c <strncasecmp+0x2c>
    4c0a:	8d 91       	ld	r24, X+
    4c0c:	81 34       	cpi	r24, 0x41	; 65
    4c0e:	1c f0       	brlt	.+6      	; 0x4c16 <strncasecmp+0x16>
    4c10:	8b 35       	cpi	r24, 0x5B	; 91
    4c12:	0c f4       	brge	.+2      	; 0x4c16 <strncasecmp+0x16>
    4c14:	80 5e       	subi	r24, 0xE0	; 224
    4c16:	61 91       	ld	r22, Z+
    4c18:	61 34       	cpi	r22, 0x41	; 65
    4c1a:	1c f0       	brlt	.+6      	; 0x4c22 <strncasecmp+0x22>
    4c1c:	6b 35       	cpi	r22, 0x5B	; 91
    4c1e:	0c f4       	brge	.+2      	; 0x4c22 <strncasecmp+0x22>
    4c20:	60 5e       	subi	r22, 0xE0	; 224
    4c22:	86 1b       	sub	r24, r22
    4c24:	61 11       	cpse	r22, r1
    4c26:	71 f3       	breq	.-36     	; 0x4c04 <strncasecmp+0x4>
    4c28:	99 0b       	sbc	r25, r25
    4c2a:	08 95       	ret
    4c2c:	88 1b       	sub	r24, r24
    4c2e:	fc cf       	rjmp	.-8      	; 0x4c28 <strncasecmp+0x28>

00004c30 <printf>:
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	ae 01       	movw	r20, r28
    4c3a:	4a 5f       	subi	r20, 0xFA	; 250
    4c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c3e:	fa 01       	movw	r30, r20
    4c40:	61 91       	ld	r22, Z+
    4c42:	71 91       	ld	r23, Z+
    4c44:	af 01       	movw	r20, r30
    4c46:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <__iob+0x2>
    4c4a:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <__iob+0x3>
    4c4e:	61 d0       	rcall	.+194    	; 0x4d12 <vfprintf>
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	08 95       	ret

00004c56 <puts>:
    4c56:	0f 93       	push	r16
    4c58:	1f 93       	push	r17
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	e0 91 f7 09 	lds	r30, 0x09F7	; 0x8009f7 <__iob+0x2>
    4c62:	f0 91 f8 09 	lds	r31, 0x09F8	; 0x8009f8 <__iob+0x3>
    4c66:	23 81       	ldd	r18, Z+3	; 0x03
    4c68:	21 ff       	sbrs	r18, 1
    4c6a:	1b c0       	rjmp	.+54     	; 0x4ca2 <puts+0x4c>
    4c6c:	8c 01       	movw	r16, r24
    4c6e:	d0 e0       	ldi	r29, 0x00	; 0
    4c70:	c0 e0       	ldi	r28, 0x00	; 0
    4c72:	f8 01       	movw	r30, r16
    4c74:	81 91       	ld	r24, Z+
    4c76:	8f 01       	movw	r16, r30
    4c78:	60 91 f7 09 	lds	r22, 0x09F7	; 0x8009f7 <__iob+0x2>
    4c7c:	70 91 f8 09 	lds	r23, 0x09F8	; 0x8009f8 <__iob+0x3>
    4c80:	db 01       	movw	r26, r22
    4c82:	18 96       	adiw	r26, 0x08	; 8
    4c84:	ed 91       	ld	r30, X+
    4c86:	fc 91       	ld	r31, X
    4c88:	19 97       	sbiw	r26, 0x09	; 9
    4c8a:	88 23       	and	r24, r24
    4c8c:	31 f0       	breq	.+12     	; 0x4c9a <puts+0x44>
    4c8e:	19 95       	eicall
    4c90:	89 2b       	or	r24, r25
    4c92:	79 f3       	breq	.-34     	; 0x4c72 <puts+0x1c>
    4c94:	df ef       	ldi	r29, 0xFF	; 255
    4c96:	cf ef       	ldi	r28, 0xFF	; 255
    4c98:	ec cf       	rjmp	.-40     	; 0x4c72 <puts+0x1c>
    4c9a:	8a e0       	ldi	r24, 0x0A	; 10
    4c9c:	19 95       	eicall
    4c9e:	89 2b       	or	r24, r25
    4ca0:	19 f0       	breq	.+6      	; 0x4ca8 <puts+0x52>
    4ca2:	8f ef       	ldi	r24, 0xFF	; 255
    4ca4:	9f ef       	ldi	r25, 0xFF	; 255
    4ca6:	02 c0       	rjmp	.+4      	; 0x4cac <puts+0x56>
    4ca8:	8d 2f       	mov	r24, r29
    4caa:	9c 2f       	mov	r25, r28
    4cac:	df 91       	pop	r29
    4cae:	cf 91       	pop	r28
    4cb0:	1f 91       	pop	r17
    4cb2:	0f 91       	pop	r16
    4cb4:	08 95       	ret

00004cb6 <sprintf>:
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	cd b7       	in	r28, 0x3d	; 61
    4cc0:	de b7       	in	r29, 0x3e	; 62
    4cc2:	2e 97       	sbiw	r28, 0x0e	; 14
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	de bf       	out	0x3e, r29	; 62
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	cd bf       	out	0x3d, r28	; 61
    4cce:	0e 89       	ldd	r16, Y+22	; 0x16
    4cd0:	1f 89       	ldd	r17, Y+23	; 0x17
    4cd2:	86 e0       	ldi	r24, 0x06	; 6
    4cd4:	8c 83       	std	Y+4, r24	; 0x04
    4cd6:	1a 83       	std	Y+2, r17	; 0x02
    4cd8:	09 83       	std	Y+1, r16	; 0x01
    4cda:	8f ef       	ldi	r24, 0xFF	; 255
    4cdc:	9f e7       	ldi	r25, 0x7F	; 127
    4cde:	9e 83       	std	Y+6, r25	; 0x06
    4ce0:	8d 83       	std	Y+5, r24	; 0x05
    4ce2:	ae 01       	movw	r20, r28
    4ce4:	46 5e       	subi	r20, 0xE6	; 230
    4ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ce8:	68 8d       	ldd	r22, Y+24	; 0x18
    4cea:	79 8d       	ldd	r23, Y+25	; 0x19
    4cec:	ce 01       	movw	r24, r28
    4cee:	01 96       	adiw	r24, 0x01	; 1
    4cf0:	10 d0       	rcall	.+32     	; 0x4d12 <vfprintf>
    4cf2:	ef 81       	ldd	r30, Y+7	; 0x07
    4cf4:	f8 85       	ldd	r31, Y+8	; 0x08
    4cf6:	e0 0f       	add	r30, r16
    4cf8:	f1 1f       	adc	r31, r17
    4cfa:	10 82       	st	Z, r1
    4cfc:	2e 96       	adiw	r28, 0x0e	; 14
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
    4d08:	df 91       	pop	r29
    4d0a:	cf 91       	pop	r28
    4d0c:	1f 91       	pop	r17
    4d0e:	0f 91       	pop	r16
    4d10:	08 95       	ret

00004d12 <vfprintf>:
    4d12:	2f 92       	push	r2
    4d14:	3f 92       	push	r3
    4d16:	4f 92       	push	r4
    4d18:	5f 92       	push	r5
    4d1a:	6f 92       	push	r6
    4d1c:	7f 92       	push	r7
    4d1e:	8f 92       	push	r8
    4d20:	9f 92       	push	r9
    4d22:	af 92       	push	r10
    4d24:	bf 92       	push	r11
    4d26:	cf 92       	push	r12
    4d28:	df 92       	push	r13
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	2b 97       	sbiw	r28, 0x0b	; 11
    4d3c:	0f b6       	in	r0, 0x3f	; 63
    4d3e:	f8 94       	cli
    4d40:	de bf       	out	0x3e, r29	; 62
    4d42:	0f be       	out	0x3f, r0	; 63
    4d44:	cd bf       	out	0x3d, r28	; 61
    4d46:	6c 01       	movw	r12, r24
    4d48:	7b 01       	movw	r14, r22
    4d4a:	8a 01       	movw	r16, r20
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	17 82       	std	Z+7, r1	; 0x07
    4d50:	16 82       	std	Z+6, r1	; 0x06
    4d52:	83 81       	ldd	r24, Z+3	; 0x03
    4d54:	81 ff       	sbrs	r24, 1
    4d56:	bf c1       	rjmp	.+894    	; 0x50d6 <vfprintf+0x3c4>
    4d58:	ce 01       	movw	r24, r28
    4d5a:	01 96       	adiw	r24, 0x01	; 1
    4d5c:	3c 01       	movw	r6, r24
    4d5e:	f6 01       	movw	r30, r12
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	f7 01       	movw	r30, r14
    4d64:	93 fd       	sbrc	r25, 3
    4d66:	85 91       	lpm	r24, Z+
    4d68:	93 ff       	sbrs	r25, 3
    4d6a:	81 91       	ld	r24, Z+
    4d6c:	7f 01       	movw	r14, r30
    4d6e:	88 23       	and	r24, r24
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <vfprintf+0x62>
    4d72:	ad c1       	rjmp	.+858    	; 0x50ce <vfprintf+0x3bc>
    4d74:	85 32       	cpi	r24, 0x25	; 37
    4d76:	39 f4       	brne	.+14     	; 0x4d86 <vfprintf+0x74>
    4d78:	93 fd       	sbrc	r25, 3
    4d7a:	85 91       	lpm	r24, Z+
    4d7c:	93 ff       	sbrs	r25, 3
    4d7e:	81 91       	ld	r24, Z+
    4d80:	7f 01       	movw	r14, r30
    4d82:	85 32       	cpi	r24, 0x25	; 37
    4d84:	21 f4       	brne	.+8      	; 0x4d8e <vfprintf+0x7c>
    4d86:	b6 01       	movw	r22, r12
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	d6 d1       	rcall	.+940    	; 0x5138 <fputc>
    4d8c:	e8 cf       	rjmp	.-48     	; 0x4d5e <vfprintf+0x4c>
    4d8e:	91 2c       	mov	r9, r1
    4d90:	21 2c       	mov	r2, r1
    4d92:	31 2c       	mov	r3, r1
    4d94:	ff e1       	ldi	r31, 0x1F	; 31
    4d96:	f3 15       	cp	r31, r3
    4d98:	d8 f0       	brcs	.+54     	; 0x4dd0 <vfprintf+0xbe>
    4d9a:	8b 32       	cpi	r24, 0x2B	; 43
    4d9c:	79 f0       	breq	.+30     	; 0x4dbc <vfprintf+0xaa>
    4d9e:	38 f4       	brcc	.+14     	; 0x4dae <vfprintf+0x9c>
    4da0:	80 32       	cpi	r24, 0x20	; 32
    4da2:	79 f0       	breq	.+30     	; 0x4dc2 <vfprintf+0xb0>
    4da4:	83 32       	cpi	r24, 0x23	; 35
    4da6:	a1 f4       	brne	.+40     	; 0x4dd0 <vfprintf+0xbe>
    4da8:	23 2d       	mov	r18, r3
    4daa:	20 61       	ori	r18, 0x10	; 16
    4dac:	1d c0       	rjmp	.+58     	; 0x4de8 <vfprintf+0xd6>
    4dae:	8d 32       	cpi	r24, 0x2D	; 45
    4db0:	61 f0       	breq	.+24     	; 0x4dca <vfprintf+0xb8>
    4db2:	80 33       	cpi	r24, 0x30	; 48
    4db4:	69 f4       	brne	.+26     	; 0x4dd0 <vfprintf+0xbe>
    4db6:	23 2d       	mov	r18, r3
    4db8:	21 60       	ori	r18, 0x01	; 1
    4dba:	16 c0       	rjmp	.+44     	; 0x4de8 <vfprintf+0xd6>
    4dbc:	83 2d       	mov	r24, r3
    4dbe:	82 60       	ori	r24, 0x02	; 2
    4dc0:	38 2e       	mov	r3, r24
    4dc2:	e3 2d       	mov	r30, r3
    4dc4:	e4 60       	ori	r30, 0x04	; 4
    4dc6:	3e 2e       	mov	r3, r30
    4dc8:	2a c0       	rjmp	.+84     	; 0x4e1e <vfprintf+0x10c>
    4dca:	f3 2d       	mov	r31, r3
    4dcc:	f8 60       	ori	r31, 0x08	; 8
    4dce:	1d c0       	rjmp	.+58     	; 0x4e0a <vfprintf+0xf8>
    4dd0:	37 fc       	sbrc	r3, 7
    4dd2:	2d c0       	rjmp	.+90     	; 0x4e2e <vfprintf+0x11c>
    4dd4:	20 ed       	ldi	r18, 0xD0	; 208
    4dd6:	28 0f       	add	r18, r24
    4dd8:	2a 30       	cpi	r18, 0x0A	; 10
    4dda:	40 f0       	brcs	.+16     	; 0x4dec <vfprintf+0xda>
    4ddc:	8e 32       	cpi	r24, 0x2E	; 46
    4dde:	b9 f4       	brne	.+46     	; 0x4e0e <vfprintf+0xfc>
    4de0:	36 fc       	sbrc	r3, 6
    4de2:	75 c1       	rjmp	.+746    	; 0x50ce <vfprintf+0x3bc>
    4de4:	23 2d       	mov	r18, r3
    4de6:	20 64       	ori	r18, 0x40	; 64
    4de8:	32 2e       	mov	r3, r18
    4dea:	19 c0       	rjmp	.+50     	; 0x4e1e <vfprintf+0x10c>
    4dec:	36 fe       	sbrs	r3, 6
    4dee:	06 c0       	rjmp	.+12     	; 0x4dfc <vfprintf+0xea>
    4df0:	8a e0       	ldi	r24, 0x0A	; 10
    4df2:	98 9e       	mul	r9, r24
    4df4:	20 0d       	add	r18, r0
    4df6:	11 24       	eor	r1, r1
    4df8:	92 2e       	mov	r9, r18
    4dfa:	11 c0       	rjmp	.+34     	; 0x4e1e <vfprintf+0x10c>
    4dfc:	ea e0       	ldi	r30, 0x0A	; 10
    4dfe:	2e 9e       	mul	r2, r30
    4e00:	20 0d       	add	r18, r0
    4e02:	11 24       	eor	r1, r1
    4e04:	22 2e       	mov	r2, r18
    4e06:	f3 2d       	mov	r31, r3
    4e08:	f0 62       	ori	r31, 0x20	; 32
    4e0a:	3f 2e       	mov	r3, r31
    4e0c:	08 c0       	rjmp	.+16     	; 0x4e1e <vfprintf+0x10c>
    4e0e:	8c 36       	cpi	r24, 0x6C	; 108
    4e10:	21 f4       	brne	.+8      	; 0x4e1a <vfprintf+0x108>
    4e12:	83 2d       	mov	r24, r3
    4e14:	80 68       	ori	r24, 0x80	; 128
    4e16:	38 2e       	mov	r3, r24
    4e18:	02 c0       	rjmp	.+4      	; 0x4e1e <vfprintf+0x10c>
    4e1a:	88 36       	cpi	r24, 0x68	; 104
    4e1c:	41 f4       	brne	.+16     	; 0x4e2e <vfprintf+0x11c>
    4e1e:	f7 01       	movw	r30, r14
    4e20:	93 fd       	sbrc	r25, 3
    4e22:	85 91       	lpm	r24, Z+
    4e24:	93 ff       	sbrs	r25, 3
    4e26:	81 91       	ld	r24, Z+
    4e28:	7f 01       	movw	r14, r30
    4e2a:	81 11       	cpse	r24, r1
    4e2c:	b3 cf       	rjmp	.-154    	; 0x4d94 <vfprintf+0x82>
    4e2e:	98 2f       	mov	r25, r24
    4e30:	9f 7d       	andi	r25, 0xDF	; 223
    4e32:	95 54       	subi	r25, 0x45	; 69
    4e34:	93 30       	cpi	r25, 0x03	; 3
    4e36:	28 f4       	brcc	.+10     	; 0x4e42 <vfprintf+0x130>
    4e38:	0c 5f       	subi	r16, 0xFC	; 252
    4e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3c:	9f e3       	ldi	r25, 0x3F	; 63
    4e3e:	99 83       	std	Y+1, r25	; 0x01
    4e40:	0d c0       	rjmp	.+26     	; 0x4e5c <vfprintf+0x14a>
    4e42:	83 36       	cpi	r24, 0x63	; 99
    4e44:	31 f0       	breq	.+12     	; 0x4e52 <vfprintf+0x140>
    4e46:	83 37       	cpi	r24, 0x73	; 115
    4e48:	71 f0       	breq	.+28     	; 0x4e66 <vfprintf+0x154>
    4e4a:	83 35       	cpi	r24, 0x53	; 83
    4e4c:	09 f0       	breq	.+2      	; 0x4e50 <vfprintf+0x13e>
    4e4e:	55 c0       	rjmp	.+170    	; 0x4efa <vfprintf+0x1e8>
    4e50:	20 c0       	rjmp	.+64     	; 0x4e92 <vfprintf+0x180>
    4e52:	f8 01       	movw	r30, r16
    4e54:	80 81       	ld	r24, Z
    4e56:	89 83       	std	Y+1, r24	; 0x01
    4e58:	0e 5f       	subi	r16, 0xFE	; 254
    4e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5c:	88 24       	eor	r8, r8
    4e5e:	83 94       	inc	r8
    4e60:	91 2c       	mov	r9, r1
    4e62:	53 01       	movw	r10, r6
    4e64:	12 c0       	rjmp	.+36     	; 0x4e8a <vfprintf+0x178>
    4e66:	28 01       	movw	r4, r16
    4e68:	f2 e0       	ldi	r31, 0x02	; 2
    4e6a:	4f 0e       	add	r4, r31
    4e6c:	51 1c       	adc	r5, r1
    4e6e:	f8 01       	movw	r30, r16
    4e70:	a0 80       	ld	r10, Z
    4e72:	b1 80       	ldd	r11, Z+1	; 0x01
    4e74:	36 fe       	sbrs	r3, 6
    4e76:	03 c0       	rjmp	.+6      	; 0x4e7e <vfprintf+0x16c>
    4e78:	69 2d       	mov	r22, r9
    4e7a:	70 e0       	ldi	r23, 0x00	; 0
    4e7c:	02 c0       	rjmp	.+4      	; 0x4e82 <vfprintf+0x170>
    4e7e:	6f ef       	ldi	r22, 0xFF	; 255
    4e80:	7f ef       	ldi	r23, 0xFF	; 255
    4e82:	c5 01       	movw	r24, r10
    4e84:	4e d1       	rcall	.+668    	; 0x5122 <strnlen>
    4e86:	4c 01       	movw	r8, r24
    4e88:	82 01       	movw	r16, r4
    4e8a:	f3 2d       	mov	r31, r3
    4e8c:	ff 77       	andi	r31, 0x7F	; 127
    4e8e:	3f 2e       	mov	r3, r31
    4e90:	15 c0       	rjmp	.+42     	; 0x4ebc <vfprintf+0x1aa>
    4e92:	28 01       	movw	r4, r16
    4e94:	22 e0       	ldi	r18, 0x02	; 2
    4e96:	42 0e       	add	r4, r18
    4e98:	51 1c       	adc	r5, r1
    4e9a:	f8 01       	movw	r30, r16
    4e9c:	a0 80       	ld	r10, Z
    4e9e:	b1 80       	ldd	r11, Z+1	; 0x01
    4ea0:	36 fe       	sbrs	r3, 6
    4ea2:	03 c0       	rjmp	.+6      	; 0x4eaa <vfprintf+0x198>
    4ea4:	69 2d       	mov	r22, r9
    4ea6:	70 e0       	ldi	r23, 0x00	; 0
    4ea8:	02 c0       	rjmp	.+4      	; 0x4eae <vfprintf+0x19c>
    4eaa:	6f ef       	ldi	r22, 0xFF	; 255
    4eac:	7f ef       	ldi	r23, 0xFF	; 255
    4eae:	c5 01       	movw	r24, r10
    4eb0:	2d d1       	rcall	.+602    	; 0x510c <strnlen_P>
    4eb2:	4c 01       	movw	r8, r24
    4eb4:	f3 2d       	mov	r31, r3
    4eb6:	f0 68       	ori	r31, 0x80	; 128
    4eb8:	3f 2e       	mov	r3, r31
    4eba:	82 01       	movw	r16, r4
    4ebc:	33 fc       	sbrc	r3, 3
    4ebe:	19 c0       	rjmp	.+50     	; 0x4ef2 <vfprintf+0x1e0>
    4ec0:	82 2d       	mov	r24, r2
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	88 16       	cp	r8, r24
    4ec6:	99 06       	cpc	r9, r25
    4ec8:	a0 f4       	brcc	.+40     	; 0x4ef2 <vfprintf+0x1e0>
    4eca:	b6 01       	movw	r22, r12
    4ecc:	80 e2       	ldi	r24, 0x20	; 32
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	33 d1       	rcall	.+614    	; 0x5138 <fputc>
    4ed2:	2a 94       	dec	r2
    4ed4:	f5 cf       	rjmp	.-22     	; 0x4ec0 <vfprintf+0x1ae>
    4ed6:	f5 01       	movw	r30, r10
    4ed8:	37 fc       	sbrc	r3, 7
    4eda:	85 91       	lpm	r24, Z+
    4edc:	37 fe       	sbrs	r3, 7
    4ede:	81 91       	ld	r24, Z+
    4ee0:	5f 01       	movw	r10, r30
    4ee2:	b6 01       	movw	r22, r12
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	28 d1       	rcall	.+592    	; 0x5138 <fputc>
    4ee8:	21 10       	cpse	r2, r1
    4eea:	2a 94       	dec	r2
    4eec:	21 e0       	ldi	r18, 0x01	; 1
    4eee:	82 1a       	sub	r8, r18
    4ef0:	91 08       	sbc	r9, r1
    4ef2:	81 14       	cp	r8, r1
    4ef4:	91 04       	cpc	r9, r1
    4ef6:	79 f7       	brne	.-34     	; 0x4ed6 <vfprintf+0x1c4>
    4ef8:	e1 c0       	rjmp	.+450    	; 0x50bc <vfprintf+0x3aa>
    4efa:	84 36       	cpi	r24, 0x64	; 100
    4efc:	11 f0       	breq	.+4      	; 0x4f02 <vfprintf+0x1f0>
    4efe:	89 36       	cpi	r24, 0x69	; 105
    4f00:	39 f5       	brne	.+78     	; 0x4f50 <vfprintf+0x23e>
    4f02:	f8 01       	movw	r30, r16
    4f04:	37 fe       	sbrs	r3, 7
    4f06:	07 c0       	rjmp	.+14     	; 0x4f16 <vfprintf+0x204>
    4f08:	60 81       	ld	r22, Z
    4f0a:	71 81       	ldd	r23, Z+1	; 0x01
    4f0c:	82 81       	ldd	r24, Z+2	; 0x02
    4f0e:	93 81       	ldd	r25, Z+3	; 0x03
    4f10:	0c 5f       	subi	r16, 0xFC	; 252
    4f12:	1f 4f       	sbci	r17, 0xFF	; 255
    4f14:	08 c0       	rjmp	.+16     	; 0x4f26 <vfprintf+0x214>
    4f16:	60 81       	ld	r22, Z
    4f18:	71 81       	ldd	r23, Z+1	; 0x01
    4f1a:	07 2e       	mov	r0, r23
    4f1c:	00 0c       	add	r0, r0
    4f1e:	88 0b       	sbc	r24, r24
    4f20:	99 0b       	sbc	r25, r25
    4f22:	0e 5f       	subi	r16, 0xFE	; 254
    4f24:	1f 4f       	sbci	r17, 0xFF	; 255
    4f26:	f3 2d       	mov	r31, r3
    4f28:	ff 76       	andi	r31, 0x6F	; 111
    4f2a:	3f 2e       	mov	r3, r31
    4f2c:	97 ff       	sbrs	r25, 7
    4f2e:	09 c0       	rjmp	.+18     	; 0x4f42 <vfprintf+0x230>
    4f30:	90 95       	com	r25
    4f32:	80 95       	com	r24
    4f34:	70 95       	com	r23
    4f36:	61 95       	neg	r22
    4f38:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f3e:	f0 68       	ori	r31, 0x80	; 128
    4f40:	3f 2e       	mov	r3, r31
    4f42:	2a e0       	ldi	r18, 0x0A	; 10
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	a3 01       	movw	r20, r6
    4f48:	33 d1       	rcall	.+614    	; 0x51b0 <__ultoa_invert>
    4f4a:	88 2e       	mov	r8, r24
    4f4c:	86 18       	sub	r8, r6
    4f4e:	44 c0       	rjmp	.+136    	; 0x4fd8 <vfprintf+0x2c6>
    4f50:	85 37       	cpi	r24, 0x75	; 117
    4f52:	31 f4       	brne	.+12     	; 0x4f60 <vfprintf+0x24e>
    4f54:	23 2d       	mov	r18, r3
    4f56:	2f 7e       	andi	r18, 0xEF	; 239
    4f58:	b2 2e       	mov	r11, r18
    4f5a:	2a e0       	ldi	r18, 0x0A	; 10
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	25 c0       	rjmp	.+74     	; 0x4faa <vfprintf+0x298>
    4f60:	93 2d       	mov	r25, r3
    4f62:	99 7f       	andi	r25, 0xF9	; 249
    4f64:	b9 2e       	mov	r11, r25
    4f66:	8f 36       	cpi	r24, 0x6F	; 111
    4f68:	c1 f0       	breq	.+48     	; 0x4f9a <vfprintf+0x288>
    4f6a:	18 f4       	brcc	.+6      	; 0x4f72 <vfprintf+0x260>
    4f6c:	88 35       	cpi	r24, 0x58	; 88
    4f6e:	79 f0       	breq	.+30     	; 0x4f8e <vfprintf+0x27c>
    4f70:	ae c0       	rjmp	.+348    	; 0x50ce <vfprintf+0x3bc>
    4f72:	80 37       	cpi	r24, 0x70	; 112
    4f74:	19 f0       	breq	.+6      	; 0x4f7c <vfprintf+0x26a>
    4f76:	88 37       	cpi	r24, 0x78	; 120
    4f78:	21 f0       	breq	.+8      	; 0x4f82 <vfprintf+0x270>
    4f7a:	a9 c0       	rjmp	.+338    	; 0x50ce <vfprintf+0x3bc>
    4f7c:	e9 2f       	mov	r30, r25
    4f7e:	e0 61       	ori	r30, 0x10	; 16
    4f80:	be 2e       	mov	r11, r30
    4f82:	b4 fe       	sbrs	r11, 4
    4f84:	0d c0       	rjmp	.+26     	; 0x4fa0 <vfprintf+0x28e>
    4f86:	fb 2d       	mov	r31, r11
    4f88:	f4 60       	ori	r31, 0x04	; 4
    4f8a:	bf 2e       	mov	r11, r31
    4f8c:	09 c0       	rjmp	.+18     	; 0x4fa0 <vfprintf+0x28e>
    4f8e:	34 fe       	sbrs	r3, 4
    4f90:	0a c0       	rjmp	.+20     	; 0x4fa6 <vfprintf+0x294>
    4f92:	29 2f       	mov	r18, r25
    4f94:	26 60       	ori	r18, 0x06	; 6
    4f96:	b2 2e       	mov	r11, r18
    4f98:	06 c0       	rjmp	.+12     	; 0x4fa6 <vfprintf+0x294>
    4f9a:	28 e0       	ldi	r18, 0x08	; 8
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	05 c0       	rjmp	.+10     	; 0x4faa <vfprintf+0x298>
    4fa0:	20 e1       	ldi	r18, 0x10	; 16
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <vfprintf+0x298>
    4fa6:	20 e1       	ldi	r18, 0x10	; 16
    4fa8:	32 e0       	ldi	r19, 0x02	; 2
    4faa:	f8 01       	movw	r30, r16
    4fac:	b7 fe       	sbrs	r11, 7
    4fae:	07 c0       	rjmp	.+14     	; 0x4fbe <vfprintf+0x2ac>
    4fb0:	60 81       	ld	r22, Z
    4fb2:	71 81       	ldd	r23, Z+1	; 0x01
    4fb4:	82 81       	ldd	r24, Z+2	; 0x02
    4fb6:	93 81       	ldd	r25, Z+3	; 0x03
    4fb8:	0c 5f       	subi	r16, 0xFC	; 252
    4fba:	1f 4f       	sbci	r17, 0xFF	; 255
    4fbc:	06 c0       	rjmp	.+12     	; 0x4fca <vfprintf+0x2b8>
    4fbe:	60 81       	ld	r22, Z
    4fc0:	71 81       	ldd	r23, Z+1	; 0x01
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	0e 5f       	subi	r16, 0xFE	; 254
    4fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fca:	a3 01       	movw	r20, r6
    4fcc:	f1 d0       	rcall	.+482    	; 0x51b0 <__ultoa_invert>
    4fce:	88 2e       	mov	r8, r24
    4fd0:	86 18       	sub	r8, r6
    4fd2:	fb 2d       	mov	r31, r11
    4fd4:	ff 77       	andi	r31, 0x7F	; 127
    4fd6:	3f 2e       	mov	r3, r31
    4fd8:	36 fe       	sbrs	r3, 6
    4fda:	0d c0       	rjmp	.+26     	; 0x4ff6 <vfprintf+0x2e4>
    4fdc:	23 2d       	mov	r18, r3
    4fde:	2e 7f       	andi	r18, 0xFE	; 254
    4fe0:	a2 2e       	mov	r10, r18
    4fe2:	89 14       	cp	r8, r9
    4fe4:	58 f4       	brcc	.+22     	; 0x4ffc <vfprintf+0x2ea>
    4fe6:	34 fe       	sbrs	r3, 4
    4fe8:	0b c0       	rjmp	.+22     	; 0x5000 <vfprintf+0x2ee>
    4fea:	32 fc       	sbrc	r3, 2
    4fec:	09 c0       	rjmp	.+18     	; 0x5000 <vfprintf+0x2ee>
    4fee:	83 2d       	mov	r24, r3
    4ff0:	8e 7e       	andi	r24, 0xEE	; 238
    4ff2:	a8 2e       	mov	r10, r24
    4ff4:	05 c0       	rjmp	.+10     	; 0x5000 <vfprintf+0x2ee>
    4ff6:	b8 2c       	mov	r11, r8
    4ff8:	a3 2c       	mov	r10, r3
    4ffa:	03 c0       	rjmp	.+6      	; 0x5002 <vfprintf+0x2f0>
    4ffc:	b8 2c       	mov	r11, r8
    4ffe:	01 c0       	rjmp	.+2      	; 0x5002 <vfprintf+0x2f0>
    5000:	b9 2c       	mov	r11, r9
    5002:	a4 fe       	sbrs	r10, 4
    5004:	0f c0       	rjmp	.+30     	; 0x5024 <vfprintf+0x312>
    5006:	fe 01       	movw	r30, r28
    5008:	e8 0d       	add	r30, r8
    500a:	f1 1d       	adc	r31, r1
    500c:	80 81       	ld	r24, Z
    500e:	80 33       	cpi	r24, 0x30	; 48
    5010:	21 f4       	brne	.+8      	; 0x501a <vfprintf+0x308>
    5012:	9a 2d       	mov	r25, r10
    5014:	99 7e       	andi	r25, 0xE9	; 233
    5016:	a9 2e       	mov	r10, r25
    5018:	09 c0       	rjmp	.+18     	; 0x502c <vfprintf+0x31a>
    501a:	a2 fe       	sbrs	r10, 2
    501c:	06 c0       	rjmp	.+12     	; 0x502a <vfprintf+0x318>
    501e:	b3 94       	inc	r11
    5020:	b3 94       	inc	r11
    5022:	04 c0       	rjmp	.+8      	; 0x502c <vfprintf+0x31a>
    5024:	8a 2d       	mov	r24, r10
    5026:	86 78       	andi	r24, 0x86	; 134
    5028:	09 f0       	breq	.+2      	; 0x502c <vfprintf+0x31a>
    502a:	b3 94       	inc	r11
    502c:	a3 fc       	sbrc	r10, 3
    502e:	10 c0       	rjmp	.+32     	; 0x5050 <vfprintf+0x33e>
    5030:	a0 fe       	sbrs	r10, 0
    5032:	06 c0       	rjmp	.+12     	; 0x5040 <vfprintf+0x32e>
    5034:	b2 14       	cp	r11, r2
    5036:	80 f4       	brcc	.+32     	; 0x5058 <vfprintf+0x346>
    5038:	28 0c       	add	r2, r8
    503a:	92 2c       	mov	r9, r2
    503c:	9b 18       	sub	r9, r11
    503e:	0d c0       	rjmp	.+26     	; 0x505a <vfprintf+0x348>
    5040:	b2 14       	cp	r11, r2
    5042:	58 f4       	brcc	.+22     	; 0x505a <vfprintf+0x348>
    5044:	b6 01       	movw	r22, r12
    5046:	80 e2       	ldi	r24, 0x20	; 32
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	76 d0       	rcall	.+236    	; 0x5138 <fputc>
    504c:	b3 94       	inc	r11
    504e:	f8 cf       	rjmp	.-16     	; 0x5040 <vfprintf+0x32e>
    5050:	b2 14       	cp	r11, r2
    5052:	18 f4       	brcc	.+6      	; 0x505a <vfprintf+0x348>
    5054:	2b 18       	sub	r2, r11
    5056:	02 c0       	rjmp	.+4      	; 0x505c <vfprintf+0x34a>
    5058:	98 2c       	mov	r9, r8
    505a:	21 2c       	mov	r2, r1
    505c:	a4 fe       	sbrs	r10, 4
    505e:	0f c0       	rjmp	.+30     	; 0x507e <vfprintf+0x36c>
    5060:	b6 01       	movw	r22, r12
    5062:	80 e3       	ldi	r24, 0x30	; 48
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	68 d0       	rcall	.+208    	; 0x5138 <fputc>
    5068:	a2 fe       	sbrs	r10, 2
    506a:	16 c0       	rjmp	.+44     	; 0x5098 <vfprintf+0x386>
    506c:	a1 fc       	sbrc	r10, 1
    506e:	03 c0       	rjmp	.+6      	; 0x5076 <vfprintf+0x364>
    5070:	88 e7       	ldi	r24, 0x78	; 120
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	02 c0       	rjmp	.+4      	; 0x507a <vfprintf+0x368>
    5076:	88 e5       	ldi	r24, 0x58	; 88
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	b6 01       	movw	r22, r12
    507c:	0c c0       	rjmp	.+24     	; 0x5096 <vfprintf+0x384>
    507e:	8a 2d       	mov	r24, r10
    5080:	86 78       	andi	r24, 0x86	; 134
    5082:	51 f0       	breq	.+20     	; 0x5098 <vfprintf+0x386>
    5084:	a1 fe       	sbrs	r10, 1
    5086:	02 c0       	rjmp	.+4      	; 0x508c <vfprintf+0x37a>
    5088:	8b e2       	ldi	r24, 0x2B	; 43
    508a:	01 c0       	rjmp	.+2      	; 0x508e <vfprintf+0x37c>
    508c:	80 e2       	ldi	r24, 0x20	; 32
    508e:	a7 fc       	sbrc	r10, 7
    5090:	8d e2       	ldi	r24, 0x2D	; 45
    5092:	b6 01       	movw	r22, r12
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	50 d0       	rcall	.+160    	; 0x5138 <fputc>
    5098:	89 14       	cp	r8, r9
    509a:	30 f4       	brcc	.+12     	; 0x50a8 <vfprintf+0x396>
    509c:	b6 01       	movw	r22, r12
    509e:	80 e3       	ldi	r24, 0x30	; 48
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	4a d0       	rcall	.+148    	; 0x5138 <fputc>
    50a4:	9a 94       	dec	r9
    50a6:	f8 cf       	rjmp	.-16     	; 0x5098 <vfprintf+0x386>
    50a8:	8a 94       	dec	r8
    50aa:	f3 01       	movw	r30, r6
    50ac:	e8 0d       	add	r30, r8
    50ae:	f1 1d       	adc	r31, r1
    50b0:	80 81       	ld	r24, Z
    50b2:	b6 01       	movw	r22, r12
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	40 d0       	rcall	.+128    	; 0x5138 <fputc>
    50b8:	81 10       	cpse	r8, r1
    50ba:	f6 cf       	rjmp	.-20     	; 0x50a8 <vfprintf+0x396>
    50bc:	22 20       	and	r2, r2
    50be:	09 f4       	brne	.+2      	; 0x50c2 <vfprintf+0x3b0>
    50c0:	4e ce       	rjmp	.-868    	; 0x4d5e <vfprintf+0x4c>
    50c2:	b6 01       	movw	r22, r12
    50c4:	80 e2       	ldi	r24, 0x20	; 32
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	37 d0       	rcall	.+110    	; 0x5138 <fputc>
    50ca:	2a 94       	dec	r2
    50cc:	f7 cf       	rjmp	.-18     	; 0x50bc <vfprintf+0x3aa>
    50ce:	f6 01       	movw	r30, r12
    50d0:	86 81       	ldd	r24, Z+6	; 0x06
    50d2:	97 81       	ldd	r25, Z+7	; 0x07
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <vfprintf+0x3c8>
    50d6:	8f ef       	ldi	r24, 0xFF	; 255
    50d8:	9f ef       	ldi	r25, 0xFF	; 255
    50da:	2b 96       	adiw	r28, 0x0b	; 11
    50dc:	0f b6       	in	r0, 0x3f	; 63
    50de:	f8 94       	cli
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	cd bf       	out	0x3d, r28	; 61
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	df 90       	pop	r13
    50f4:	cf 90       	pop	r12
    50f6:	bf 90       	pop	r11
    50f8:	af 90       	pop	r10
    50fa:	9f 90       	pop	r9
    50fc:	8f 90       	pop	r8
    50fe:	7f 90       	pop	r7
    5100:	6f 90       	pop	r6
    5102:	5f 90       	pop	r5
    5104:	4f 90       	pop	r4
    5106:	3f 90       	pop	r3
    5108:	2f 90       	pop	r2
    510a:	08 95       	ret

0000510c <strnlen_P>:
    510c:	fc 01       	movw	r30, r24
    510e:	05 90       	lpm	r0, Z+
    5110:	61 50       	subi	r22, 0x01	; 1
    5112:	70 40       	sbci	r23, 0x00	; 0
    5114:	01 10       	cpse	r0, r1
    5116:	d8 f7       	brcc	.-10     	; 0x510e <strnlen_P+0x2>
    5118:	80 95       	com	r24
    511a:	90 95       	com	r25
    511c:	8e 0f       	add	r24, r30
    511e:	9f 1f       	adc	r25, r31
    5120:	08 95       	ret

00005122 <strnlen>:
    5122:	fc 01       	movw	r30, r24
    5124:	61 50       	subi	r22, 0x01	; 1
    5126:	70 40       	sbci	r23, 0x00	; 0
    5128:	01 90       	ld	r0, Z+
    512a:	01 10       	cpse	r0, r1
    512c:	d8 f7       	brcc	.-10     	; 0x5124 <strnlen+0x2>
    512e:	80 95       	com	r24
    5130:	90 95       	com	r25
    5132:	8e 0f       	add	r24, r30
    5134:	9f 1f       	adc	r25, r31
    5136:	08 95       	ret

00005138 <fputc>:
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	fb 01       	movw	r30, r22
    5142:	23 81       	ldd	r18, Z+3	; 0x03
    5144:	21 fd       	sbrc	r18, 1
    5146:	03 c0       	rjmp	.+6      	; 0x514e <fputc+0x16>
    5148:	8f ef       	ldi	r24, 0xFF	; 255
    514a:	9f ef       	ldi	r25, 0xFF	; 255
    514c:	2c c0       	rjmp	.+88     	; 0x51a6 <fputc+0x6e>
    514e:	22 ff       	sbrs	r18, 2
    5150:	16 c0       	rjmp	.+44     	; 0x517e <fputc+0x46>
    5152:	46 81       	ldd	r20, Z+6	; 0x06
    5154:	57 81       	ldd	r21, Z+7	; 0x07
    5156:	24 81       	ldd	r18, Z+4	; 0x04
    5158:	35 81       	ldd	r19, Z+5	; 0x05
    515a:	42 17       	cp	r20, r18
    515c:	53 07       	cpc	r21, r19
    515e:	44 f4       	brge	.+16     	; 0x5170 <fputc+0x38>
    5160:	a0 81       	ld	r26, Z
    5162:	b1 81       	ldd	r27, Z+1	; 0x01
    5164:	9d 01       	movw	r18, r26
    5166:	2f 5f       	subi	r18, 0xFF	; 255
    5168:	3f 4f       	sbci	r19, 0xFF	; 255
    516a:	31 83       	std	Z+1, r19	; 0x01
    516c:	20 83       	st	Z, r18
    516e:	8c 93       	st	X, r24
    5170:	26 81       	ldd	r18, Z+6	; 0x06
    5172:	37 81       	ldd	r19, Z+7	; 0x07
    5174:	2f 5f       	subi	r18, 0xFF	; 255
    5176:	3f 4f       	sbci	r19, 0xFF	; 255
    5178:	37 83       	std	Z+7, r19	; 0x07
    517a:	26 83       	std	Z+6, r18	; 0x06
    517c:	14 c0       	rjmp	.+40     	; 0x51a6 <fputc+0x6e>
    517e:	8b 01       	movw	r16, r22
    5180:	ec 01       	movw	r28, r24
    5182:	fb 01       	movw	r30, r22
    5184:	00 84       	ldd	r0, Z+8	; 0x08
    5186:	f1 85       	ldd	r31, Z+9	; 0x09
    5188:	e0 2d       	mov	r30, r0
    518a:	19 95       	eicall
    518c:	89 2b       	or	r24, r25
    518e:	e1 f6       	brne	.-72     	; 0x5148 <fputc+0x10>
    5190:	d8 01       	movw	r26, r16
    5192:	16 96       	adiw	r26, 0x06	; 6
    5194:	8d 91       	ld	r24, X+
    5196:	9c 91       	ld	r25, X
    5198:	17 97       	sbiw	r26, 0x07	; 7
    519a:	01 96       	adiw	r24, 0x01	; 1
    519c:	17 96       	adiw	r26, 0x07	; 7
    519e:	9c 93       	st	X, r25
    51a0:	8e 93       	st	-X, r24
    51a2:	16 97       	sbiw	r26, 0x06	; 6
    51a4:	ce 01       	movw	r24, r28
    51a6:	df 91       	pop	r29
    51a8:	cf 91       	pop	r28
    51aa:	1f 91       	pop	r17
    51ac:	0f 91       	pop	r16
    51ae:	08 95       	ret

000051b0 <__ultoa_invert>:
    51b0:	fa 01       	movw	r30, r20
    51b2:	aa 27       	eor	r26, r26
    51b4:	28 30       	cpi	r18, 0x08	; 8
    51b6:	51 f1       	breq	.+84     	; 0x520c <__ultoa_invert+0x5c>
    51b8:	20 31       	cpi	r18, 0x10	; 16
    51ba:	81 f1       	breq	.+96     	; 0x521c <__ultoa_invert+0x6c>
    51bc:	e8 94       	clt
    51be:	6f 93       	push	r22
    51c0:	6e 7f       	andi	r22, 0xFE	; 254
    51c2:	6e 5f       	subi	r22, 0xFE	; 254
    51c4:	7f 4f       	sbci	r23, 0xFF	; 255
    51c6:	8f 4f       	sbci	r24, 0xFF	; 255
    51c8:	9f 4f       	sbci	r25, 0xFF	; 255
    51ca:	af 4f       	sbci	r26, 0xFF	; 255
    51cc:	b1 e0       	ldi	r27, 0x01	; 1
    51ce:	3e d0       	rcall	.+124    	; 0x524c <__ultoa_invert+0x9c>
    51d0:	b4 e0       	ldi	r27, 0x04	; 4
    51d2:	3c d0       	rcall	.+120    	; 0x524c <__ultoa_invert+0x9c>
    51d4:	67 0f       	add	r22, r23
    51d6:	78 1f       	adc	r23, r24
    51d8:	89 1f       	adc	r24, r25
    51da:	9a 1f       	adc	r25, r26
    51dc:	a1 1d       	adc	r26, r1
    51de:	68 0f       	add	r22, r24
    51e0:	79 1f       	adc	r23, r25
    51e2:	8a 1f       	adc	r24, r26
    51e4:	91 1d       	adc	r25, r1
    51e6:	a1 1d       	adc	r26, r1
    51e8:	6a 0f       	add	r22, r26
    51ea:	71 1d       	adc	r23, r1
    51ec:	81 1d       	adc	r24, r1
    51ee:	91 1d       	adc	r25, r1
    51f0:	a1 1d       	adc	r26, r1
    51f2:	20 d0       	rcall	.+64     	; 0x5234 <__ultoa_invert+0x84>
    51f4:	09 f4       	brne	.+2      	; 0x51f8 <__ultoa_invert+0x48>
    51f6:	68 94       	set
    51f8:	3f 91       	pop	r19
    51fa:	2a e0       	ldi	r18, 0x0A	; 10
    51fc:	26 9f       	mul	r18, r22
    51fe:	11 24       	eor	r1, r1
    5200:	30 19       	sub	r19, r0
    5202:	30 5d       	subi	r19, 0xD0	; 208
    5204:	31 93       	st	Z+, r19
    5206:	de f6       	brtc	.-74     	; 0x51be <__ultoa_invert+0xe>
    5208:	cf 01       	movw	r24, r30
    520a:	08 95       	ret
    520c:	46 2f       	mov	r20, r22
    520e:	47 70       	andi	r20, 0x07	; 7
    5210:	40 5d       	subi	r20, 0xD0	; 208
    5212:	41 93       	st	Z+, r20
    5214:	b3 e0       	ldi	r27, 0x03	; 3
    5216:	0f d0       	rcall	.+30     	; 0x5236 <__ultoa_invert+0x86>
    5218:	c9 f7       	brne	.-14     	; 0x520c <__ultoa_invert+0x5c>
    521a:	f6 cf       	rjmp	.-20     	; 0x5208 <__ultoa_invert+0x58>
    521c:	46 2f       	mov	r20, r22
    521e:	4f 70       	andi	r20, 0x0F	; 15
    5220:	40 5d       	subi	r20, 0xD0	; 208
    5222:	4a 33       	cpi	r20, 0x3A	; 58
    5224:	18 f0       	brcs	.+6      	; 0x522c <__ultoa_invert+0x7c>
    5226:	49 5d       	subi	r20, 0xD9	; 217
    5228:	31 fd       	sbrc	r19, 1
    522a:	40 52       	subi	r20, 0x20	; 32
    522c:	41 93       	st	Z+, r20
    522e:	02 d0       	rcall	.+4      	; 0x5234 <__ultoa_invert+0x84>
    5230:	a9 f7       	brne	.-22     	; 0x521c <__ultoa_invert+0x6c>
    5232:	ea cf       	rjmp	.-44     	; 0x5208 <__ultoa_invert+0x58>
    5234:	b4 e0       	ldi	r27, 0x04	; 4
    5236:	a6 95       	lsr	r26
    5238:	97 95       	ror	r25
    523a:	87 95       	ror	r24
    523c:	77 95       	ror	r23
    523e:	67 95       	ror	r22
    5240:	ba 95       	dec	r27
    5242:	c9 f7       	brne	.-14     	; 0x5236 <__ultoa_invert+0x86>
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	61 05       	cpc	r22, r1
    5248:	71 05       	cpc	r23, r1
    524a:	08 95       	ret
    524c:	9b 01       	movw	r18, r22
    524e:	ac 01       	movw	r20, r24
    5250:	0a 2e       	mov	r0, r26
    5252:	06 94       	lsr	r0
    5254:	57 95       	ror	r21
    5256:	47 95       	ror	r20
    5258:	37 95       	ror	r19
    525a:	27 95       	ror	r18
    525c:	ba 95       	dec	r27
    525e:	c9 f7       	brne	.-14     	; 0x5252 <__ultoa_invert+0xa2>
    5260:	62 0f       	add	r22, r18
    5262:	73 1f       	adc	r23, r19
    5264:	84 1f       	adc	r24, r20
    5266:	95 1f       	adc	r25, r21
    5268:	a0 1d       	adc	r26, r0
    526a:	08 95       	ret

0000526c <_exit>:
    526c:	f8 94       	cli

0000526e <__stop_program>:
    526e:	ff cf       	rjmp	.-2      	; 0x526e <__stop_program>
